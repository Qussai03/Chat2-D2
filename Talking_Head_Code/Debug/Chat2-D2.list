
Chat2-D2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d08  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005ec4  08005ec4  00006ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f34  08005f34  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f34  08005f34  00006f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f3c  08005f3c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f3c  08005f3c  00006f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f40  08005f40  00006f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20040000  08005f44  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  2004000c  08005f50  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040320  08005f50  00007320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd87  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fbb  00000000  00000000  00022dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  00025d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001361  00000000  00000000  00027620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c4cb  00000000  00000000  00028981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d9ce  00000000  00000000  00054e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a187  00000000  00000000  0007281a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018c9a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b38  00000000  00000000  0018c9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0019351c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2004000c 	.word	0x2004000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005eac 	.word	0x08005eac

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20040010 	.word	0x20040010
 80001f8:	08005eac 	.word	0x08005eac

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 ff5d 	bl	80013ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f812 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 fa2c 	bl	8000954 <MX_GPIO_Init>
  MX_DMA_Init();
 80004fc:	f000 fa00 	bl	8000900 <MX_DMA_Init>
  MX_SPI1_Init();
 8000500:	f000 f99a 	bl	8000838 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000504:	f000 f85c 	bl	80005c0 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8000508:	f000 f8fe 	bl	8000708 <MX_LPUART1_UART_Init>
  MX_UART5_Init();
 800050c:	f000 f948 	bl	80007a0 <MX_UART5_Init>
  MX_I2C1_Init();
 8000510:	f000 f8ba 	bl	8000688 <MX_I2C1_Init>
  MX_TIM16_Init();
 8000514:	f000 f9ce 	bl	80008b4 <MX_TIM16_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <main+0x2c>

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b096      	sub	sp, #88	@ 0x58
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	2244      	movs	r2, #68	@ 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f005 fc92 	bl	8005e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	463b      	mov	r3, r7
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800053e:	2000      	movs	r0, #0
 8000540:	f002 fe7e 	bl	8003240 <HAL_PWREx_ControlVoltageScaling>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800054a:	f000 fc11 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800054e:	2310      	movs	r3, #16
 8000550:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000552:	2301      	movs	r3, #1
 8000554:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800055a:	23b0      	movs	r3, #176	@ 0xb0
 800055c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000562:	2301      	movs	r3, #1
 8000564:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000566:	2303      	movs	r3, #3
 8000568:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 15;
 800056a:	230f      	movs	r3, #15
 800056c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056e:	2302      	movs	r3, #2
 8000570:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000572:	2302      	movs	r3, #2
 8000574:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4618      	mov	r0, r3
 8000580:	f002 ff12 	bl	80033a8 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800058a:	f000 fbf1 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2303      	movs	r3, #3
 8000594:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	2105      	movs	r1, #5
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 fb18 	bl	8003bdc <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005b2:	f000 fbdd 	bl	8000d70 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3758      	adds	r7, #88	@ 0x58
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c6:	463b      	mov	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
 80005d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005d6:	4b29      	ldr	r3, [pc, #164]	@ (800067c <MX_ADC1_Init+0xbc>)
 80005d8:	4a29      	ldr	r2, [pc, #164]	@ (8000680 <MX_ADC1_Init+0xc0>)
 80005da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80005dc:	4b27      	ldr	r3, [pc, #156]	@ (800067c <MX_ADC1_Init+0xbc>)
 80005de:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80005e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e4:	4b25      	ldr	r3, [pc, #148]	@ (800067c <MX_ADC1_Init+0xbc>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ea:	4b24      	ldr	r3, [pc, #144]	@ (800067c <MX_ADC1_Init+0xbc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005f0:	4b22      	ldr	r3, [pc, #136]	@ (800067c <MX_ADC1_Init+0xbc>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f6:	4b21      	ldr	r3, [pc, #132]	@ (800067c <MX_ADC1_Init+0xbc>)
 80005f8:	2204      	movs	r2, #4
 80005fa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005fc:	4b1f      	ldr	r3, [pc, #124]	@ (800067c <MX_ADC1_Init+0xbc>)
 80005fe:	2200      	movs	r2, #0
 8000600:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000602:	4b1e      	ldr	r3, [pc, #120]	@ (800067c <MX_ADC1_Init+0xbc>)
 8000604:	2201      	movs	r2, #1
 8000606:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000608:	4b1c      	ldr	r3, [pc, #112]	@ (800067c <MX_ADC1_Init+0xbc>)
 800060a:	2201      	movs	r2, #1
 800060c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b1b      	ldr	r3, [pc, #108]	@ (800067c <MX_ADC1_Init+0xbc>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000616:	4b19      	ldr	r3, [pc, #100]	@ (800067c <MX_ADC1_Init+0xbc>)
 8000618:	2200      	movs	r2, #0
 800061a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061c:	4b17      	ldr	r3, [pc, #92]	@ (800067c <MX_ADC1_Init+0xbc>)
 800061e:	2200      	movs	r2, #0
 8000620:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000622:	4b16      	ldr	r3, [pc, #88]	@ (800067c <MX_ADC1_Init+0xbc>)
 8000624:	2201      	movs	r2, #1
 8000626:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800062a:	4b14      	ldr	r3, [pc, #80]	@ (800067c <MX_ADC1_Init+0xbc>)
 800062c:	2200      	movs	r2, #0
 800062e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <MX_ADC1_Init+0xbc>)
 8000632:	2200      	movs	r2, #0
 8000634:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000638:	4810      	ldr	r0, [pc, #64]	@ (800067c <MX_ADC1_Init+0xbc>)
 800063a:	f001 f8f3 	bl	8001824 <HAL_ADC_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000644:	f000 fb94 	bl	8000d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000648:	4b0e      	ldr	r3, [pc, #56]	@ (8000684 <MX_ADC1_Init+0xc4>)
 800064a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800064c:	2306      	movs	r3, #6
 800064e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000650:	2307      	movs	r3, #7
 8000652:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000654:	237f      	movs	r3, #127	@ 0x7f
 8000656:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000658:	2304      	movs	r3, #4
 800065a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	@ (800067c <MX_ADC1_Init+0xbc>)
 8000666:	f001 fbf5 	bl	8001e54 <HAL_ADC_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000670:	f000 fb7e 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	3718      	adds	r7, #24
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20040028 	.word	0x20040028
 8000680:	50040000 	.word	0x50040000
 8000684:	04300002 	.word	0x04300002

08000688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800068c:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <MX_I2C1_Init+0x74>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	@ (8000700 <MX_I2C1_Init+0x78>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A175AB;
 8000692:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <MX_I2C1_Init+0x74>)
 8000694:	4a1b      	ldr	r2, [pc, #108]	@ (8000704 <MX_I2C1_Init+0x7c>)
 8000696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000698:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069e:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <MX_I2C1_Init+0x74>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006aa:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MX_I2C1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_I2C1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c2:	480e      	ldr	r0, [pc, #56]	@ (80006fc <MX_I2C1_Init+0x74>)
 80006c4:	f002 fc6a 	bl	8002f9c <HAL_I2C_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ce:	f000 fb4f 	bl	8000d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d2:	2100      	movs	r1, #0
 80006d4:	4809      	ldr	r0, [pc, #36]	@ (80006fc <MX_I2C1_Init+0x74>)
 80006d6:	f002 fcfc 	bl	80030d2 <HAL_I2CEx_ConfigAnalogFilter>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006e0:	f000 fb46 	bl	8000d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006e4:	2100      	movs	r1, #0
 80006e6:	4805      	ldr	r0, [pc, #20]	@ (80006fc <MX_I2C1_Init+0x74>)
 80006e8:	f002 fd3e 	bl	8003168 <HAL_I2CEx_ConfigDigitalFilter>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006f2:	f000 fb3d 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200400f0 	.word	0x200400f0
 8000700:	40005400 	.word	0x40005400
 8000704:	30a175ab 	.word	0x30a175ab

08000708 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800070c:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <MX_LPUART1_UART_Init+0x90>)
 800070e:	4a23      	ldr	r2, [pc, #140]	@ (800079c <MX_LPUART1_UART_Init+0x94>)
 8000710:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000712:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <MX_LPUART1_UART_Init+0x90>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <MX_LPUART1_UART_Init+0x90>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b1d      	ldr	r3, [pc, #116]	@ (8000798 <MX_LPUART1_UART_Init+0x90>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000726:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <MX_LPUART1_UART_Init+0x90>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_LPUART1_UART_Init+0x90>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <MX_LPUART1_UART_Init+0x90>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000738:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_LPUART1_UART_Init+0x90>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800073e:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <MX_LPUART1_UART_Init+0x90>)
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000744:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_LPUART1_UART_Init+0x90>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <MX_LPUART1_UART_Init+0x90>)
 800074c:	2200      	movs	r2, #0
 800074e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000750:	4811      	ldr	r0, [pc, #68]	@ (8000798 <MX_LPUART1_UART_Init+0x90>)
 8000752:	f004 fd11 	bl	8005178 <HAL_UART_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800075c:	f000 fb08 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000760:	2100      	movs	r1, #0
 8000762:	480d      	ldr	r0, [pc, #52]	@ (8000798 <MX_LPUART1_UART_Init+0x90>)
 8000764:	f005 faac 	bl	8005cc0 <HAL_UARTEx_SetTxFifoThreshold>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800076e:	f000 faff 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000772:	2100      	movs	r1, #0
 8000774:	4808      	ldr	r0, [pc, #32]	@ (8000798 <MX_LPUART1_UART_Init+0x90>)
 8000776:	f005 fae1 	bl	8005d3c <HAL_UARTEx_SetRxFifoThreshold>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000780:	f000 faf6 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <MX_LPUART1_UART_Init+0x90>)
 8000786:	f005 fa62 	bl	8005c4e <HAL_UARTEx_DisableFifoMode>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000790:	f000 faee 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20040144 	.word	0x20040144
 800079c:	40008000 	.word	0x40008000

080007a0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80007a4:	4b22      	ldr	r3, [pc, #136]	@ (8000830 <MX_UART5_Init+0x90>)
 80007a6:	4a23      	ldr	r2, [pc, #140]	@ (8000834 <MX_UART5_Init+0x94>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80007aa:	4b21      	ldr	r3, [pc, #132]	@ (8000830 <MX_UART5_Init+0x90>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <MX_UART5_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <MX_UART5_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80007be:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <MX_UART5_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <MX_UART5_Init+0x90>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <MX_UART5_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <MX_UART5_Init+0x90>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <MX_UART5_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_UART5_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_UART5_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80007e8:	4811      	ldr	r0, [pc, #68]	@ (8000830 <MX_UART5_Init+0x90>)
 80007ea:	f004 fcc5 	bl	8005178 <HAL_UART_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80007f4:	f000 fabc 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f8:	2100      	movs	r1, #0
 80007fa:	480d      	ldr	r0, [pc, #52]	@ (8000830 <MX_UART5_Init+0x90>)
 80007fc:	f005 fa60 	bl	8005cc0 <HAL_UARTEx_SetTxFifoThreshold>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000806:	f000 fab3 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080a:	2100      	movs	r1, #0
 800080c:	4808      	ldr	r0, [pc, #32]	@ (8000830 <MX_UART5_Init+0x90>)
 800080e:	f005 fa95 	bl	8005d3c <HAL_UARTEx_SetRxFifoThreshold>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000818:	f000 faaa 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	@ (8000830 <MX_UART5_Init+0x90>)
 800081e:	f005 fa16 	bl	8005c4e <HAL_UARTEx_DisableFifoMode>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000828:	f000 faa2 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200401d8 	.word	0x200401d8
 8000834:	40005000 	.word	0x40005000

08000838 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800083c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ac <MX_SPI1_Init+0x74>)
 800083e:	4a1c      	ldr	r2, [pc, #112]	@ (80008b0 <MX_SPI1_Init+0x78>)
 8000840:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <MX_SPI1_Init+0x74>)
 8000844:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000848:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800084a:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <MX_SPI1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_SPI1_Init+0x74>)
 8000852:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000856:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000858:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <MX_SPI1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800085e:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <MX_SPI1_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_SPI1_Init+0x74>)
 8000866:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800086a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800086c:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_SPI1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_SPI1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_SPI1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <MX_SPI1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000884:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_SPI1_Init+0x74>)
 8000886:	2207      	movs	r2, #7
 8000888:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_SPI1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_SPI1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_SPI1_Init+0x74>)
 8000898:	f004 f976 	bl	8004b88 <HAL_SPI_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008a2:	f000 fa65 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2004026c 	.word	0x2004026c
 80008b0:	40013000 	.word	0x40013000

080008b4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_TIM16_Init+0x44>)
 80008ba:	4a10      	ldr	r2, [pc, #64]	@ (80008fc <MX_TIM16_Init+0x48>)
 80008bc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7680;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_TIM16_Init+0x44>)
 80008c0:	f44f 52f0 	mov.w	r2, #7680	@ 0x1e00
 80008c4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <MX_TIM16_Init+0x44>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	@ (80008f8 <MX_TIM16_Init+0x44>)
 80008ce:	2220      	movs	r2, #32
 80008d0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <MX_TIM16_Init+0x44>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80008d8:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <MX_TIM16_Init+0x44>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <MX_TIM16_Init+0x44>)
 80008e0:	2280      	movs	r2, #128	@ 0x80
 80008e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	@ (80008f8 <MX_TIM16_Init+0x44>)
 80008e6:	f004 f9f2 	bl	8004cce <HAL_TIM_Base_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80008f0:	f000 fa3e 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200402d0 	.word	0x200402d0
 80008fc:	40014400 	.word	0x40014400

08000900 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000906:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <MX_DMA_Init+0x50>)
 8000908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800090a:	4a11      	ldr	r2, [pc, #68]	@ (8000950 <MX_DMA_Init+0x50>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6493      	str	r3, [r2, #72]	@ 0x48
 8000912:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_DMA_Init+0x50>)
 8000914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800091e:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_DMA_Init+0x50>)
 8000920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000922:	4a0b      	ldr	r2, [pc, #44]	@ (8000950 <MX_DMA_Init+0x50>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6493      	str	r3, [r2, #72]	@ 0x48
 800092a:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_DMA_Init+0x50>)
 800092c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	200b      	movs	r0, #11
 800093c:	f001 ff93 	bl	8002866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000940:	200b      	movs	r0, #11
 8000942:	f001 ffac 	bl	800289e <HAL_NVIC_EnableIRQ>

}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08e      	sub	sp, #56	@ 0x38
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800096a:	4bb2      	ldr	r3, [pc, #712]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	4ab1      	ldr	r2, [pc, #708]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 8000970:	f043 0310 	orr.w	r3, r3, #16
 8000974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000976:	4baf      	ldr	r3, [pc, #700]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097a:	f003 0310 	and.w	r3, r3, #16
 800097e:	623b      	str	r3, [r7, #32]
 8000980:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	4bac      	ldr	r3, [pc, #688]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000986:	4aab      	ldr	r2, [pc, #684]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098e:	4ba9      	ldr	r3, [pc, #676]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	61fb      	str	r3, [r7, #28]
 8000998:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800099a:	4ba6      	ldr	r3, [pc, #664]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099e:	4aa5      	ldr	r2, [pc, #660]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 80009a0:	f043 0320 	orr.w	r3, r3, #32
 80009a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a6:	4ba3      	ldr	r3, [pc, #652]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	f003 0320 	and.w	r3, r3, #32
 80009ae:	61bb      	str	r3, [r7, #24]
 80009b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	4ba0      	ldr	r3, [pc, #640]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	4a9f      	ldr	r2, [pc, #636]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009be:	4b9d      	ldr	r3, [pc, #628]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b9a      	ldr	r3, [pc, #616]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	4a99      	ldr	r2, [pc, #612]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d6:	4b97      	ldr	r3, [pc, #604]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4b94      	ldr	r3, [pc, #592]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	4a93      	ldr	r2, [pc, #588]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ee:	4b91      	ldr	r3, [pc, #580]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	4b8e      	ldr	r3, [pc, #568]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	4a8d      	ldr	r2, [pc, #564]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a06:	4b8b      	ldr	r3, [pc, #556]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a12:	4b88      	ldr	r3, [pc, #544]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	4a87      	ldr	r2, [pc, #540]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 8000a18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a1e:	4b85      	ldr	r3, [pc, #532]	@ (8000c34 <MX_GPIO_Init+0x2e0>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000a2a:	f002 fcad 	bl	8003388 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2107      	movs	r1, #7
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a36:	f002 fa99 	bl	8002f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	487e      	ldr	r0, [pc, #504]	@ (8000c38 <MX_GPIO_Init+0x2e4>)
 8000a40:	f002 fa94 	bl	8002f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2183      	movs	r1, #131	@ 0x83
 8000a48:	487c      	ldr	r0, [pc, #496]	@ (8000c3c <MX_GPIO_Init+0x2e8>)
 8000a4a:	f002 fa8f 	bl	8002f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a4e:	230c      	movs	r3, #12
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000a5e:	230d      	movs	r3, #13
 8000a60:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a66:	4619      	mov	r1, r3
 8000a68:	4875      	ldr	r0, [pc, #468]	@ (8000c40 <MX_GPIO_Init+0x2ec>)
 8000a6a:	f002 f8ed 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a80:	4619      	mov	r1, r3
 8000a82:	486d      	ldr	r0, [pc, #436]	@ (8000c38 <MX_GPIO_Init+0x2e4>)
 8000a84:	f002 f8e0 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000a88:	2307      	movs	r3, #7
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8c:	2312      	movs	r3, #18
 8000a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4868      	ldr	r0, [pc, #416]	@ (8000c44 <MX_GPIO_Init+0x2f0>)
 8000aa4:	f002 f8d0 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000aa8:	2380      	movs	r3, #128	@ 0x80
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000ab8:	230d      	movs	r3, #13
 8000aba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4860      	ldr	r0, [pc, #384]	@ (8000c44 <MX_GPIO_Init+0x2f0>)
 8000ac4:	f002 f8c0 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000ac8:	2307      	movs	r3, #7
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000adc:	4619      	mov	r1, r3
 8000ade:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae2:	f002 f8b1 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ae6:	2320      	movs	r3, #32
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afa:	4619      	mov	r1, r3
 8000afc:	484e      	ldr	r0, [pc, #312]	@ (8000c38 <MX_GPIO_Init+0x2e4>)
 8000afe:	f002 f8a3 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
 8000b02:	2383      	movs	r3, #131	@ 0x83
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b16:	4619      	mov	r1, r3
 8000b18:	4848      	ldr	r0, [pc, #288]	@ (8000c3c <MX_GPIO_Init+0x2e8>)
 8000b1a:	f002 f895 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000b1e:	2344      	movs	r3, #68	@ 0x44
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b22:	2303      	movs	r3, #3
 8000b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4842      	ldr	r0, [pc, #264]	@ (8000c3c <MX_GPIO_Init+0x2e8>)
 8000b32:	f002 f889 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000b36:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b50:	4619      	mov	r1, r3
 8000b52:	483b      	ldr	r0, [pc, #236]	@ (8000c40 <MX_GPIO_Init+0x2ec>)
 8000b54:	f002 f878 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b58:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b72:	4619      	mov	r1, r3
 8000b74:	4832      	ldr	r0, [pc, #200]	@ (8000c40 <MX_GPIO_Init+0x2ec>)
 8000b76:	f002 f867 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	4829      	ldr	r0, [pc, #164]	@ (8000c3c <MX_GPIO_Init+0x2e8>)
 8000b98:	f002 f856 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000b9c:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000bae:	230d      	movs	r3, #13
 8000bb0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4820      	ldr	r0, [pc, #128]	@ (8000c3c <MX_GPIO_Init+0x2e8>)
 8000bba:	f002 f845 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000bbe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000bd0:	230e      	movs	r3, #14
 8000bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4818      	ldr	r0, [pc, #96]	@ (8000c3c <MX_GPIO_Init+0x2e8>)
 8000bdc:	f002 f834 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000be0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bf2:	2307      	movs	r3, #7
 8000bf4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4812      	ldr	r0, [pc, #72]	@ (8000c48 <MX_GPIO_Init+0x2f4>)
 8000bfe:	f002 f823 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000c02:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c14:	2302      	movs	r3, #2
 8000c16:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480a      	ldr	r0, [pc, #40]	@ (8000c48 <MX_GPIO_Init+0x2f4>)
 8000c20:	f002 f812 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c24:	2340      	movs	r3, #64	@ 0x40
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	e00b      	b.n	8000c4c <MX_GPIO_Init+0x2f8>
 8000c34:	40021000 	.word	0x40021000
 8000c38:	48000800 	.word	0x48000800
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	48001000 	.word	0x48001000
 8000c44:	48001400 	.word	0x48001400
 8000c48:	48000c00 	.word	0x48000c00
 8000c4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000c4e:	230d      	movs	r3, #13
 8000c50:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	4841      	ldr	r0, [pc, #260]	@ (8000d60 <MX_GPIO_Init+0x40c>)
 8000c5a:	f001 fff5 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c5e:	2380      	movs	r3, #128	@ 0x80
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	4839      	ldr	r0, [pc, #228]	@ (8000d60 <MX_GPIO_Init+0x40c>)
 8000c7a:	f001 ffe5 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000c7e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c90:	230c      	movs	r3, #12
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4831      	ldr	r0, [pc, #196]	@ (8000d60 <MX_GPIO_Init+0x40c>)
 8000c9c:	f001 ffd4 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000ca0:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc0:	f001 ffc2 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cdc:	f001 ffb4 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cf0:	2309      	movs	r3, #9
 8000cf2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	481a      	ldr	r0, [pc, #104]	@ (8000d64 <MX_GPIO_Init+0x410>)
 8000cfc:	f001 ffa4 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d00:	2378      	movs	r3, #120	@ 0x78
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d10:	2307      	movs	r3, #7
 8000d12:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4812      	ldr	r0, [pc, #72]	@ (8000d64 <MX_GPIO_Init+0x410>)
 8000d1c:	f001 ff94 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d20:	2310      	movs	r3, #16
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d30:	2306      	movs	r3, #6
 8000d32:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <MX_GPIO_Init+0x414>)
 8000d3c:	f001 ff84 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d40:	2301      	movs	r3, #1
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4806      	ldr	r0, [pc, #24]	@ (8000d6c <MX_GPIO_Init+0x418>)
 8000d54:	f001 ff78 	bl	8002c48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d58:	bf00      	nop
 8000d5a:	3738      	adds	r7, #56	@ 0x38
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	48000800 	.word	0x48000800
 8000d64:	48000c00 	.word	0x48000c00
 8000d68:	48000400 	.word	0x48000400
 8000d6c:	48001000 	.word	0x48001000

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <Error_Handler+0x8>

08000d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d86:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9e:	4a08      	ldr	r2, [pc, #32]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0b0      	sub	sp, #192	@ 0xc0
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ddc:	f107 0318 	add.w	r3, r7, #24
 8000de0:	2294      	movs	r2, #148	@ 0x94
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f005 f835 	bl	8005e54 <memset>
  if(hadc->Instance==ADC1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a4f      	ldr	r2, [pc, #316]	@ (8000f2c <HAL_ADC_MspInit+0x168>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	f040 8096 	bne.w	8000f22 <HAL_ADC_MspInit+0x15e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000df6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dfa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000dfc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000e04:	2301      	movs	r3, #1
 8000e06:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000e0c:	2310      	movs	r3, #16
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e20:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e22:	f107 0318 	add.w	r3, r7, #24
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 f996 	bl	8004158 <HAL_RCCEx_PeriphCLKConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8000e32:	f7ff ff9d 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e36:	4b3e      	ldr	r3, [pc, #248]	@ (8000f30 <HAL_ADC_MspInit+0x16c>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3a:	4a3d      	ldr	r2, [pc, #244]	@ (8000f30 <HAL_ADC_MspInit+0x16c>)
 8000e3c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e42:	4b3b      	ldr	r3, [pc, #236]	@ (8000f30 <HAL_ADC_MspInit+0x16c>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	4b38      	ldr	r3, [pc, #224]	@ (8000f30 <HAL_ADC_MspInit+0x16c>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e52:	4a37      	ldr	r2, [pc, #220]	@ (8000f30 <HAL_ADC_MspInit+0x16c>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5a:	4b35      	ldr	r3, [pc, #212]	@ (8000f30 <HAL_ADC_MspInit+0x16c>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b32      	ldr	r3, [pc, #200]	@ (8000f30 <HAL_ADC_MspInit+0x16c>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6a:	4a31      	ldr	r2, [pc, #196]	@ (8000f30 <HAL_ADC_MspInit+0x16c>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e72:	4b2f      	ldr	r3, [pc, #188]	@ (8000f30 <HAL_ADC_MspInit+0x16c>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e7e:	231f      	movs	r3, #31
 8000e80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e84:	230b      	movs	r3, #11
 8000e86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e94:	4619      	mov	r1, r3
 8000e96:	4827      	ldr	r0, [pc, #156]	@ (8000f34 <HAL_ADC_MspInit+0x170>)
 8000e98:	f001 fed6 	bl	8002c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ea2:	230b      	movs	r3, #11
 8000ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb8:	f001 fec6 	bl	8002c48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <HAL_ADC_MspInit+0x174>)
 8000ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8000f3c <HAL_ADC_MspInit+0x178>)
 8000ec0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f38 <HAL_ADC_MspInit+0x174>)
 8000ec4:	2205      	movs	r2, #5
 8000ec6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f38 <HAL_ADC_MspInit+0x174>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <HAL_ADC_MspInit+0x174>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <HAL_ADC_MspInit+0x174>)
 8000ed6:	2280      	movs	r2, #128	@ 0x80
 8000ed8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eda:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <HAL_ADC_MspInit+0x174>)
 8000edc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ee0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <HAL_ADC_MspInit+0x174>)
 8000ee4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ee8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eea:	4b13      	ldr	r3, [pc, #76]	@ (8000f38 <HAL_ADC_MspInit+0x174>)
 8000eec:	2220      	movs	r2, #32
 8000eee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <HAL_ADC_MspInit+0x174>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ef6:	4810      	ldr	r0, [pc, #64]	@ (8000f38 <HAL_ADC_MspInit+0x174>)
 8000ef8:	f001 fcec 	bl	80028d4 <HAL_DMA_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_ADC_MspInit+0x142>
    {
      Error_Handler();
 8000f02:	f7ff ff35 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a0b      	ldr	r2, [pc, #44]	@ (8000f38 <HAL_ADC_MspInit+0x174>)
 8000f0a:	651a      	str	r2, [r3, #80]	@ 0x50
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <HAL_ADC_MspInit+0x174>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2012      	movs	r0, #18
 8000f18:	f001 fca5 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000f1c:	2012      	movs	r0, #18
 8000f1e:	f001 fcbe 	bl	800289e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f22:	bf00      	nop
 8000f24:	37c0      	adds	r7, #192	@ 0xc0
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	50040000 	.word	0x50040000
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48000800 	.word	0x48000800
 8000f38:	20040090 	.word	0x20040090
 8000f3c:	40020008 	.word	0x40020008

08000f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0ae      	sub	sp, #184	@ 0xb8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	2294      	movs	r2, #148	@ 0x94
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f004 ff77 	bl	8005e54 <memset>
  if(hi2c->Instance==I2C1)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a21      	ldr	r2, [pc, #132]	@ (8000ff0 <HAL_I2C_MspInit+0xb0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d13b      	bne.n	8000fe8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f70:	2340      	movs	r3, #64	@ 0x40
 8000f72:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f003 f8eb 	bl	8004158 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f88:	f7ff fef2 	bl	8000d70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <HAL_I2C_MspInit+0xb4>)
 8000f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f90:	4a18      	ldr	r2, [pc, #96]	@ (8000ff4 <HAL_I2C_MspInit+0xb4>)
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f98:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <HAL_I2C_MspInit+0xb4>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fa4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fac:	2312      	movs	r3, #18
 8000fae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480b      	ldr	r0, [pc, #44]	@ (8000ff8 <HAL_I2C_MspInit+0xb8>)
 8000fcc:	f001 fe3c 	bl	8002c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd0:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <HAL_I2C_MspInit+0xb4>)
 8000fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd4:	4a07      	ldr	r2, [pc, #28]	@ (8000ff4 <HAL_I2C_MspInit+0xb4>)
 8000fd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fda:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fdc:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <HAL_I2C_MspInit+0xb4>)
 8000fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000fe8:	bf00      	nop
 8000fea:	37b8      	adds	r7, #184	@ 0xb8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	48000400 	.word	0x48000400

08000ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b0b2      	sub	sp, #200	@ 0xc8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	2294      	movs	r2, #148	@ 0x94
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f004 ff19 	bl	8005e54 <memset>
  if(huart->Instance==LPUART1)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a54      	ldr	r2, [pc, #336]	@ (8001178 <HAL_UART_MspInit+0x17c>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d13e      	bne.n	80010aa <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800102c:	2320      	movs	r3, #32
 800102e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001030:	2300      	movs	r3, #0
 8001032:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001034:	f107 0320 	add.w	r3, r7, #32
 8001038:	4618      	mov	r0, r3
 800103a:	f003 f88d 	bl	8004158 <HAL_RCCEx_PeriphCLKConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001044:	f7ff fe94 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001048:	4b4c      	ldr	r3, [pc, #304]	@ (800117c <HAL_UART_MspInit+0x180>)
 800104a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800104c:	4a4b      	ldr	r2, [pc, #300]	@ (800117c <HAL_UART_MspInit+0x180>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001054:	4b49      	ldr	r3, [pc, #292]	@ (800117c <HAL_UART_MspInit+0x180>)
 8001056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001060:	4b46      	ldr	r3, [pc, #280]	@ (800117c <HAL_UART_MspInit+0x180>)
 8001062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001064:	4a45      	ldr	r2, [pc, #276]	@ (800117c <HAL_UART_MspInit+0x180>)
 8001066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800106a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106c:	4b43      	ldr	r3, [pc, #268]	@ (800117c <HAL_UART_MspInit+0x180>)
 800106e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001074:	61bb      	str	r3, [r7, #24]
 8001076:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001078:	f002 f986 	bl	8003388 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800107c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001080:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001096:	2308      	movs	r3, #8
 8001098:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800109c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80010a0:	4619      	mov	r1, r3
 80010a2:	4837      	ldr	r0, [pc, #220]	@ (8001180 <HAL_UART_MspInit+0x184>)
 80010a4:	f001 fdd0 	bl	8002c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80010a8:	e061      	b.n	800116e <HAL_UART_MspInit+0x172>
  else if(huart->Instance==UART5)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a35      	ldr	r2, [pc, #212]	@ (8001184 <HAL_UART_MspInit+0x188>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d15c      	bne.n	800116e <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80010b4:	2310      	movs	r3, #16
 80010b6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010bc:	f107 0320 	add.w	r3, r7, #32
 80010c0:	4618      	mov	r0, r3
 80010c2:	f003 f849 	bl	8004158 <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80010cc:	f7ff fe50 	bl	8000d70 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80010d0:	4b2a      	ldr	r3, [pc, #168]	@ (800117c <HAL_UART_MspInit+0x180>)
 80010d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d4:	4a29      	ldr	r2, [pc, #164]	@ (800117c <HAL_UART_MspInit+0x180>)
 80010d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80010da:	6593      	str	r3, [r2, #88]	@ 0x58
 80010dc:	4b27      	ldr	r3, [pc, #156]	@ (800117c <HAL_UART_MspInit+0x180>)
 80010de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e8:	4b24      	ldr	r3, [pc, #144]	@ (800117c <HAL_UART_MspInit+0x180>)
 80010ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ec:	4a23      	ldr	r2, [pc, #140]	@ (800117c <HAL_UART_MspInit+0x180>)
 80010ee:	f043 0304 	orr.w	r3, r3, #4
 80010f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f4:	4b21      	ldr	r3, [pc, #132]	@ (800117c <HAL_UART_MspInit+0x180>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001100:	4b1e      	ldr	r3, [pc, #120]	@ (800117c <HAL_UART_MspInit+0x180>)
 8001102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001104:	4a1d      	ldr	r2, [pc, #116]	@ (800117c <HAL_UART_MspInit+0x180>)
 8001106:	f043 0308 	orr.w	r3, r3, #8
 800110a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110c:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <HAL_UART_MspInit+0x180>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001132:	2308      	movs	r3, #8
 8001134:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001138:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800113c:	4619      	mov	r1, r3
 800113e:	4812      	ldr	r0, [pc, #72]	@ (8001188 <HAL_UART_MspInit+0x18c>)
 8001140:	f001 fd82 	bl	8002c48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001144:	2304      	movs	r3, #4
 8001146:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800115c:	2308      	movs	r3, #8
 800115e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001162:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001166:	4619      	mov	r1, r3
 8001168:	4808      	ldr	r0, [pc, #32]	@ (800118c <HAL_UART_MspInit+0x190>)
 800116a:	f001 fd6d 	bl	8002c48 <HAL_GPIO_Init>
}
 800116e:	bf00      	nop
 8001170:	37c8      	adds	r7, #200	@ 0xc8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40008000 	.word	0x40008000
 800117c:	40021000 	.word	0x40021000
 8001180:	48001800 	.word	0x48001800
 8001184:	40005000 	.word	0x40005000
 8001188:	48000800 	.word	0x48000800
 800118c:	48000c00 	.word	0x48000c00

08001190 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	@ 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a25      	ldr	r2, [pc, #148]	@ (8001244 <HAL_SPI_MspInit+0xb4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d144      	bne.n	800123c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011b2:	4b25      	ldr	r3, [pc, #148]	@ (8001248 <HAL_SPI_MspInit+0xb8>)
 80011b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b6:	4a24      	ldr	r2, [pc, #144]	@ (8001248 <HAL_SPI_MspInit+0xb8>)
 80011b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80011be:	4b22      	ldr	r3, [pc, #136]	@ (8001248 <HAL_SPI_MspInit+0xb8>)
 80011c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001248 <HAL_SPI_MspInit+0xb8>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001248 <HAL_SPI_MspInit+0xb8>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <HAL_SPI_MspInit+0xb8>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <HAL_SPI_MspInit+0xb8>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	4a18      	ldr	r2, [pc, #96]	@ (8001248 <HAL_SPI_MspInit+0xb8>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <HAL_SPI_MspInit+0xb8>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80011fa:	2350      	movs	r3, #80	@ 0x50
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800120a:	2305      	movs	r3, #5
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001218:	f001 fd16 	bl	8002c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800121c:	2328      	movs	r3, #40	@ 0x28
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800122c:	2305      	movs	r3, #5
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	4805      	ldr	r0, [pc, #20]	@ (800124c <HAL_SPI_MspInit+0xbc>)
 8001238:	f001 fd06 	bl	8002c48 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800123c:	bf00      	nop
 800123e:	3728      	adds	r7, #40	@ 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40013000 	.word	0x40013000
 8001248:	40021000 	.word	0x40021000
 800124c:	48000400 	.word	0x48000400

08001250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <HAL_TIM_Base_MspInit+0x44>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d113      	bne.n	800128a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001262:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <HAL_TIM_Base_MspInit+0x48>)
 8001264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001266:	4a0c      	ldr	r2, [pc, #48]	@ (8001298 <HAL_TIM_Base_MspInit+0x48>)
 8001268:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800126c:	6613      	str	r3, [r2, #96]	@ 0x60
 800126e:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <HAL_TIM_Base_MspInit+0x48>)
 8001270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	2019      	movs	r0, #25
 8001280:	f001 faf1 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001284:	2019      	movs	r0, #25
 8001286:	f001 fb0a 	bl	800289e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40014400 	.word	0x40014400
 8001298:	40021000 	.word	0x40021000

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <NMI_Handler+0x4>

080012a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <MemManage_Handler+0x4>

080012b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <BusFault_Handler+0x4>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <UsageFault_Handler+0x4>

080012c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f2:	f000 f8b1 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001300:	4802      	ldr	r0, [pc, #8]	@ (800130c <DMA1_Channel1_IRQHandler+0x10>)
 8001302:	f001 fb8f 	bl	8002a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20040090 	.word	0x20040090

08001310 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <ADC1_IRQHandler+0x10>)
 8001316:	f000 fbcb 	bl	8001ab0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20040028 	.word	0x20040028

08001324 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001328:	4802      	ldr	r0, [pc, #8]	@ (8001334 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800132a:	f003 fd27 	bl	8004d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200402d0 	.word	0x200402d0

08001338 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <SystemInit+0x20>)
 800133e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001342:	4a05      	ldr	r2, [pc, #20]	@ (8001358 <SystemInit+0x20>)
 8001344:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001348:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800135c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001394 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001360:	f7ff ffea 	bl	8001338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001364:	480c      	ldr	r0, [pc, #48]	@ (8001398 <LoopForever+0x6>)
  ldr r1, =_edata
 8001366:	490d      	ldr	r1, [pc, #52]	@ (800139c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001368:	4a0d      	ldr	r2, [pc, #52]	@ (80013a0 <LoopForever+0xe>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800137c:	4c0a      	ldr	r4, [pc, #40]	@ (80013a8 <LoopForever+0x16>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138a:	f004 fd6b 	bl	8005e64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800138e:	f7ff f8ad 	bl	80004ec <main>

08001392 <LoopForever>:

LoopForever:
    b LoopForever
 8001392:	e7fe      	b.n	8001392 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001394:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001398:	20040000 	.word	0x20040000
  ldr r1, =_edata
 800139c:	2004000c 	.word	0x2004000c
  ldr r2, =_sidata
 80013a0:	08005f44 	.word	0x08005f44
  ldr r2, =_sbss
 80013a4:	2004000c 	.word	0x2004000c
  ldr r4, =_ebss
 80013a8:	20040320 	.word	0x20040320

080013ac <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013ac:	e7fe      	b.n	80013ac <CAN1_RX0_IRQHandler>

080013ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b8:	2003      	movs	r0, #3
 80013ba:	f001 fa49 	bl	8002850 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013be:	2000      	movs	r0, #0
 80013c0:	f000 f80e 	bl	80013e0 <HAL_InitTick>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	71fb      	strb	r3, [r7, #7]
 80013ce:	e001      	b.n	80013d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013d0:	f7ff fcd4 	bl	8000d7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013d4:	79fb      	ldrb	r3, [r7, #7]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013ec:	4b17      	ldr	r3, [pc, #92]	@ (800144c <HAL_InitTick+0x6c>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d023      	beq.n	800143c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013f4:	4b16      	ldr	r3, [pc, #88]	@ (8001450 <HAL_InitTick+0x70>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b14      	ldr	r3, [pc, #80]	@ (800144c <HAL_InitTick+0x6c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001402:	fbb3 f3f1 	udiv	r3, r3, r1
 8001406:	fbb2 f3f3 	udiv	r3, r2, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f001 fa55 	bl	80028ba <HAL_SYSTICK_Config>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10f      	bne.n	8001436 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d809      	bhi.n	8001430 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f001 fa1f 	bl	8002866 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001428:	4a0a      	ldr	r2, [pc, #40]	@ (8001454 <HAL_InitTick+0x74>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e007      	b.n	8001440 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	73fb      	strb	r3, [r7, #15]
 8001434:	e004      	b.n	8001440 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	e001      	b.n	8001440 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20040008 	.word	0x20040008
 8001450:	20040000 	.word	0x20040000
 8001454:	20040004 	.word	0x20040004

08001458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_IncTick+0x20>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_IncTick+0x24>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a04      	ldr	r2, [pc, #16]	@ (800147c <HAL_IncTick+0x24>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20040008 	.word	0x20040008
 800147c:	2004031c 	.word	0x2004031c

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	2004031c 	.word	0x2004031c

08001498 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	609a      	str	r2, [r3, #8]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	609a      	str	r2, [r3, #8]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001500:	b480      	push	{r7}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3360      	adds	r3, #96	@ 0x60
 8001512:	461a      	mov	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <LL_ADC_SetOffset+0x44>)
 8001522:	4013      	ands	r3, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	4313      	orrs	r3, r2
 8001530:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001538:	bf00      	nop
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	03fff000 	.word	0x03fff000

08001548 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3360      	adds	r3, #96	@ 0x60
 8001556:	461a      	mov	r2, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3360      	adds	r3, #96	@ 0x60
 8001584:	461a      	mov	r2, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	431a      	orrs	r2, r3
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800159e:	bf00      	nop
 80015a0:	371c      	adds	r7, #28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	615a      	str	r2, [r3, #20]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b087      	sub	sp, #28
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3330      	adds	r3, #48	@ 0x30
 8001606:	461a      	mov	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	4413      	add	r3, r2
 8001614:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	211f      	movs	r1, #31
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	401a      	ands	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	0e9b      	lsrs	r3, r3, #26
 800162e:	f003 011f 	and.w	r1, r3, #31
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	f003 031f 	and.w	r3, r3, #31
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	431a      	orrs	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001642:	bf00      	nop
 8001644:	371c      	adds	r7, #28
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3314      	adds	r3, #20
 8001684:	461a      	mov	r2, r3
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	0e5b      	lsrs	r3, r3, #25
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	4413      	add	r3, r2
 8001692:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	0d1b      	lsrs	r3, r3, #20
 800169c:	f003 031f 	and.w	r3, r3, #31
 80016a0:	2107      	movs	r1, #7
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	401a      	ands	r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	0d1b      	lsrs	r3, r3, #20
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	431a      	orrs	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016be:	bf00      	nop
 80016c0:	371c      	adds	r7, #28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e4:	43db      	mvns	r3, r3
 80016e6:	401a      	ands	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0318 	and.w	r3, r3, #24
 80016ee:	4908      	ldr	r1, [pc, #32]	@ (8001710 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016f0:	40d9      	lsrs	r1, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	400b      	ands	r3, r1
 80016f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fa:	431a      	orrs	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	0007ffff 	.word	0x0007ffff

08001714 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001724:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6093      	str	r3, [r2, #8]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800174c:	d101      	bne.n	8001752 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001770:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001774:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001798:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800179c:	d101      	bne.n	80017a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <LL_ADC_IsEnabled+0x18>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <LL_ADC_IsEnabled+0x1a>
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d101      	bne.n	80017ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b08      	cmp	r3, #8
 800180e:	d101      	bne.n	8001814 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e129      	b.n	8001a92 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001848:	2b00      	cmp	r3, #0
 800184a:	d109      	bne.n	8001860 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff fab9 	bl	8000dc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff67 	bl	8001738 <LL_ADC_IsDeepPowerDownEnabled>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff4d 	bl	8001714 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff82 	bl	8001788 <LL_ADC_IsInternalRegulatorEnabled>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d115      	bne.n	80018b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff66 	bl	8001760 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001894:	4b81      	ldr	r3, [pc, #516]	@ (8001a9c <HAL_ADC_Init+0x278>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	099b      	lsrs	r3, r3, #6
 800189a:	4a81      	ldr	r2, [pc, #516]	@ (8001aa0 <HAL_ADC_Init+0x27c>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	099b      	lsrs	r3, r3, #6
 80018a2:	3301      	adds	r3, #1
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018a8:	e002      	b.n	80018b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f9      	bne.n	80018aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff64 	bl	8001788 <LL_ADC_IsInternalRegulatorEnabled>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10d      	bne.n	80018e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ca:	f043 0210 	orr.w	r2, r3, #16
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d6:	f043 0201 	orr.w	r2, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff75 	bl	80017d6 <LL_ADC_REG_IsConversionOngoing>
 80018ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f040 80c2 	bne.w	8001a80 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 80be 	bne.w	8001a80 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001908:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800190c:	f043 0202 	orr.w	r2, r3, #2
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff49 	bl	80017b0 <LL_ADC_IsEnabled>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10b      	bne.n	800193c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001924:	485f      	ldr	r0, [pc, #380]	@ (8001aa4 <HAL_ADC_Init+0x280>)
 8001926:	f7ff ff43 	bl	80017b0 <LL_ADC_IsEnabled>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d105      	bne.n	800193c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	4619      	mov	r1, r3
 8001936:	485c      	ldr	r0, [pc, #368]	@ (8001aa8 <HAL_ADC_Init+0x284>)
 8001938:	f7ff fdae 	bl	8001498 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7e5b      	ldrb	r3, [r3, #25]
 8001940:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001946:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800194c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001952:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800195a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d106      	bne.n	8001978 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196e:	3b01      	subs	r3, #1
 8001970:	045b      	lsls	r3, r3, #17
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197c:	2b00      	cmp	r3, #0
 800197e:	d009      	beq.n	8001994 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001984:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	4b44      	ldr	r3, [pc, #272]	@ (8001aac <HAL_ADC_Init+0x288>)
 800199c:	4013      	ands	r3, r2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	69b9      	ldr	r1, [r7, #24]
 80019a4:	430b      	orrs	r3, r1
 80019a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff25 	bl	80017fc <LL_ADC_INJ_IsConversionOngoing>
 80019b2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d140      	bne.n	8001a3c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d13d      	bne.n	8001a3c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7e1b      	ldrb	r3, [r3, #24]
 80019c8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019ca:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019d2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019e2:	f023 0306 	bic.w	r3, r3, #6
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	69b9      	ldr	r1, [r7, #24]
 80019ec:	430b      	orrs	r3, r1
 80019ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d118      	bne.n	8001a2c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a10:	4311      	orrs	r1, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a16:	4311      	orrs	r1, r2
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 0201 	orr.w	r2, r2, #1
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	e007      	b.n	8001a3c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0201 	bic.w	r2, r2, #1
 8001a3a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d10c      	bne.n	8001a5e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f023 010f 	bic.w	r1, r3, #15
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	1e5a      	subs	r2, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a5c:	e007      	b.n	8001a6e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 020f 	bic.w	r2, r2, #15
 8001a6c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a72:	f023 0303 	bic.w	r3, r3, #3
 8001a76:	f043 0201 	orr.w	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a7e:	e007      	b.n	8001a90 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a84:	f043 0210 	orr.w	r2, r3, #16
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a90:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3720      	adds	r7, #32
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20040000 	.word	0x20040000
 8001aa0:	053e2d63 	.word	0x053e2d63
 8001aa4:	50040000 	.word	0x50040000
 8001aa8:	50040300 	.word	0x50040300
 8001aac:	fff0c007 	.word	0xfff0c007

08001ab0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d017      	beq.n	8001b06 <HAL_ADC_IRQHandler+0x56>
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d012      	beq.n	8001b06 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d105      	bne.n	8001af8 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 fdcf 	bl	800269c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2202      	movs	r2, #2
 8001b04:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d004      	beq.n	8001b1a <HAL_ADC_IRQHandler+0x6a>
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d05e      	beq.n	8001be2 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d059      	beq.n	8001be2 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d105      	bne.n	8001b46 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fd40 	bl	80015d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d03e      	beq.n	8001bd4 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d135      	bne.n	8001bd4 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d12e      	bne.n	8001bd4 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fe2b 	bl	80017d6 <LL_ADC_REG_IsConversionOngoing>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d11a      	bne.n	8001bbc <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 020c 	bic.w	r2, r2, #12
 8001b94:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d112      	bne.n	8001bd4 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb2:	f043 0201 	orr.w	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bba:	e00b      	b.n	8001bd4 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc0:	f043 0210 	orr.w	r2, r3, #16
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bcc:	f043 0201 	orr.w	r2, r3, #1
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f91f 	bl	8001e18 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	220c      	movs	r2, #12
 8001be0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d004      	beq.n	8001bf6 <HAL_ADC_IRQHandler+0x146>
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f003 0320 	and.w	r3, r3, #32
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d072      	beq.n	8001ce6 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d06d      	beq.n	8001ce6 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d105      	bne.n	8001c22 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fd11 	bl	800164e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001c2c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fccc 	bl	80015d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c38:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d047      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d007      	beq.n	8001c62 <HAL_ADC_IRQHandler+0x1b2>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d03f      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d13a      	bne.n	8001cd8 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c6c:	2b40      	cmp	r3, #64	@ 0x40
 8001c6e:	d133      	bne.n	8001cd8 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d12e      	bne.n	8001cd8 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fdbc 	bl	80017fc <LL_ADC_INJ_IsConversionOngoing>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d11a      	bne.n	8001cc0 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c98:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d112      	bne.n	8001cd8 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cbe:	e00b      	b.n	8001cd8 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc4:	f043 0210 	orr.w	r2, r3, #16
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd0:	f043 0201 	orr.w	r2, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fcb7 	bl	800264c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2260      	movs	r2, #96	@ 0x60
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d011      	beq.n	8001d14 <HAL_ADC_IRQHandler+0x264>
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00c      	beq.n	8001d14 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f890 	bl	8001e2c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2280      	movs	r2, #128	@ 0x80
 8001d12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d012      	beq.n	8001d44 <HAL_ADC_IRQHandler+0x294>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00d      	beq.n	8001d44 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 fc9d 	bl	8002674 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d012      	beq.n	8001d74 <HAL_ADC_IRQHandler+0x2c4>
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00d      	beq.n	8001d74 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fc8f 	bl	8002688 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d02a      	beq.n	8001dd4 <HAL_ADC_IRQHandler+0x324>
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d025      	beq.n	8001dd4 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001d90:	2301      	movs	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	e008      	b.n	8001da8 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001da4:	2301      	movs	r3, #1
 8001da6:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d10e      	bne.n	8001dcc <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbe:	f043 0202 	orr.w	r2, r3, #2
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f83a 	bl	8001e40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d018      	beq.n	8001e10 <HAL_ADC_IRQHandler+0x360>
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d013      	beq.n	8001e10 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dec:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df8:	f043 0208 	orr.w	r2, r3, #8
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e08:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fc28 	bl	8002660 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001e10:	bf00      	nop
 8001e12:	3720      	adds	r7, #32
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b0b6      	sub	sp, #216	@ 0xd8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x22>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e3d5      	b.n	8002622 <HAL_ADC_ConfigChannel+0x7ce>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fca7 	bl	80017d6 <LL_ADC_REG_IsConversionOngoing>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 83ba 	bne.w	8002604 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	d824      	bhi.n	8001eea <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	3b02      	subs	r3, #2
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d81b      	bhi.n	8001ee2 <HAL_ADC_ConfigChannel+0x8e>
 8001eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb0 <HAL_ADC_ConfigChannel+0x5c>)
 8001eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb0:	08001ec1 	.word	0x08001ec1
 8001eb4:	08001ec9 	.word	0x08001ec9
 8001eb8:	08001ed1 	.word	0x08001ed1
 8001ebc:	08001ed9 	.word	0x08001ed9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001ec0:	230c      	movs	r3, #12
 8001ec2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ec6:	e010      	b.n	8001eea <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001ec8:	2312      	movs	r3, #18
 8001eca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ece:	e00c      	b.n	8001eea <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001ed0:	2318      	movs	r3, #24
 8001ed2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ed6:	e008      	b.n	8001eea <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001ed8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ee0:	e003      	b.n	8001eea <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001ee2:	2306      	movs	r3, #6
 8001ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001ee8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001ef8:	f7ff fb7d 	bl	80015f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fc68 	bl	80017d6 <LL_ADC_REG_IsConversionOngoing>
 8001f06:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fc74 	bl	80017fc <LL_ADC_INJ_IsConversionOngoing>
 8001f14:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f040 81bf 	bne.w	80022a0 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 81ba 	bne.w	80022a0 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f34:	d10f      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	4619      	mov	r1, r3
 8001f42:	f7ff fb97 	bl	8001674 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fb2b 	bl	80015aa <LL_ADC_SetSamplingTimeCommonConfig>
 8001f54:	e00e      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6819      	ldr	r1, [r3, #0]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	461a      	mov	r2, r3
 8001f64:	f7ff fb86 	bl	8001674 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fb1b 	bl	80015aa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	695a      	ldr	r2, [r3, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	08db      	lsrs	r3, r3, #3
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d00a      	beq.n	8001fac <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	6919      	ldr	r1, [r3, #16]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fa6:	f7ff faab 	bl	8001500 <LL_ADC_SetOffset>
 8001faa:	e179      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fac8 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10a      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x184>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fabd 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	0e9b      	lsrs	r3, r3, #26
 8001fd2:	f003 021f 	and.w	r2, r3, #31
 8001fd6:	e01e      	b.n	8002016 <HAL_ADC_ConfigChannel+0x1c2>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fab2 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ff6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ffa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ffe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002006:	2320      	movs	r3, #32
 8002008:	e004      	b.n	8002014 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800200a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201e:	2b00      	cmp	r3, #0
 8002020:	d105      	bne.n	800202e <HAL_ADC_ConfigChannel+0x1da>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	0e9b      	lsrs	r3, r3, #26
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	e018      	b.n	8002060 <HAL_ADC_ConfigChannel+0x20c>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002046:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800204a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002052:	2320      	movs	r3, #32
 8002054:	e004      	b.n	8002060 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002056:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002060:	429a      	cmp	r2, r3
 8002062:	d106      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2200      	movs	r2, #0
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fa81 	bl	8001574 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2101      	movs	r1, #1
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fa65 	bl	8001548 <LL_ADC_GetOffsetChannel>
 800207e:	4603      	mov	r3, r0
 8002080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10a      	bne.n	800209e <HAL_ADC_ConfigChannel+0x24a>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2101      	movs	r1, #1
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fa5a 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8002094:	4603      	mov	r3, r0
 8002096:	0e9b      	lsrs	r3, r3, #26
 8002098:	f003 021f 	and.w	r2, r3, #31
 800209c:	e01e      	b.n	80020dc <HAL_ADC_ConfigChannel+0x288>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2101      	movs	r1, #1
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fa4f 	bl	8001548 <LL_ADC_GetOffsetChannel>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80020bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80020c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80020cc:	2320      	movs	r3, #32
 80020ce:	e004      	b.n	80020da <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80020d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020d4:	fab3 f383 	clz	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d105      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x2a0>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	0e9b      	lsrs	r3, r3, #26
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	e018      	b.n	8002126 <HAL_ADC_ConfigChannel+0x2d2>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002108:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800210c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002110:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002118:	2320      	movs	r3, #32
 800211a:	e004      	b.n	8002126 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800211c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002120:	fab3 f383 	clz	r3, r3
 8002124:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002126:	429a      	cmp	r2, r3
 8002128:	d106      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2200      	movs	r2, #0
 8002130:	2101      	movs	r1, #1
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fa1e 	bl	8001574 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2102      	movs	r1, #2
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fa02 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8002144:	4603      	mov	r3, r0
 8002146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10a      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x310>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2102      	movs	r1, #2
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff f9f7 	bl	8001548 <LL_ADC_GetOffsetChannel>
 800215a:	4603      	mov	r3, r0
 800215c:	0e9b      	lsrs	r3, r3, #26
 800215e:	f003 021f 	and.w	r2, r3, #31
 8002162:	e01e      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x34e>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2102      	movs	r1, #2
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff f9ec 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8002170:	4603      	mov	r3, r0
 8002172:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002182:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002186:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800218a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002192:	2320      	movs	r3, #32
 8002194:	e004      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002196:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d105      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x366>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	0e9b      	lsrs	r3, r3, #26
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	e014      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x390>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80021c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80021ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80021d6:	2320      	movs	r3, #32
 80021d8:	e004      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80021da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d106      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2200      	movs	r2, #0
 80021ee:	2102      	movs	r1, #2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff f9bf 	bl	8001574 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2103      	movs	r1, #3
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff f9a3 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8002202:	4603      	mov	r3, r0
 8002204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10a      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x3ce>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2103      	movs	r1, #3
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff f998 	bl	8001548 <LL_ADC_GetOffsetChannel>
 8002218:	4603      	mov	r3, r0
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	f003 021f 	and.w	r2, r3, #31
 8002220:	e017      	b.n	8002252 <HAL_ADC_ConfigChannel+0x3fe>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2103      	movs	r1, #3
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff f98d 	bl	8001548 <LL_ADC_GetOffsetChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002232:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800223a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800223c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800223e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002244:	2320      	movs	r3, #32
 8002246:	e003      	b.n	8002250 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002248:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225a:	2b00      	cmp	r3, #0
 800225c:	d105      	bne.n	800226a <HAL_ADC_ConfigChannel+0x416>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	0e9b      	lsrs	r3, r3, #26
 8002264:	f003 031f 	and.w	r3, r3, #31
 8002268:	e011      	b.n	800228e <HAL_ADC_ConfigChannel+0x43a>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002278:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800227a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800227c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002282:	2320      	movs	r3, #32
 8002284:	e003      	b.n	800228e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002286:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002288:	fab3 f383 	clz	r3, r3
 800228c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800228e:	429a      	cmp	r2, r3
 8002290:	d106      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2200      	movs	r2, #0
 8002298:	2103      	movs	r1, #3
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff f96a 	bl	8001574 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fa83 	bl	80017b0 <LL_ADC_IsEnabled>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f040 813f 	bne.w	8002530 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6819      	ldr	r1, [r3, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	461a      	mov	r2, r3
 80022c0:	f7ff fa04 	bl	80016cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a8e      	ldr	r2, [pc, #568]	@ (8002504 <HAL_ADC_ConfigChannel+0x6b0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	f040 8130 	bne.w	8002530 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10b      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x4a4>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0e9b      	lsrs	r3, r3, #26
 80022e6:	3301      	adds	r3, #1
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	2b09      	cmp	r3, #9
 80022ee:	bf94      	ite	ls
 80022f0:	2301      	movls	r3, #1
 80022f2:	2300      	movhi	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	e019      	b.n	800232c <HAL_ADC_ConfigChannel+0x4d8>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002308:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800230a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002310:	2320      	movs	r3, #32
 8002312:	e003      	b.n	800231c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002314:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	3301      	adds	r3, #1
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	2b09      	cmp	r3, #9
 8002324:	bf94      	ite	ls
 8002326:	2301      	movls	r3, #1
 8002328:	2300      	movhi	r3, #0
 800232a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800232c:	2b00      	cmp	r3, #0
 800232e:	d079      	beq.n	8002424 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002338:	2b00      	cmp	r3, #0
 800233a:	d107      	bne.n	800234c <HAL_ADC_ConfigChannel+0x4f8>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0e9b      	lsrs	r3, r3, #26
 8002342:	3301      	adds	r3, #1
 8002344:	069b      	lsls	r3, r3, #26
 8002346:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800234a:	e015      	b.n	8002378 <HAL_ADC_ConfigChannel+0x524>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800235a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800235c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800235e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e003      	b.n	8002370 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002368:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	069b      	lsls	r3, r3, #26
 8002374:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x544>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0e9b      	lsrs	r3, r3, #26
 800238a:	3301      	adds	r3, #1
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2101      	movs	r1, #1
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	e017      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x574>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80023a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023a8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80023aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80023b0:	2320      	movs	r3, #32
 80023b2:	e003      	b.n	80023bc <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80023b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	ea42 0103 	orr.w	r1, r2, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10a      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x59a>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	3301      	adds	r3, #1
 80023e0:	f003 021f 	and.w	r2, r3, #31
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	051b      	lsls	r3, r3, #20
 80023ec:	e018      	b.n	8002420 <HAL_ADC_ConfigChannel+0x5cc>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80023fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002406:	2320      	movs	r3, #32
 8002408:	e003      	b.n	8002412 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800240a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800240c:	fab3 f383 	clz	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	3301      	adds	r3, #1
 8002414:	f003 021f 	and.w	r2, r3, #31
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002420:	430b      	orrs	r3, r1
 8002422:	e080      	b.n	8002526 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242c:	2b00      	cmp	r3, #0
 800242e:	d107      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x5ec>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	0e9b      	lsrs	r3, r3, #26
 8002436:	3301      	adds	r3, #1
 8002438:	069b      	lsls	r3, r3, #26
 800243a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800243e:	e015      	b.n	800246c <HAL_ADC_ConfigChannel+0x618>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002458:	2320      	movs	r3, #32
 800245a:	e003      	b.n	8002464 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800245c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	3301      	adds	r3, #1
 8002466:	069b      	lsls	r3, r3, #26
 8002468:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002474:	2b00      	cmp	r3, #0
 8002476:	d109      	bne.n	800248c <HAL_ADC_ConfigChannel+0x638>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	0e9b      	lsrs	r3, r3, #26
 800247e:	3301      	adds	r3, #1
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	2101      	movs	r1, #1
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	e017      	b.n	80024bc <HAL_ADC_ConfigChannel+0x668>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	61bb      	str	r3, [r7, #24]
  return result;
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80024a4:	2320      	movs	r3, #32
 80024a6:	e003      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	fab3 f383 	clz	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	3301      	adds	r3, #1
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	2101      	movs	r1, #1
 80024b8:	fa01 f303 	lsl.w	r3, r1, r3
 80024bc:	ea42 0103 	orr.w	r1, r2, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10d      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x694>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0e9b      	lsrs	r3, r3, #26
 80024d2:	3301      	adds	r3, #1
 80024d4:	f003 021f 	and.w	r2, r3, #31
 80024d8:	4613      	mov	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4413      	add	r3, r2
 80024de:	3b1e      	subs	r3, #30
 80024e0:	051b      	lsls	r3, r3, #20
 80024e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024e6:	e01d      	b.n	8002524 <HAL_ADC_ConfigChannel+0x6d0>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	60fb      	str	r3, [r7, #12]
  return result;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d103      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002500:	2320      	movs	r3, #32
 8002502:	e005      	b.n	8002510 <HAL_ADC_ConfigChannel+0x6bc>
 8002504:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	3301      	adds	r3, #1
 8002512:	f003 021f 	and.w	r2, r3, #31
 8002516:	4613      	mov	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4413      	add	r3, r2
 800251c:	3b1e      	subs	r3, #30
 800251e:	051b      	lsls	r3, r3, #20
 8002520:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002524:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800252a:	4619      	mov	r1, r3
 800252c:	f7ff f8a2 	bl	8001674 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b3d      	ldr	r3, [pc, #244]	@ (800262c <HAL_ADC_ConfigChannel+0x7d8>)
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d06c      	beq.n	8002616 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800253c:	483c      	ldr	r0, [pc, #240]	@ (8002630 <HAL_ADC_ConfigChannel+0x7dc>)
 800253e:	f7fe ffd1 	bl	80014e4 <LL_ADC_GetCommonPathInternalCh>
 8002542:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a3a      	ldr	r2, [pc, #232]	@ (8002634 <HAL_ADC_ConfigChannel+0x7e0>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d127      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002550:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002554:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d121      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a35      	ldr	r2, [pc, #212]	@ (8002638 <HAL_ADC_ConfigChannel+0x7e4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d157      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002566:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800256a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800256e:	4619      	mov	r1, r3
 8002570:	482f      	ldr	r0, [pc, #188]	@ (8002630 <HAL_ADC_ConfigChannel+0x7dc>)
 8002572:	f7fe ffa4 	bl	80014be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002576:	4b31      	ldr	r3, [pc, #196]	@ (800263c <HAL_ADC_ConfigChannel+0x7e8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	4a30      	ldr	r2, [pc, #192]	@ (8002640 <HAL_ADC_ConfigChannel+0x7ec>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	099b      	lsrs	r3, r3, #6
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002590:	e002      	b.n	8002598 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	3b01      	subs	r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f9      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800259e:	e03a      	b.n	8002616 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a27      	ldr	r2, [pc, #156]	@ (8002644 <HAL_ADC_ConfigChannel+0x7f0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d113      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10d      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002638 <HAL_ADC_ConfigChannel+0x7e4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d12a      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025c8:	4619      	mov	r1, r3
 80025ca:	4819      	ldr	r0, [pc, #100]	@ (8002630 <HAL_ADC_ConfigChannel+0x7dc>)
 80025cc:	f7fe ff77 	bl	80014be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025d0:	e021      	b.n	8002616 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002648 <HAL_ADC_ConfigChannel+0x7f4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d11c      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d116      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a12      	ldr	r2, [pc, #72]	@ (8002638 <HAL_ADC_ConfigChannel+0x7e4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d111      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025fa:	4619      	mov	r1, r3
 80025fc:	480c      	ldr	r0, [pc, #48]	@ (8002630 <HAL_ADC_ConfigChannel+0x7dc>)
 80025fe:	f7fe ff5e 	bl	80014be <LL_ADC_SetCommonPathInternalCh>
 8002602:	e008      	b.n	8002616 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002608:	f043 0220 	orr.w	r2, r3, #32
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800261e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002622:	4618      	mov	r0, r3
 8002624:	37d8      	adds	r7, #216	@ 0xd8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	80080000 	.word	0x80080000
 8002630:	50040300 	.word	0x50040300
 8002634:	c7520000 	.word	0xc7520000
 8002638:	50040000 	.word	0x50040000
 800263c:	20040000 	.word	0x20040000
 8002640:	053e2d63 	.word	0x053e2d63
 8002644:	cb840000 	.word	0xcb840000
 8002648:	80000001 	.word	0x80000001

0800264c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c0:	4b0c      	ldr	r3, [pc, #48]	@ (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026cc:	4013      	ands	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e2:	4a04      	ldr	r2, [pc, #16]	@ (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	60d3      	str	r3, [r2, #12]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026fc:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <__NVIC_GetPriorityGrouping+0x18>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	0a1b      	lsrs	r3, r3, #8
 8002702:	f003 0307 	and.w	r3, r3, #7
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	2b00      	cmp	r3, #0
 8002724:	db0b      	blt.n	800273e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	f003 021f 	and.w	r2, r3, #31
 800272c:	4907      	ldr	r1, [pc, #28]	@ (800274c <__NVIC_EnableIRQ+0x38>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2001      	movs	r0, #1
 8002736:	fa00 f202 	lsl.w	r2, r0, r2
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000e100 	.word	0xe000e100

08002750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	db0a      	blt.n	800277a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	490c      	ldr	r1, [pc, #48]	@ (800279c <__NVIC_SetPriority+0x4c>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	440b      	add	r3, r1
 8002774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002778:	e00a      	b.n	8002790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4908      	ldr	r1, [pc, #32]	@ (80027a0 <__NVIC_SetPriority+0x50>)
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3b04      	subs	r3, #4
 8002788:	0112      	lsls	r2, r2, #4
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	440b      	add	r3, r1
 800278e:	761a      	strb	r2, [r3, #24]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000e100 	.word	0xe000e100
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	@ 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f1c3 0307 	rsb	r3, r3, #7
 80027be:	2b04      	cmp	r3, #4
 80027c0:	bf28      	it	cs
 80027c2:	2304      	movcs	r3, #4
 80027c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d902      	bls.n	80027d4 <NVIC_EncodePriority+0x30>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3b03      	subs	r3, #3
 80027d2:	e000      	b.n	80027d6 <NVIC_EncodePriority+0x32>
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	f04f 32ff 	mov.w	r2, #4294967295
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	401a      	ands	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ec:	f04f 31ff 	mov.w	r1, #4294967295
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43d9      	mvns	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	4313      	orrs	r3, r2
         );
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3724      	adds	r7, #36	@ 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800281c:	d301      	bcc.n	8002822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800281e:	2301      	movs	r3, #1
 8002820:	e00f      	b.n	8002842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002822:	4a0a      	ldr	r2, [pc, #40]	@ (800284c <SysTick_Config+0x40>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800282a:	210f      	movs	r1, #15
 800282c:	f04f 30ff 	mov.w	r0, #4294967295
 8002830:	f7ff ff8e 	bl	8002750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002834:	4b05      	ldr	r3, [pc, #20]	@ (800284c <SysTick_Config+0x40>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800283a:	4b04      	ldr	r3, [pc, #16]	@ (800284c <SysTick_Config+0x40>)
 800283c:	2207      	movs	r2, #7
 800283e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	e000e010 	.word	0xe000e010

08002850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ff29 	bl	80026b0 <__NVIC_SetPriorityGrouping>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	4603      	mov	r3, r0
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002878:	f7ff ff3e 	bl	80026f8 <__NVIC_GetPriorityGrouping>
 800287c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	6978      	ldr	r0, [r7, #20]
 8002884:	f7ff ff8e 	bl	80027a4 <NVIC_EncodePriority>
 8002888:	4602      	mov	r2, r0
 800288a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ff5d 	bl	8002750 <__NVIC_SetPriority>
}
 8002896:	bf00      	nop
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff31 	bl	8002714 <__NVIC_EnableIRQ>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff ffa2 	bl	800280c <SysTick_Config>
 80028c8:	4603      	mov	r3, r0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e08d      	b.n	8002a02 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	4b47      	ldr	r3, [pc, #284]	@ (8002a0c <HAL_DMA_Init+0x138>)
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d80f      	bhi.n	8002912 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	4b45      	ldr	r3, [pc, #276]	@ (8002a10 <HAL_DMA_Init+0x13c>)
 80028fa:	4413      	add	r3, r2
 80028fc:	4a45      	ldr	r2, [pc, #276]	@ (8002a14 <HAL_DMA_Init+0x140>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	091b      	lsrs	r3, r3, #4
 8002904:	009a      	lsls	r2, r3, #2
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a42      	ldr	r2, [pc, #264]	@ (8002a18 <HAL_DMA_Init+0x144>)
 800290e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002910:	e00e      	b.n	8002930 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	4b40      	ldr	r3, [pc, #256]	@ (8002a1c <HAL_DMA_Init+0x148>)
 800291a:	4413      	add	r3, r2
 800291c:	4a3d      	ldr	r2, [pc, #244]	@ (8002a14 <HAL_DMA_Init+0x140>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	009a      	lsls	r2, r3, #2
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a20 <HAL_DMA_Init+0x14c>)
 800292e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800294a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002954:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002960:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f8fe 	bl	8002b84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002990:	d102      	bne.n	8002998 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029ac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d010      	beq.n	80029d8 <HAL_DMA_Init+0x104>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d80c      	bhi.n	80029d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f91e 	bl	8002c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	e008      	b.n	80029ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40020407 	.word	0x40020407
 8002a10:	bffdfff8 	.word	0xbffdfff8
 8002a14:	cccccccd 	.word	0xcccccccd
 8002a18:	40020000 	.word	0x40020000
 8002a1c:	bffdfbf8 	.word	0xbffdfbf8
 8002a20:	40020400 	.word	0x40020400

08002a24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a40:	f003 031c 	and.w	r3, r3, #28
 8002a44:	2204      	movs	r2, #4
 8002a46:	409a      	lsls	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d026      	beq.n	8002a9e <HAL_DMA_IRQHandler+0x7a>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d021      	beq.n	8002a9e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d107      	bne.n	8002a78 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0204 	bic.w	r2, r2, #4
 8002a76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7c:	f003 021c 	and.w	r2, r3, #28
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	2104      	movs	r1, #4
 8002a86:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d071      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a9c:	e06c      	b.n	8002b78 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa2:	f003 031c 	and.w	r3, r3, #28
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d02e      	beq.n	8002b10 <HAL_DMA_IRQHandler+0xec>
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d029      	beq.n	8002b10 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10b      	bne.n	8002ae2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 020a 	bic.w	r2, r2, #10
 8002ad8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae6:	f003 021c 	and.w	r2, r3, #28
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	2102      	movs	r1, #2
 8002af0:	fa01 f202 	lsl.w	r2, r1, r2
 8002af4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d038      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002b0e:	e033      	b.n	8002b78 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b14:	f003 031c 	and.w	r3, r3, #28
 8002b18:	2208      	movs	r2, #8
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d02a      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x156>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d025      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 020e 	bic.w	r2, r2, #14
 8002b3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b42:	f003 021c 	and.w	r2, r3, #28
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d004      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
}
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	4b17      	ldr	r3, [pc, #92]	@ (8002bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d80a      	bhi.n	8002bae <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ba4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6493      	str	r3, [r2, #72]	@ 0x48
 8002bac:	e007      	b.n	8002bbe <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb2:	089b      	lsrs	r3, r3, #2
 8002bb4:	009a      	lsls	r2, r3, #2
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002bb8:	4413      	add	r3, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	3b08      	subs	r3, #8
 8002bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002bd4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	2201      	movs	r2, #1
 8002bde:	409a      	lsls	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	40020407 	.word	0x40020407
 8002bf4:	4002081c 	.word	0x4002081c
 8002bf8:	cccccccd 	.word	0xcccccccd
 8002bfc:	40020880 	.word	0x40020880

08002c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a08      	ldr	r2, [pc, #32]	@ (8002c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c22:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	1000823f 	.word	0x1000823f
 8002c44:	40020940 	.word	0x40020940

08002c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c56:	e166      	b.n	8002f26 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	4013      	ands	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 8158 	beq.w	8002f20 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d005      	beq.n	8002c88 <HAL_GPIO_Init+0x40>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d130      	bne.n	8002cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	2203      	movs	r2, #3
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	f003 0201 	and.w	r2, r3, #1
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d017      	beq.n	8002d26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	2203      	movs	r2, #3
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d123      	bne.n	8002d7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	08da      	lsrs	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3208      	adds	r2, #8
 8002d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	220f      	movs	r2, #15
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4013      	ands	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	08da      	lsrs	r2, r3, #3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3208      	adds	r2, #8
 8002d74:	6939      	ldr	r1, [r7, #16]
 8002d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	2203      	movs	r2, #3
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 0203 	and.w	r2, r3, #3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80b2 	beq.w	8002f20 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dbc:	4b61      	ldr	r3, [pc, #388]	@ (8002f44 <HAL_GPIO_Init+0x2fc>)
 8002dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dc0:	4a60      	ldr	r2, [pc, #384]	@ (8002f44 <HAL_GPIO_Init+0x2fc>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dc8:	4b5e      	ldr	r3, [pc, #376]	@ (8002f44 <HAL_GPIO_Init+0x2fc>)
 8002dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dd4:	4a5c      	ldr	r2, [pc, #368]	@ (8002f48 <HAL_GPIO_Init+0x300>)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	089b      	lsrs	r3, r3, #2
 8002dda:	3302      	adds	r3, #2
 8002ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	220f      	movs	r2, #15
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002dfe:	d02b      	beq.n	8002e58 <HAL_GPIO_Init+0x210>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a52      	ldr	r2, [pc, #328]	@ (8002f4c <HAL_GPIO_Init+0x304>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d025      	beq.n	8002e54 <HAL_GPIO_Init+0x20c>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a51      	ldr	r2, [pc, #324]	@ (8002f50 <HAL_GPIO_Init+0x308>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d01f      	beq.n	8002e50 <HAL_GPIO_Init+0x208>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a50      	ldr	r2, [pc, #320]	@ (8002f54 <HAL_GPIO_Init+0x30c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d019      	beq.n	8002e4c <HAL_GPIO_Init+0x204>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a4f      	ldr	r2, [pc, #316]	@ (8002f58 <HAL_GPIO_Init+0x310>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d013      	beq.n	8002e48 <HAL_GPIO_Init+0x200>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a4e      	ldr	r2, [pc, #312]	@ (8002f5c <HAL_GPIO_Init+0x314>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00d      	beq.n	8002e44 <HAL_GPIO_Init+0x1fc>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a4d      	ldr	r2, [pc, #308]	@ (8002f60 <HAL_GPIO_Init+0x318>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d007      	beq.n	8002e40 <HAL_GPIO_Init+0x1f8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a4c      	ldr	r2, [pc, #304]	@ (8002f64 <HAL_GPIO_Init+0x31c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d101      	bne.n	8002e3c <HAL_GPIO_Init+0x1f4>
 8002e38:	2307      	movs	r3, #7
 8002e3a:	e00e      	b.n	8002e5a <HAL_GPIO_Init+0x212>
 8002e3c:	2308      	movs	r3, #8
 8002e3e:	e00c      	b.n	8002e5a <HAL_GPIO_Init+0x212>
 8002e40:	2306      	movs	r3, #6
 8002e42:	e00a      	b.n	8002e5a <HAL_GPIO_Init+0x212>
 8002e44:	2305      	movs	r3, #5
 8002e46:	e008      	b.n	8002e5a <HAL_GPIO_Init+0x212>
 8002e48:	2304      	movs	r3, #4
 8002e4a:	e006      	b.n	8002e5a <HAL_GPIO_Init+0x212>
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e004      	b.n	8002e5a <HAL_GPIO_Init+0x212>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e002      	b.n	8002e5a <HAL_GPIO_Init+0x212>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <HAL_GPIO_Init+0x212>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	f002 0203 	and.w	r2, r2, #3
 8002e60:	0092      	lsls	r2, r2, #2
 8002e62:	4093      	lsls	r3, r2
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e6a:	4937      	ldr	r1, [pc, #220]	@ (8002f48 <HAL_GPIO_Init+0x300>)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	089b      	lsrs	r3, r3, #2
 8002e70:	3302      	adds	r3, #2
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e78:	4b3b      	ldr	r3, [pc, #236]	@ (8002f68 <HAL_GPIO_Init+0x320>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4013      	ands	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e9c:	4a32      	ldr	r2, [pc, #200]	@ (8002f68 <HAL_GPIO_Init+0x320>)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ea2:	4b31      	ldr	r3, [pc, #196]	@ (8002f68 <HAL_GPIO_Init+0x320>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ec6:	4a28      	ldr	r2, [pc, #160]	@ (8002f68 <HAL_GPIO_Init+0x320>)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ecc:	4b26      	ldr	r3, [pc, #152]	@ (8002f68 <HAL_GPIO_Init+0x320>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f68 <HAL_GPIO_Init+0x320>)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f68 <HAL_GPIO_Init+0x320>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	43db      	mvns	r3, r3
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4013      	ands	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f1a:	4a13      	ldr	r2, [pc, #76]	@ (8002f68 <HAL_GPIO_Init+0x320>)
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	3301      	adds	r3, #1
 8002f24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f47f ae91 	bne.w	8002c58 <HAL_GPIO_Init+0x10>
  }
}
 8002f36:	bf00      	nop
 8002f38:	bf00      	nop
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	48000400 	.word	0x48000400
 8002f50:	48000800 	.word	0x48000800
 8002f54:	48000c00 	.word	0x48000c00
 8002f58:	48001000 	.word	0x48001000
 8002f5c:	48001400 	.word	0x48001400
 8002f60:	48001800 	.word	0x48001800
 8002f64:	48001c00 	.word	0x48001c00
 8002f68:	40010400 	.word	0x40010400

08002f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	807b      	strh	r3, [r7, #2]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f7c:	787b      	ldrb	r3, [r7, #1]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f82:	887a      	ldrh	r2, [r7, #2]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f88:	e002      	b.n	8002f90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f8a:	887a      	ldrh	r2, [r7, #2]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e08d      	b.n	80030ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd ffbc 	bl	8000f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2224      	movs	r2, #36	@ 0x24
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ffc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d107      	bne.n	8003016 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	e006      	b.n	8003024 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003022:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d108      	bne.n	800303e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800303a:	605a      	str	r2, [r3, #4]
 800303c:	e007      	b.n	800304e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800304c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800305c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003060:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003070:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69d9      	ldr	r1, [r3, #28]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1a      	ldr	r2, [r3, #32]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d138      	bne.n	800315a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e032      	b.n	800315c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2224      	movs	r2, #36	@ 0x24
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0201 	bic.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003124:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6819      	ldr	r1, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	e000      	b.n	800315c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800315a:	2302      	movs	r3, #2
  }
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b20      	cmp	r3, #32
 800317c:	d139      	bne.n	80031f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003188:	2302      	movs	r3, #2
 800318a:	e033      	b.n	80031f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2224      	movs	r2, #36	@ 0x24
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0201 	bic.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0201 	orr.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e000      	b.n	80031f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
  }
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003204:	4b0d      	ldr	r3, [pc, #52]	@ (800323c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800320c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003210:	d102      	bne.n	8003218 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003216:	e00b      	b.n	8003230 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003218:	4b08      	ldr	r3, [pc, #32]	@ (800323c <HAL_PWREx_GetVoltageRange+0x3c>)
 800321a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800321e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003226:	d102      	bne.n	800322e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003228:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800322c:	e000      	b.n	8003230 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800322e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40007000 	.word	0x40007000

08003240 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d141      	bne.n	80032d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800324e:	4b4b      	ldr	r3, [pc, #300]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325a:	d131      	bne.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800325c:	4b47      	ldr	r3, [pc, #284]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003262:	4a46      	ldr	r2, [pc, #280]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003268:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800326c:	4b43      	ldr	r3, [pc, #268]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003274:	4a41      	ldr	r2, [pc, #260]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800327a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800327c:	4b40      	ldr	r3, [pc, #256]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2232      	movs	r2, #50	@ 0x32
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	4a3f      	ldr	r2, [pc, #252]	@ (8003384 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003288:	fba2 2303 	umull	r2, r3, r2, r3
 800328c:	0c9b      	lsrs	r3, r3, #18
 800328e:	3301      	adds	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003292:	e002      	b.n	800329a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3b01      	subs	r3, #1
 8003298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800329a:	4b38      	ldr	r3, [pc, #224]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a6:	d102      	bne.n	80032ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f2      	bne.n	8003294 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ae:	4b33      	ldr	r3, [pc, #204]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ba:	d158      	bne.n	800336e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e057      	b.n	8003370 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032c0:	4b2e      	ldr	r3, [pc, #184]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032c6:	4a2d      	ldr	r2, [pc, #180]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80032d0:	e04d      	b.n	800336e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032d8:	d141      	bne.n	800335e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032da:	4b28      	ldr	r3, [pc, #160]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032e6:	d131      	bne.n	800334c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032e8:	4b24      	ldr	r3, [pc, #144]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032ee:	4a23      	ldr	r2, [pc, #140]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032f8:	4b20      	ldr	r3, [pc, #128]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003300:	4a1e      	ldr	r2, [pc, #120]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003302:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003306:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003308:	4b1d      	ldr	r3, [pc, #116]	@ (8003380 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2232      	movs	r2, #50	@ 0x32
 800330e:	fb02 f303 	mul.w	r3, r2, r3
 8003312:	4a1c      	ldr	r2, [pc, #112]	@ (8003384 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003314:	fba2 2303 	umull	r2, r3, r2, r3
 8003318:	0c9b      	lsrs	r3, r3, #18
 800331a:	3301      	adds	r3, #1
 800331c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800331e:	e002      	b.n	8003326 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3b01      	subs	r3, #1
 8003324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003326:	4b15      	ldr	r3, [pc, #84]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800332e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003332:	d102      	bne.n	800333a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f2      	bne.n	8003320 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800333a:	4b10      	ldr	r3, [pc, #64]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003346:	d112      	bne.n	800336e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e011      	b.n	8003370 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800334c:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003352:	4a0a      	ldr	r2, [pc, #40]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003358:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800335c:	e007      	b.n	800336e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800335e:	4b07      	ldr	r3, [pc, #28]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003366:	4a05      	ldr	r2, [pc, #20]	@ (800337c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003368:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800336c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	40007000 	.word	0x40007000
 8003380:	20040000 	.word	0x20040000
 8003384:	431bde83 	.word	0x431bde83

08003388 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800338c:	4b05      	ldr	r3, [pc, #20]	@ (80033a4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4a04      	ldr	r2, [pc, #16]	@ (80033a4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003392:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003396:	6053      	str	r3, [r2, #4]
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40007000 	.word	0x40007000

080033a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	f000 bc08 	b.w	8003bcc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033bc:	4b96      	ldr	r3, [pc, #600]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 030c 	and.w	r3, r3, #12
 80033c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033c6:	4b94      	ldr	r3, [pc, #592]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80e4 	beq.w	80035a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <HAL_RCC_OscConfig+0x4c>
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b0c      	cmp	r3, #12
 80033e8:	f040 808b 	bne.w	8003502 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	f040 8087 	bne.w	8003502 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033f4:	4b88      	ldr	r3, [pc, #544]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_RCC_OscConfig+0x64>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e3df      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1a      	ldr	r2, [r3, #32]
 8003410:	4b81      	ldr	r3, [pc, #516]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d004      	beq.n	8003426 <HAL_RCC_OscConfig+0x7e>
 800341c:	4b7e      	ldr	r3, [pc, #504]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003424:	e005      	b.n	8003432 <HAL_RCC_OscConfig+0x8a>
 8003426:	4b7c      	ldr	r3, [pc, #496]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003432:	4293      	cmp	r3, r2
 8003434:	d223      	bcs.n	800347e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fdcc 	bl	8003fd8 <RCC_SetFlashLatencyFromMSIRange>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e3c0      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800344a:	4b73      	ldr	r3, [pc, #460]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a72      	ldr	r2, [pc, #456]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003450:	f043 0308 	orr.w	r3, r3, #8
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	4b70      	ldr	r3, [pc, #448]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	496d      	ldr	r1, [pc, #436]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003464:	4313      	orrs	r3, r2
 8003466:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003468:	4b6b      	ldr	r3, [pc, #428]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	4968      	ldr	r1, [pc, #416]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003478:	4313      	orrs	r3, r2
 800347a:	604b      	str	r3, [r1, #4]
 800347c:	e025      	b.n	80034ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800347e:	4b66      	ldr	r3, [pc, #408]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a65      	ldr	r2, [pc, #404]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003484:	f043 0308 	orr.w	r3, r3, #8
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	4b63      	ldr	r3, [pc, #396]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4960      	ldr	r1, [pc, #384]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003498:	4313      	orrs	r3, r2
 800349a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800349c:	4b5e      	ldr	r3, [pc, #376]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	495b      	ldr	r1, [pc, #364]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fd8c 	bl	8003fd8 <RCC_SetFlashLatencyFromMSIRange>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e380      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034ca:	f000 fcc1 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 80034ce:	4602      	mov	r2, r0
 80034d0:	4b51      	ldr	r3, [pc, #324]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	4950      	ldr	r1, [pc, #320]	@ (800361c <HAL_RCC_OscConfig+0x274>)
 80034dc:	5ccb      	ldrb	r3, [r1, r3]
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	fa22 f303 	lsr.w	r3, r2, r3
 80034e6:	4a4e      	ldr	r2, [pc, #312]	@ (8003620 <HAL_RCC_OscConfig+0x278>)
 80034e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034ea:	4b4e      	ldr	r3, [pc, #312]	@ (8003624 <HAL_RCC_OscConfig+0x27c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd ff76 	bl	80013e0 <HAL_InitTick>
 80034f4:	4603      	mov	r3, r0
 80034f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d052      	beq.n	80035a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	e364      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d032      	beq.n	8003570 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800350a:	4b43      	ldr	r3, [pc, #268]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a42      	ldr	r2, [pc, #264]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003516:	f7fd ffb3 	bl	8001480 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800351e:	f7fd ffaf 	bl	8001480 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e34d      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003530:	4b39      	ldr	r3, [pc, #228]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f0      	beq.n	800351e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800353c:	4b36      	ldr	r3, [pc, #216]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a35      	ldr	r2, [pc, #212]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003542:	f043 0308 	orr.w	r3, r3, #8
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	4b33      	ldr	r3, [pc, #204]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4930      	ldr	r1, [pc, #192]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003556:	4313      	orrs	r3, r2
 8003558:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800355a:	4b2f      	ldr	r3, [pc, #188]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	492b      	ldr	r1, [pc, #172]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800356a:	4313      	orrs	r3, r2
 800356c:	604b      	str	r3, [r1, #4]
 800356e:	e01a      	b.n	80035a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003570:	4b29      	ldr	r3, [pc, #164]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a28      	ldr	r2, [pc, #160]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800357c:	f7fd ff80 	bl	8001480 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003584:	f7fd ff7c 	bl	8001480 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e31a      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003596:	4b20      	ldr	r3, [pc, #128]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x1dc>
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d073      	beq.n	800369a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_OscConfig+0x21c>
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b0c      	cmp	r3, #12
 80035bc:	d10e      	bne.n	80035dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d10b      	bne.n	80035dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	4b14      	ldr	r3, [pc, #80]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d063      	beq.n	8003698 <HAL_RCC_OscConfig+0x2f0>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d15f      	bne.n	8003698 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e2f7      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e4:	d106      	bne.n	80035f4 <HAL_RCC_OscConfig+0x24c>
 80035e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a0b      	ldr	r2, [pc, #44]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e025      	b.n	8003640 <HAL_RCC_OscConfig+0x298>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035fc:	d114      	bne.n	8003628 <HAL_RCC_OscConfig+0x280>
 80035fe:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a05      	ldr	r2, [pc, #20]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b03      	ldr	r3, [pc, #12]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a02      	ldr	r2, [pc, #8]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e013      	b.n	8003640 <HAL_RCC_OscConfig+0x298>
 8003618:	40021000 	.word	0x40021000
 800361c:	08005ec4 	.word	0x08005ec4
 8003620:	20040000 	.word	0x20040000
 8003624:	20040004 	.word	0x20040004
 8003628:	4ba0      	ldr	r3, [pc, #640]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a9f      	ldr	r2, [pc, #636]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800362e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	4b9d      	ldr	r3, [pc, #628]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a9c      	ldr	r2, [pc, #624]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800363a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800363e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d013      	beq.n	8003670 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fd ff1a 	bl	8001480 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003650:	f7fd ff16 	bl	8001480 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	@ 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e2b4      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003662:	4b92      	ldr	r3, [pc, #584]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x2a8>
 800366e:	e014      	b.n	800369a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fd ff06 	bl	8001480 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003678:	f7fd ff02 	bl	8001480 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b64      	cmp	r3, #100	@ 0x64
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e2a0      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800368a:	4b88      	ldr	r3, [pc, #544]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x2d0>
 8003696:	e000      	b.n	800369a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d060      	beq.n	8003768 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_OscConfig+0x310>
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d119      	bne.n	80036e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d116      	bne.n	80036e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b8:	4b7c      	ldr	r3, [pc, #496]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_OscConfig+0x328>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e27d      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d0:	4b76      	ldr	r3, [pc, #472]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	061b      	lsls	r3, r3, #24
 80036de:	4973      	ldr	r1, [pc, #460]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e4:	e040      	b.n	8003768 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d023      	beq.n	8003736 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ee:	4b6f      	ldr	r3, [pc, #444]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a6e      	ldr	r2, [pc, #440]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80036f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fa:	f7fd fec1 	bl	8001480 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003702:	f7fd febd 	bl	8001480 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e25b      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003714:	4b65      	ldr	r3, [pc, #404]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003720:	4b62      	ldr	r3, [pc, #392]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	061b      	lsls	r3, r3, #24
 800372e:	495f      	ldr	r1, [pc, #380]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
 8003734:	e018      	b.n	8003768 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003736:	4b5d      	ldr	r3, [pc, #372]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a5c      	ldr	r2, [pc, #368]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800373c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003742:	f7fd fe9d 	bl	8001480 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374a:	f7fd fe99 	bl	8001480 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e237      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800375c:	4b53      	ldr	r3, [pc, #332]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f0      	bne.n	800374a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b00      	cmp	r3, #0
 8003772:	d03c      	beq.n	80037ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01c      	beq.n	80037b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800377c:	4b4b      	ldr	r3, [pc, #300]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800377e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003782:	4a4a      	ldr	r2, [pc, #296]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378c:	f7fd fe78 	bl	8001480 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003794:	f7fd fe74 	bl	8001480 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e212      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037a6:	4b41      	ldr	r3, [pc, #260]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80037a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0ef      	beq.n	8003794 <HAL_RCC_OscConfig+0x3ec>
 80037b4:	e01b      	b.n	80037ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037b6:	4b3d      	ldr	r3, [pc, #244]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80037b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037bc:	4a3b      	ldr	r2, [pc, #236]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80037be:	f023 0301 	bic.w	r3, r3, #1
 80037c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c6:	f7fd fe5b 	bl	8001480 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ce:	f7fd fe57 	bl	8001480 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e1f5      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037e0:	4b32      	ldr	r3, [pc, #200]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80037e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1ef      	bne.n	80037ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 80a6 	beq.w	8003948 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037fc:	2300      	movs	r3, #0
 80037fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003800:	4b2a      	ldr	r3, [pc, #168]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10d      	bne.n	8003828 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800380c:	4b27      	ldr	r3, [pc, #156]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800380e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003810:	4a26      	ldr	r2, [pc, #152]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003816:	6593      	str	r3, [r2, #88]	@ 0x58
 8003818:	4b24      	ldr	r3, [pc, #144]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800381a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003824:	2301      	movs	r3, #1
 8003826:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003828:	4b21      	ldr	r3, [pc, #132]	@ (80038b0 <HAL_RCC_OscConfig+0x508>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d118      	bne.n	8003866 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003834:	4b1e      	ldr	r3, [pc, #120]	@ (80038b0 <HAL_RCC_OscConfig+0x508>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1d      	ldr	r2, [pc, #116]	@ (80038b0 <HAL_RCC_OscConfig+0x508>)
 800383a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800383e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003840:	f7fd fe1e 	bl	8001480 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003848:	f7fd fe1a 	bl	8001480 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e1b8      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800385a:	4b15      	ldr	r3, [pc, #84]	@ (80038b0 <HAL_RCC_OscConfig+0x508>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d108      	bne.n	8003880 <HAL_RCC_OscConfig+0x4d8>
 800386e:	4b0f      	ldr	r3, [pc, #60]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003874:	4a0d      	ldr	r2, [pc, #52]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800387e:	e029      	b.n	80038d4 <HAL_RCC_OscConfig+0x52c>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b05      	cmp	r3, #5
 8003886:	d115      	bne.n	80038b4 <HAL_RCC_OscConfig+0x50c>
 8003888:	4b08      	ldr	r3, [pc, #32]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388e:	4a07      	ldr	r2, [pc, #28]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003890:	f043 0304 	orr.w	r3, r3, #4
 8003894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003898:	4b04      	ldr	r3, [pc, #16]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389e:	4a03      	ldr	r2, [pc, #12]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038a8:	e014      	b.n	80038d4 <HAL_RCC_OscConfig+0x52c>
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40007000 	.word	0x40007000
 80038b4:	4b9d      	ldr	r3, [pc, #628]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ba:	4a9c      	ldr	r2, [pc, #624]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038c4:	4b99      	ldr	r3, [pc, #612]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ca:	4a98      	ldr	r2, [pc, #608]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 80038cc:	f023 0304 	bic.w	r3, r3, #4
 80038d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d016      	beq.n	800390a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038dc:	f7fd fdd0 	bl	8001480 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e2:	e00a      	b.n	80038fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e4:	f7fd fdcc 	bl	8001480 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e168      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038fa:	4b8c      	ldr	r3, [pc, #560]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 80038fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0ed      	beq.n	80038e4 <HAL_RCC_OscConfig+0x53c>
 8003908:	e015      	b.n	8003936 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390a:	f7fd fdb9 	bl	8001480 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003910:	e00a      	b.n	8003928 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003912:	f7fd fdb5 	bl	8001480 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003920:	4293      	cmp	r3, r2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e151      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003928:	4b80      	ldr	r3, [pc, #512]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1ed      	bne.n	8003912 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003936:	7ffb      	ldrb	r3, [r7, #31]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d105      	bne.n	8003948 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800393c:	4b7b      	ldr	r3, [pc, #492]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 800393e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003940:	4a7a      	ldr	r2, [pc, #488]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 8003942:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003946:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d03c      	beq.n	80039ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01c      	beq.n	8003996 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800395c:	4b73      	ldr	r3, [pc, #460]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 800395e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003962:	4a72      	ldr	r2, [pc, #456]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7fd fd88 	bl	8001480 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003974:	f7fd fd84 	bl	8001480 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e122      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003986:	4b69      	ldr	r3, [pc, #420]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 8003988:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0ef      	beq.n	8003974 <HAL_RCC_OscConfig+0x5cc>
 8003994:	e01b      	b.n	80039ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003996:	4b65      	ldr	r3, [pc, #404]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 8003998:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800399c:	4a63      	ldr	r2, [pc, #396]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a6:	f7fd fd6b 	bl	8001480 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039ae:	f7fd fd67 	bl	8001480 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e105      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039c0:	4b5a      	ldr	r3, [pc, #360]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 80039c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1ef      	bne.n	80039ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80f9 	beq.w	8003bca <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039dc:	2b02      	cmp	r3, #2
 80039de:	f040 80cf 	bne.w	8003b80 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039e2:	4b52      	ldr	r3, [pc, #328]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f003 0203 	and.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d12c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a00:	3b01      	subs	r3, #1
 8003a02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d123      	bne.n	8003a50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d11b      	bne.n	8003a50 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a22:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d113      	bne.n	8003a50 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	3b01      	subs	r3, #1
 8003a36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d109      	bne.n	8003a50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	085b      	lsrs	r3, r3, #1
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d071      	beq.n	8003b34 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	d068      	beq.n	8003b28 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a56:	4b35      	ldr	r3, [pc, #212]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d105      	bne.n	8003a6e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a62:	4b32      	ldr	r3, [pc, #200]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e0ac      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a72:	4b2e      	ldr	r3, [pc, #184]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a2d      	ldr	r2, [pc, #180]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 8003a78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a7c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a7e:	f7fd fcff 	bl	8001480 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a86:	f7fd fcfb 	bl	8001480 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e099      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a98:	4b24      	ldr	r3, [pc, #144]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1f0      	bne.n	8003a86 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aa4:	4b21      	ldr	r3, [pc, #132]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	4b21      	ldr	r3, [pc, #132]	@ (8003b30 <HAL_RCC_OscConfig+0x788>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ab4:	3a01      	subs	r2, #1
 8003ab6:	0112      	lsls	r2, r2, #4
 8003ab8:	4311      	orrs	r1, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003abe:	0212      	lsls	r2, r2, #8
 8003ac0:	4311      	orrs	r1, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ac6:	0852      	lsrs	r2, r2, #1
 8003ac8:	3a01      	subs	r2, #1
 8003aca:	0552      	lsls	r2, r2, #21
 8003acc:	4311      	orrs	r1, r2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ad2:	0852      	lsrs	r2, r2, #1
 8003ad4:	3a01      	subs	r2, #1
 8003ad6:	0652      	lsls	r2, r2, #25
 8003ad8:	4311      	orrs	r1, r2
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ade:	06d2      	lsls	r2, r2, #27
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	4912      	ldr	r1, [pc, #72]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ae8:	4b10      	ldr	r3, [pc, #64]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a0f      	ldr	r2, [pc, #60]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 8003aee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003af2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003af4:	4b0d      	ldr	r3, [pc, #52]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4a0c      	ldr	r2, [pc, #48]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 8003afa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003afe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b00:	f7fd fcbe 	bl	8001480 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b08:	f7fd fcba 	bl	8001480 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e058      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b1a:	4b04      	ldr	r3, [pc, #16]	@ (8003b2c <HAL_RCC_OscConfig+0x784>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b26:	e050      	b.n	8003bca <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e04f      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b34:	4b27      	ldr	r3, [pc, #156]	@ (8003bd4 <HAL_RCC_OscConfig+0x82c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d144      	bne.n	8003bca <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b40:	4b24      	ldr	r3, [pc, #144]	@ (8003bd4 <HAL_RCC_OscConfig+0x82c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a23      	ldr	r2, [pc, #140]	@ (8003bd4 <HAL_RCC_OscConfig+0x82c>)
 8003b46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b4c:	4b21      	ldr	r3, [pc, #132]	@ (8003bd4 <HAL_RCC_OscConfig+0x82c>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4a20      	ldr	r2, [pc, #128]	@ (8003bd4 <HAL_RCC_OscConfig+0x82c>)
 8003b52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b58:	f7fd fc92 	bl	8001480 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b60:	f7fd fc8e 	bl	8001480 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e02c      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b72:	4b18      	ldr	r3, [pc, #96]	@ (8003bd4 <HAL_RCC_OscConfig+0x82c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x7b8>
 8003b7e:	e024      	b.n	8003bca <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	2b0c      	cmp	r3, #12
 8003b84:	d01f      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b86:	4b13      	ldr	r3, [pc, #76]	@ (8003bd4 <HAL_RCC_OscConfig+0x82c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a12      	ldr	r2, [pc, #72]	@ (8003bd4 <HAL_RCC_OscConfig+0x82c>)
 8003b8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b92:	f7fd fc75 	bl	8001480 <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9a:	f7fd fc71 	bl	8001480 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e00f      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bac:	4b09      	ldr	r3, [pc, #36]	@ (8003bd4 <HAL_RCC_OscConfig+0x82c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f0      	bne.n	8003b9a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003bb8:	4b06      	ldr	r3, [pc, #24]	@ (8003bd4 <HAL_RCC_OscConfig+0x82c>)
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	4905      	ldr	r1, [pc, #20]	@ (8003bd4 <HAL_RCC_OscConfig+0x82c>)
 8003bbe:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <HAL_RCC_OscConfig+0x830>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60cb      	str	r3, [r1, #12]
 8003bc4:	e001      	b.n	8003bca <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	feeefffc 	.word	0xfeeefffc

08003bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e11d      	b.n	8003e30 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bf4:	4b90      	ldr	r3, [pc, #576]	@ (8003e38 <HAL_RCC_ClockConfig+0x25c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 030f 	and.w	r3, r3, #15
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d910      	bls.n	8003c24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c02:	4b8d      	ldr	r3, [pc, #564]	@ (8003e38 <HAL_RCC_ClockConfig+0x25c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 020f 	bic.w	r2, r3, #15
 8003c0a:	498b      	ldr	r1, [pc, #556]	@ (8003e38 <HAL_RCC_ClockConfig+0x25c>)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c12:	4b89      	ldr	r3, [pc, #548]	@ (8003e38 <HAL_RCC_ClockConfig+0x25c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d001      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e105      	b.n	8003e30 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d010      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	4b81      	ldr	r3, [pc, #516]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d908      	bls.n	8003c52 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c40:	4b7e      	ldr	r3, [pc, #504]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	497b      	ldr	r1, [pc, #492]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d079      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d11e      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c66:	4b75      	ldr	r3, [pc, #468]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e0dc      	b.n	8003e30 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003c76:	f000 fa09 	bl	800408c <RCC_GetSysClockFreqFromPLLSource>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4a70      	ldr	r2, [pc, #448]	@ (8003e40 <HAL_RCC_ClockConfig+0x264>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d946      	bls.n	8003d10 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c82:	4b6e      	ldr	r3, [pc, #440]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d140      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c8e:	4b6b      	ldr	r3, [pc, #428]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c96:	4a69      	ldr	r2, [pc, #420]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c9e:	2380      	movs	r3, #128	@ 0x80
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	e035      	b.n	8003d10 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d107      	bne.n	8003cbc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cac:	4b63      	ldr	r3, [pc, #396]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d115      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0b9      	b.n	8003e30 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cc4:	4b5d      	ldr	r3, [pc, #372]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d109      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0ad      	b.n	8003e30 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd4:	4b59      	ldr	r3, [pc, #356]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0a5      	b.n	8003e30 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003ce4:	f000 f8b4 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	4a55      	ldr	r2, [pc, #340]	@ (8003e40 <HAL_RCC_ClockConfig+0x264>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d90f      	bls.n	8003d10 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003cf0:	4b52      	ldr	r3, [pc, #328]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d109      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cfc:	4b4f      	ldr	r3, [pc, #316]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d04:	4a4d      	ldr	r2, [pc, #308]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d0a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d0c:	2380      	movs	r3, #128	@ 0x80
 8003d0e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d10:	4b4a      	ldr	r3, [pc, #296]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f023 0203 	bic.w	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	4947      	ldr	r1, [pc, #284]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d22:	f7fd fbad 	bl	8001480 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d28:	e00a      	b.n	8003d40 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d2a:	f7fd fba9 	bl	8001480 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e077      	b.n	8003e30 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d40:	4b3e      	ldr	r3, [pc, #248]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 020c 	and.w	r2, r3, #12
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d1eb      	bne.n	8003d2a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b80      	cmp	r3, #128	@ 0x80
 8003d56:	d105      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d58:	4b38      	ldr	r3, [pc, #224]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	4a37      	ldr	r2, [pc, #220]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003d5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d62:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d010      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	4b31      	ldr	r3, [pc, #196]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d208      	bcs.n	8003d92 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d80:	4b2e      	ldr	r3, [pc, #184]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	492b      	ldr	r1, [pc, #172]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d92:	4b29      	ldr	r3, [pc, #164]	@ (8003e38 <HAL_RCC_ClockConfig+0x25c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d210      	bcs.n	8003dc2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da0:	4b25      	ldr	r3, [pc, #148]	@ (8003e38 <HAL_RCC_ClockConfig+0x25c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f023 020f 	bic.w	r2, r3, #15
 8003da8:	4923      	ldr	r1, [pc, #140]	@ (8003e38 <HAL_RCC_ClockConfig+0x25c>)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db0:	4b21      	ldr	r3, [pc, #132]	@ (8003e38 <HAL_RCC_ClockConfig+0x25c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e036      	b.n	8003e30 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d008      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dce:	4b1b      	ldr	r3, [pc, #108]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	4918      	ldr	r1, [pc, #96]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d009      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dec:	4b13      	ldr	r3, [pc, #76]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4910      	ldr	r1, [pc, #64]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e00:	f000 f826 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 8003e04:	4602      	mov	r2, r0
 8003e06:	4b0d      	ldr	r3, [pc, #52]	@ (8003e3c <HAL_RCC_ClockConfig+0x260>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	091b      	lsrs	r3, r3, #4
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	490c      	ldr	r1, [pc, #48]	@ (8003e44 <HAL_RCC_ClockConfig+0x268>)
 8003e12:	5ccb      	ldrb	r3, [r1, r3]
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e48 <HAL_RCC_ClockConfig+0x26c>)
 8003e1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e20:	4b0a      	ldr	r3, [pc, #40]	@ (8003e4c <HAL_RCC_ClockConfig+0x270>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fd fadb 	bl	80013e0 <HAL_InitTick>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	73fb      	strb	r3, [r7, #15]

  return status;
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40022000 	.word	0x40022000
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	04c4b400 	.word	0x04c4b400
 8003e44:	08005ec4 	.word	0x08005ec4
 8003e48:	20040000 	.word	0x20040000
 8003e4c:	20040004 	.word	0x20040004

08003e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b089      	sub	sp, #36	@ 0x24
 8003e54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e5e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e68:	4b3b      	ldr	r3, [pc, #236]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x34>
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	2b0c      	cmp	r3, #12
 8003e7c:	d121      	bne.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d11e      	bne.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e84:	4b34      	ldr	r3, [pc, #208]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d107      	bne.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e90:	4b31      	ldr	r3, [pc, #196]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e96:	0a1b      	lsrs	r3, r3, #8
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	e005      	b.n	8003eac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003eac:	4a2b      	ldr	r2, [pc, #172]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10d      	bne.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ec0:	e00a      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d102      	bne.n	8003ece <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ec8:	4b25      	ldr	r3, [pc, #148]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eca:	61bb      	str	r3, [r7, #24]
 8003ecc:	e004      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ed4:	4b23      	ldr	r3, [pc, #140]	@ (8003f64 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ed6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	2b0c      	cmp	r3, #12
 8003edc:	d134      	bne.n	8003f48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ede:	4b1e      	ldr	r3, [pc, #120]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d003      	beq.n	8003ef6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d003      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0xac>
 8003ef4:	e005      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ef8:	617b      	str	r3, [r7, #20]
      break;
 8003efa:	e005      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003efc:	4b19      	ldr	r3, [pc, #100]	@ (8003f64 <HAL_RCC_GetSysClockFreq+0x114>)
 8003efe:	617b      	str	r3, [r7, #20]
      break;
 8003f00:	e002      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	617b      	str	r3, [r7, #20]
      break;
 8003f06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f08:	4b13      	ldr	r3, [pc, #76]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	091b      	lsrs	r3, r3, #4
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	3301      	adds	r3, #1
 8003f14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f16:	4b10      	ldr	r3, [pc, #64]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	fb03 f202 	mul.w	r2, r3, r2
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	0e5b      	lsrs	r3, r3, #25
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	3301      	adds	r3, #1
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f48:	69bb      	ldr	r3, [r7, #24]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3724      	adds	r7, #36	@ 0x24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	08005edc 	.word	0x08005edc
 8003f60:	00f42400 	.word	0x00f42400
 8003f64:	007a1200 	.word	0x007a1200

08003f68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f6c:	4b03      	ldr	r3, [pc, #12]	@ (8003f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	20040000 	.word	0x20040000

08003f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f84:	f7ff fff0 	bl	8003f68 <HAL_RCC_GetHCLKFreq>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	4b06      	ldr	r3, [pc, #24]	@ (8003fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	0a1b      	lsrs	r3, r3, #8
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	4904      	ldr	r1, [pc, #16]	@ (8003fa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f96:	5ccb      	ldrb	r3, [r1, r3]
 8003f98:	f003 031f 	and.w	r3, r3, #31
 8003f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	08005ed4 	.word	0x08005ed4

08003fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fb0:	f7ff ffda 	bl	8003f68 <HAL_RCC_GetHCLKFreq>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4b06      	ldr	r3, [pc, #24]	@ (8003fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	0adb      	lsrs	r3, r3, #11
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	4904      	ldr	r1, [pc, #16]	@ (8003fd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fc2:	5ccb      	ldrb	r3, [r1, r3]
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	08005ed4 	.word	0x08005ed4

08003fd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fe4:	4b27      	ldr	r3, [pc, #156]	@ (8004084 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ff0:	f7ff f906 	bl	8003200 <HAL_PWREx_GetVoltageRange>
 8003ff4:	6178      	str	r0, [r7, #20]
 8003ff6:	e014      	b.n	8004022 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ff8:	4b22      	ldr	r3, [pc, #136]	@ (8004084 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffc:	4a21      	ldr	r2, [pc, #132]	@ (8004084 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004002:	6593      	str	r3, [r2, #88]	@ 0x58
 8004004:	4b1f      	ldr	r3, [pc, #124]	@ (8004084 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004010:	f7ff f8f6 	bl	8003200 <HAL_PWREx_GetVoltageRange>
 8004014:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004016:	4b1b      	ldr	r3, [pc, #108]	@ (8004084 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401a:	4a1a      	ldr	r2, [pc, #104]	@ (8004084 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800401c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004020:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004028:	d10b      	bne.n	8004042 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b80      	cmp	r3, #128	@ 0x80
 800402e:	d913      	bls.n	8004058 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2ba0      	cmp	r3, #160	@ 0xa0
 8004034:	d902      	bls.n	800403c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004036:	2302      	movs	r3, #2
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	e00d      	b.n	8004058 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800403c:	2301      	movs	r3, #1
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	e00a      	b.n	8004058 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b7f      	cmp	r3, #127	@ 0x7f
 8004046:	d902      	bls.n	800404e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004048:	2302      	movs	r3, #2
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	e004      	b.n	8004058 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b70      	cmp	r3, #112	@ 0x70
 8004052:	d101      	bne.n	8004058 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004054:	2301      	movs	r3, #1
 8004056:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004058:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f023 020f 	bic.w	r2, r3, #15
 8004060:	4909      	ldr	r1, [pc, #36]	@ (8004088 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004068:	4b07      	ldr	r3, [pc, #28]	@ (8004088 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	429a      	cmp	r2, r3
 8004074:	d001      	beq.n	800407a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40021000 	.word	0x40021000
 8004088:	40022000 	.word	0x40022000

0800408c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004092:	4b2d      	ldr	r3, [pc, #180]	@ (8004148 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d00b      	beq.n	80040ba <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d825      	bhi.n	80040f4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d008      	beq.n	80040c0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d11f      	bne.n	80040f4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80040b4:	4b25      	ldr	r3, [pc, #148]	@ (800414c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80040b6:	613b      	str	r3, [r7, #16]
    break;
 80040b8:	e01f      	b.n	80040fa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80040ba:	4b25      	ldr	r3, [pc, #148]	@ (8004150 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80040bc:	613b      	str	r3, [r7, #16]
    break;
 80040be:	e01c      	b.n	80040fa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040c0:	4b21      	ldr	r3, [pc, #132]	@ (8004148 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d107      	bne.n	80040dc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004148 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040d2:	0a1b      	lsrs	r3, r3, #8
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	e005      	b.n	80040e8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004148 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80040e8:	4a1a      	ldr	r2, [pc, #104]	@ (8004154 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f0:	613b      	str	r3, [r7, #16]
    break;
 80040f2:	e002      	b.n	80040fa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	613b      	str	r3, [r7, #16]
    break;
 80040f8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040fa:	4b13      	ldr	r3, [pc, #76]	@ (8004148 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	091b      	lsrs	r3, r3, #4
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	3301      	adds	r3, #1
 8004106:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004108:	4b0f      	ldr	r3, [pc, #60]	@ (8004148 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	0a1b      	lsrs	r3, r3, #8
 800410e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	fb03 f202 	mul.w	r2, r3, r2
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	fbb2 f3f3 	udiv	r3, r2, r3
 800411e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004120:	4b09      	ldr	r3, [pc, #36]	@ (8004148 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	0e5b      	lsrs	r3, r3, #25
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	3301      	adds	r3, #1
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	fbb2 f3f3 	udiv	r3, r2, r3
 8004138:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800413a:	683b      	ldr	r3, [r7, #0]
}
 800413c:	4618      	mov	r0, r3
 800413e:	371c      	adds	r7, #28
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	40021000 	.word	0x40021000
 800414c:	00f42400 	.word	0x00f42400
 8004150:	007a1200 	.word	0x007a1200
 8004154:	08005edc 	.word	0x08005edc

08004158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004160:	2300      	movs	r3, #0
 8004162:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004164:	2300      	movs	r3, #0
 8004166:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004170:	2b00      	cmp	r3, #0
 8004172:	d040      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004178:	2b80      	cmp	r3, #128	@ 0x80
 800417a:	d02a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800417c:	2b80      	cmp	r3, #128	@ 0x80
 800417e:	d825      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004180:	2b60      	cmp	r3, #96	@ 0x60
 8004182:	d026      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004184:	2b60      	cmp	r3, #96	@ 0x60
 8004186:	d821      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004188:	2b40      	cmp	r3, #64	@ 0x40
 800418a:	d006      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800418c:	2b40      	cmp	r3, #64	@ 0x40
 800418e:	d81d      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d009      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004194:	2b20      	cmp	r3, #32
 8004196:	d010      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004198:	e018      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800419a:	4b89      	ldr	r3, [pc, #548]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	4a88      	ldr	r2, [pc, #544]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041a6:	e015      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	2100      	movs	r1, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fb02 	bl	80047b8 <RCCEx_PLLSAI1_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041b8:	e00c      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3320      	adds	r3, #32
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fbed 	bl	80049a0 <RCCEx_PLLSAI2_Config>
 80041c6:	4603      	mov	r3, r0
 80041c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041ca:	e003      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	74fb      	strb	r3, [r7, #19]
      break;
 80041d0:	e000      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80041d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041d4:	7cfb      	ldrb	r3, [r7, #19]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10b      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041da:	4b79      	ldr	r3, [pc, #484]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041e0:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041e8:	4975      	ldr	r1, [pc, #468]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80041f0:	e001      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f2:	7cfb      	ldrb	r3, [r7, #19]
 80041f4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d047      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800420a:	d030      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800420c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004210:	d82a      	bhi.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004212:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004216:	d02a      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004218:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800421c:	d824      	bhi.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800421e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004222:	d008      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004228:	d81e      	bhi.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800422e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004232:	d010      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004234:	e018      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004236:	4b62      	ldr	r3, [pc, #392]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	4a61      	ldr	r2, [pc, #388]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004240:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004242:	e015      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	2100      	movs	r1, #0
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fab4 	bl	80047b8 <RCCEx_PLLSAI1_Config>
 8004250:	4603      	mov	r3, r0
 8004252:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004254:	e00c      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3320      	adds	r3, #32
 800425a:	2100      	movs	r1, #0
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fb9f 	bl	80049a0 <RCCEx_PLLSAI2_Config>
 8004262:	4603      	mov	r3, r0
 8004264:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004266:	e003      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	74fb      	strb	r3, [r7, #19]
      break;
 800426c:	e000      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800426e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004270:	7cfb      	ldrb	r3, [r7, #19]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10b      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004276:	4b52      	ldr	r3, [pc, #328]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004278:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800427c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004284:	494e      	ldr	r1, [pc, #312]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800428c:	e001      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428e:	7cfb      	ldrb	r3, [r7, #19]
 8004290:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 809f 	beq.w	80043de <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042a0:	2300      	movs	r3, #0
 80042a2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042a4:	4b46      	ldr	r3, [pc, #280]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80042b4:	2300      	movs	r3, #0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00d      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ba:	4b41      	ldr	r3, [pc, #260]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042be:	4a40      	ldr	r2, [pc, #256]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80042c6:	4b3e      	ldr	r3, [pc, #248]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ce:	60bb      	str	r3, [r7, #8]
 80042d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d2:	2301      	movs	r3, #1
 80042d4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042d6:	4b3b      	ldr	r3, [pc, #236]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a3a      	ldr	r2, [pc, #232]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042e2:	f7fd f8cd 	bl	8001480 <HAL_GetTick>
 80042e6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042e8:	e009      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ea:	f7fd f8c9 	bl	8001480 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d902      	bls.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	74fb      	strb	r3, [r7, #19]
        break;
 80042fc:	e005      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042fe:	4b31      	ldr	r3, [pc, #196]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0ef      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800430a:	7cfb      	ldrb	r3, [r7, #19]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d15b      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004310:	4b2b      	ldr	r3, [pc, #172]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800431a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d01f      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	429a      	cmp	r2, r3
 800432c:	d019      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800432e:	4b24      	ldr	r3, [pc, #144]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004334:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004338:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800433a:	4b21      	ldr	r3, [pc, #132]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800433c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004340:	4a1f      	ldr	r2, [pc, #124]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004342:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004346:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800434a:	4b1d      	ldr	r3, [pc, #116]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004350:	4a1b      	ldr	r2, [pc, #108]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004352:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004356:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800435a:	4a19      	ldr	r2, [pc, #100]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d016      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436c:	f7fd f888 	bl	8001480 <HAL_GetTick>
 8004370:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004372:	e00b      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004374:	f7fd f884 	bl	8001480 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d902      	bls.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	74fb      	strb	r3, [r7, #19]
            break;
 800438a:	e006      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438c:	4b0c      	ldr	r3, [pc, #48]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0ec      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800439a:	7cfb      	ldrb	r3, [r7, #19]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10c      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043a0:	4b07      	ldr	r3, [pc, #28]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b0:	4903      	ldr	r1, [pc, #12]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80043b8:	e008      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043ba:	7cfb      	ldrb	r3, [r7, #19]
 80043bc:	74bb      	strb	r3, [r7, #18]
 80043be:	e005      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043cc:	7c7b      	ldrb	r3, [r7, #17]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d105      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d2:	4ba0      	ldr	r3, [pc, #640]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d6:	4a9f      	ldr	r2, [pc, #636]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043ea:	4b9a      	ldr	r3, [pc, #616]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f0:	f023 0203 	bic.w	r2, r3, #3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f8:	4996      	ldr	r1, [pc, #600]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800440c:	4b91      	ldr	r3, [pc, #580]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004412:	f023 020c 	bic.w	r2, r3, #12
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441a:	498e      	ldr	r1, [pc, #568]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800442e:	4b89      	ldr	r3, [pc, #548]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004434:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443c:	4985      	ldr	r1, [pc, #532]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004450:	4b80      	ldr	r3, [pc, #512]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004456:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800445e:	497d      	ldr	r1, [pc, #500]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004472:	4b78      	ldr	r3, [pc, #480]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004478:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004480:	4974      	ldr	r1, [pc, #464]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004494:	4b6f      	ldr	r3, [pc, #444]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a2:	496c      	ldr	r1, [pc, #432]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044b6:	4b67      	ldr	r3, [pc, #412]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044c4:	4963      	ldr	r1, [pc, #396]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044d8:	4b5e      	ldr	r3, [pc, #376]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044e6:	495b      	ldr	r1, [pc, #364]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044fa:	4b56      	ldr	r3, [pc, #344]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004500:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004508:	4952      	ldr	r1, [pc, #328]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800451c:	4b4d      	ldr	r3, [pc, #308]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004522:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452a:	494a      	ldr	r1, [pc, #296]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800453e:	4b45      	ldr	r3, [pc, #276]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004544:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454c:	4941      	ldr	r1, [pc, #260]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004560:	4b3c      	ldr	r3, [pc, #240]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004562:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004566:	f023 0203 	bic.w	r2, r3, #3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456e:	4939      	ldr	r1, [pc, #228]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d028      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004582:	4b34      	ldr	r3, [pc, #208]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004588:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004590:	4930      	ldr	r1, [pc, #192]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800459c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045a0:	d106      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	4a2b      	ldr	r2, [pc, #172]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045ac:	60d3      	str	r3, [r2, #12]
 80045ae:	e011      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045b8:	d10c      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3304      	adds	r3, #4
 80045be:	2101      	movs	r1, #1
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 f8f9 	bl	80047b8 <RCCEx_PLLSAI1_Config>
 80045c6:	4603      	mov	r3, r0
 80045c8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045ca:	7cfb      	ldrb	r3, [r7, #19]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80045d0:	7cfb      	ldrb	r3, [r7, #19]
 80045d2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d04d      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045e8:	d108      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80045ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045f0:	4a18      	ldr	r2, [pc, #96]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045f6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80045fa:	e012      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80045fc:	4b15      	ldr	r3, [pc, #84]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004602:	4a14      	ldr	r2, [pc, #80]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004604:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004608:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800460c:	4b11      	ldr	r3, [pc, #68]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004612:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800461a:	490e      	ldr	r1, [pc, #56]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004626:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800462a:	d106      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800462c:	4b09      	ldr	r3, [pc, #36]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4a08      	ldr	r2, [pc, #32]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004636:	60d3      	str	r3, [r2, #12]
 8004638:	e020      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800463e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004642:	d109      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004644:	4b03      	ldr	r3, [pc, #12]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4a02      	ldr	r2, [pc, #8]	@ (8004654 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800464a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800464e:	60d3      	str	r3, [r2, #12]
 8004650:	e014      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004652:	bf00      	nop
 8004654:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800465c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004660:	d10c      	bne.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3304      	adds	r3, #4
 8004666:	2101      	movs	r1, #1
 8004668:	4618      	mov	r0, r3
 800466a:	f000 f8a5 	bl	80047b8 <RCCEx_PLLSAI1_Config>
 800466e:	4603      	mov	r3, r0
 8004670:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004672:	7cfb      	ldrb	r3, [r7, #19]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004678:	7cfb      	ldrb	r3, [r7, #19]
 800467a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d028      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004688:	4b4a      	ldr	r3, [pc, #296]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004696:	4947      	ldr	r1, [pc, #284]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046a6:	d106      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046a8:	4b42      	ldr	r3, [pc, #264]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4a41      	ldr	r2, [pc, #260]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046b2:	60d3      	str	r3, [r2, #12]
 80046b4:	e011      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046be:	d10c      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3304      	adds	r3, #4
 80046c4:	2101      	movs	r1, #1
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 f876 	bl	80047b8 <RCCEx_PLLSAI1_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046d0:	7cfb      	ldrb	r3, [r7, #19]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80046d6:	7cfb      	ldrb	r3, [r7, #19]
 80046d8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d01e      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046e6:	4b33      	ldr	r3, [pc, #204]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ec:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046f6:	492f      	ldr	r1, [pc, #188]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004704:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004708:	d10c      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3304      	adds	r3, #4
 800470e:	2102      	movs	r1, #2
 8004710:	4618      	mov	r0, r3
 8004712:	f000 f851 	bl	80047b8 <RCCEx_PLLSAI1_Config>
 8004716:	4603      	mov	r3, r0
 8004718:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800471a:	7cfb      	ldrb	r3, [r7, #19]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004720:	7cfb      	ldrb	r3, [r7, #19]
 8004722:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00b      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004730:	4b20      	ldr	r3, [pc, #128]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004732:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004736:	f023 0204 	bic.w	r2, r3, #4
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004740:	491c      	ldr	r1, [pc, #112]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00b      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004754:	4b17      	ldr	r3, [pc, #92]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004756:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800475a:	f023 0218 	bic.w	r2, r3, #24
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004764:	4913      	ldr	r1, [pc, #76]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d017      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004778:	4b0e      	ldr	r3, [pc, #56]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800477a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800477e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004788:	490a      	ldr	r1, [pc, #40]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004796:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800479a:	d105      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800479c:	4b05      	ldr	r3, [pc, #20]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a04      	ldr	r2, [pc, #16]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40021000 	.word	0x40021000

080047b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047c6:	4b72      	ldr	r3, [pc, #456]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00e      	beq.n	80047f0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047d2:	4b6f      	ldr	r3, [pc, #444]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f003 0203 	and.w	r2, r3, #3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d103      	bne.n	80047ea <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
       ||
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d142      	bne.n	8004870 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	73fb      	strb	r3, [r7, #15]
 80047ee:	e03f      	b.n	8004870 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d018      	beq.n	800482a <RCCEx_PLLSAI1_Config+0x72>
 80047f8:	2b03      	cmp	r3, #3
 80047fa:	d825      	bhi.n	8004848 <RCCEx_PLLSAI1_Config+0x90>
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d002      	beq.n	8004806 <RCCEx_PLLSAI1_Config+0x4e>
 8004800:	2b02      	cmp	r3, #2
 8004802:	d009      	beq.n	8004818 <RCCEx_PLLSAI1_Config+0x60>
 8004804:	e020      	b.n	8004848 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004806:	4b62      	ldr	r3, [pc, #392]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d11d      	bne.n	800484e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004816:	e01a      	b.n	800484e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004818:	4b5d      	ldr	r3, [pc, #372]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004820:	2b00      	cmp	r3, #0
 8004822:	d116      	bne.n	8004852 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004828:	e013      	b.n	8004852 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800482a:	4b59      	ldr	r3, [pc, #356]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10f      	bne.n	8004856 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004836:	4b56      	ldr	r3, [pc, #344]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004846:	e006      	b.n	8004856 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	73fb      	strb	r3, [r7, #15]
      break;
 800484c:	e004      	b.n	8004858 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800484e:	bf00      	nop
 8004850:	e002      	b.n	8004858 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004852:	bf00      	nop
 8004854:	e000      	b.n	8004858 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004856:	bf00      	nop
    }

    if(status == HAL_OK)
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d108      	bne.n	8004870 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800485e:	4b4c      	ldr	r3, [pc, #304]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f023 0203 	bic.w	r2, r3, #3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4949      	ldr	r1, [pc, #292]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 800486c:	4313      	orrs	r3, r2
 800486e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	2b00      	cmp	r3, #0
 8004874:	f040 8086 	bne.w	8004984 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004878:	4b45      	ldr	r3, [pc, #276]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a44      	ldr	r2, [pc, #272]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 800487e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004884:	f7fc fdfc 	bl	8001480 <HAL_GetTick>
 8004888:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800488a:	e009      	b.n	80048a0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800488c:	f7fc fdf8 	bl	8001480 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d902      	bls.n	80048a0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	73fb      	strb	r3, [r7, #15]
        break;
 800489e:	e005      	b.n	80048ac <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1ef      	bne.n	800488c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d168      	bne.n	8004984 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d113      	bne.n	80048e0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048b8:	4b35      	ldr	r3, [pc, #212]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	4b35      	ldr	r3, [pc, #212]	@ (8004994 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048be:	4013      	ands	r3, r2
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6892      	ldr	r2, [r2, #8]
 80048c4:	0211      	lsls	r1, r2, #8
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	68d2      	ldr	r2, [r2, #12]
 80048ca:	06d2      	lsls	r2, r2, #27
 80048cc:	4311      	orrs	r1, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6852      	ldr	r2, [r2, #4]
 80048d2:	3a01      	subs	r2, #1
 80048d4:	0112      	lsls	r2, r2, #4
 80048d6:	430a      	orrs	r2, r1
 80048d8:	492d      	ldr	r1, [pc, #180]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	610b      	str	r3, [r1, #16]
 80048de:	e02d      	b.n	800493c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d115      	bne.n	8004912 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	4b2b      	ldr	r3, [pc, #172]	@ (8004998 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6892      	ldr	r2, [r2, #8]
 80048f2:	0211      	lsls	r1, r2, #8
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6912      	ldr	r2, [r2, #16]
 80048f8:	0852      	lsrs	r2, r2, #1
 80048fa:	3a01      	subs	r2, #1
 80048fc:	0552      	lsls	r2, r2, #21
 80048fe:	4311      	orrs	r1, r2
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6852      	ldr	r2, [r2, #4]
 8004904:	3a01      	subs	r2, #1
 8004906:	0112      	lsls	r2, r2, #4
 8004908:	430a      	orrs	r2, r1
 800490a:	4921      	ldr	r1, [pc, #132]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 800490c:	4313      	orrs	r3, r2
 800490e:	610b      	str	r3, [r1, #16]
 8004910:	e014      	b.n	800493c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004912:	4b1f      	ldr	r3, [pc, #124]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	4b21      	ldr	r3, [pc, #132]	@ (800499c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004918:	4013      	ands	r3, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6892      	ldr	r2, [r2, #8]
 800491e:	0211      	lsls	r1, r2, #8
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6952      	ldr	r2, [r2, #20]
 8004924:	0852      	lsrs	r2, r2, #1
 8004926:	3a01      	subs	r2, #1
 8004928:	0652      	lsls	r2, r2, #25
 800492a:	4311      	orrs	r1, r2
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6852      	ldr	r2, [r2, #4]
 8004930:	3a01      	subs	r2, #1
 8004932:	0112      	lsls	r2, r2, #4
 8004934:	430a      	orrs	r2, r1
 8004936:	4916      	ldr	r1, [pc, #88]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004938:	4313      	orrs	r3, r2
 800493a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800493c:	4b14      	ldr	r3, [pc, #80]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a13      	ldr	r2, [pc, #76]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004942:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004946:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004948:	f7fc fd9a 	bl	8001480 <HAL_GetTick>
 800494c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800494e:	e009      	b.n	8004964 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004950:	f7fc fd96 	bl	8001480 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d902      	bls.n	8004964 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	73fb      	strb	r3, [r7, #15]
          break;
 8004962:	e005      	b.n	8004970 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004964:	4b0a      	ldr	r3, [pc, #40]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0ef      	beq.n	8004950 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004976:	4b06      	ldr	r3, [pc, #24]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	4904      	ldr	r1, [pc, #16]	@ (8004990 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004980:	4313      	orrs	r3, r2
 8004982:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004984:	7bfb      	ldrb	r3, [r7, #15]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40021000 	.word	0x40021000
 8004994:	07ff800f 	.word	0x07ff800f
 8004998:	ff9f800f 	.word	0xff9f800f
 800499c:	f9ff800f 	.word	0xf9ff800f

080049a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049ae:	4b72      	ldr	r3, [pc, #456]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00e      	beq.n	80049d8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049ba:	4b6f      	ldr	r3, [pc, #444]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f003 0203 	and.w	r2, r3, #3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d103      	bne.n	80049d2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
       ||
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d142      	bne.n	8004a58 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
 80049d6:	e03f      	b.n	8004a58 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d018      	beq.n	8004a12 <RCCEx_PLLSAI2_Config+0x72>
 80049e0:	2b03      	cmp	r3, #3
 80049e2:	d825      	bhi.n	8004a30 <RCCEx_PLLSAI2_Config+0x90>
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d002      	beq.n	80049ee <RCCEx_PLLSAI2_Config+0x4e>
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d009      	beq.n	8004a00 <RCCEx_PLLSAI2_Config+0x60>
 80049ec:	e020      	b.n	8004a30 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049ee:	4b62      	ldr	r3, [pc, #392]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d11d      	bne.n	8004a36 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049fe:	e01a      	b.n	8004a36 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a00:	4b5d      	ldr	r3, [pc, #372]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d116      	bne.n	8004a3a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a10:	e013      	b.n	8004a3a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a12:	4b59      	ldr	r3, [pc, #356]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10f      	bne.n	8004a3e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a1e:	4b56      	ldr	r3, [pc, #344]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d109      	bne.n	8004a3e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a2e:	e006      	b.n	8004a3e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
      break;
 8004a34:	e004      	b.n	8004a40 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004a36:	bf00      	nop
 8004a38:	e002      	b.n	8004a40 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004a3a:	bf00      	nop
 8004a3c:	e000      	b.n	8004a40 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004a3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d108      	bne.n	8004a58 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004a46:	4b4c      	ldr	r3, [pc, #304]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f023 0203 	bic.w	r2, r3, #3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4949      	ldr	r1, [pc, #292]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f040 8086 	bne.w	8004b6c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a60:	4b45      	ldr	r3, [pc, #276]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a44      	ldr	r2, [pc, #272]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6c:	f7fc fd08 	bl	8001480 <HAL_GetTick>
 8004a70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a72:	e009      	b.n	8004a88 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a74:	f7fc fd04 	bl	8001480 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d902      	bls.n	8004a88 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	73fb      	strb	r3, [r7, #15]
        break;
 8004a86:	e005      	b.n	8004a94 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a88:	4b3b      	ldr	r3, [pc, #236]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1ef      	bne.n	8004a74 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d168      	bne.n	8004b6c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d113      	bne.n	8004ac8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004aa0:	4b35      	ldr	r3, [pc, #212]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aa2:	695a      	ldr	r2, [r3, #20]
 8004aa4:	4b35      	ldr	r3, [pc, #212]	@ (8004b7c <RCCEx_PLLSAI2_Config+0x1dc>)
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6892      	ldr	r2, [r2, #8]
 8004aac:	0211      	lsls	r1, r2, #8
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68d2      	ldr	r2, [r2, #12]
 8004ab2:	06d2      	lsls	r2, r2, #27
 8004ab4:	4311      	orrs	r1, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6852      	ldr	r2, [r2, #4]
 8004aba:	3a01      	subs	r2, #1
 8004abc:	0112      	lsls	r2, r2, #4
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	492d      	ldr	r1, [pc, #180]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	614b      	str	r3, [r1, #20]
 8004ac6:	e02d      	b.n	8004b24 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d115      	bne.n	8004afa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ace:	4b2a      	ldr	r3, [pc, #168]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ad0:	695a      	ldr	r2, [r3, #20]
 8004ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8004b80 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6892      	ldr	r2, [r2, #8]
 8004ada:	0211      	lsls	r1, r2, #8
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6912      	ldr	r2, [r2, #16]
 8004ae0:	0852      	lsrs	r2, r2, #1
 8004ae2:	3a01      	subs	r2, #1
 8004ae4:	0552      	lsls	r2, r2, #21
 8004ae6:	4311      	orrs	r1, r2
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6852      	ldr	r2, [r2, #4]
 8004aec:	3a01      	subs	r2, #1
 8004aee:	0112      	lsls	r2, r2, #4
 8004af0:	430a      	orrs	r2, r1
 8004af2:	4921      	ldr	r1, [pc, #132]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	614b      	str	r3, [r1, #20]
 8004af8:	e014      	b.n	8004b24 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004afa:	4b1f      	ldr	r3, [pc, #124]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004afc:	695a      	ldr	r2, [r3, #20]
 8004afe:	4b21      	ldr	r3, [pc, #132]	@ (8004b84 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6892      	ldr	r2, [r2, #8]
 8004b06:	0211      	lsls	r1, r2, #8
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6952      	ldr	r2, [r2, #20]
 8004b0c:	0852      	lsrs	r2, r2, #1
 8004b0e:	3a01      	subs	r2, #1
 8004b10:	0652      	lsls	r2, r2, #25
 8004b12:	4311      	orrs	r1, r2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6852      	ldr	r2, [r2, #4]
 8004b18:	3a01      	subs	r2, #1
 8004b1a:	0112      	lsls	r2, r2, #4
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	4916      	ldr	r1, [pc, #88]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b24:	4b14      	ldr	r3, [pc, #80]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a13      	ldr	r2, [pc, #76]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b30:	f7fc fca6 	bl	8001480 <HAL_GetTick>
 8004b34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b36:	e009      	b.n	8004b4c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b38:	f7fc fca2 	bl	8001480 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d902      	bls.n	8004b4c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	73fb      	strb	r3, [r7, #15]
          break;
 8004b4a:	e005      	b.n	8004b58 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0ef      	beq.n	8004b38 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b5e:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b60:	695a      	ldr	r2, [r3, #20]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	4904      	ldr	r1, [pc, #16]	@ (8004b78 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	07ff800f 	.word	0x07ff800f
 8004b80:	ff9f800f 	.word	0xff9f800f
 8004b84:	f9ff800f 	.word	0xf9ff800f

08004b88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e095      	b.n	8004cc6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d108      	bne.n	8004bb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004baa:	d009      	beq.n	8004bc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	61da      	str	r2, [r3, #28]
 8004bb2:	e005      	b.n	8004bc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fc fad8 	bl	8001190 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bf6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c00:	d902      	bls.n	8004c08 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	e002      	b.n	8004c0e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c0c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004c16:	d007      	beq.n	8004c28 <HAL_SPI_Init+0xa0>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c20:	d002      	beq.n	8004c28 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c6a:	ea42 0103 	orr.w	r1, r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c72:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	0c1b      	lsrs	r3, r3, #16
 8004c84:	f003 0204 	and.w	r2, r3, #4
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004ca4:	ea42 0103 	orr.w	r1, r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b082      	sub	sp, #8
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e049      	b.n	8004d74 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d106      	bne.n	8004cfa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7fc faab 	bl	8001250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	f000 f96f 	bl	8004ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d020      	beq.n	8004de0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01b      	beq.n	8004de0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f06f 0202 	mvn.w	r2, #2
 8004db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f8f3 	bl	8004fb2 <HAL_TIM_IC_CaptureCallback>
 8004dcc:	e005      	b.n	8004dda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f8e5 	bl	8004f9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f8f6 	bl	8004fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d020      	beq.n	8004e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01b      	beq.n	8004e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f06f 0204 	mvn.w	r2, #4
 8004dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2202      	movs	r2, #2
 8004e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f8cd 	bl	8004fb2 <HAL_TIM_IC_CaptureCallback>
 8004e18:	e005      	b.n	8004e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f8bf 	bl	8004f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f8d0 	bl	8004fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d020      	beq.n	8004e78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01b      	beq.n	8004e78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0208 	mvn.w	r2, #8
 8004e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f8a7 	bl	8004fb2 <HAL_TIM_IC_CaptureCallback>
 8004e64:	e005      	b.n	8004e72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f899 	bl	8004f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f8aa 	bl	8004fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f003 0310 	and.w	r3, r3, #16
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d020      	beq.n	8004ec4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f003 0310 	and.w	r3, r3, #16
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01b      	beq.n	8004ec4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0210 	mvn.w	r2, #16
 8004e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2208      	movs	r2, #8
 8004e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f881 	bl	8004fb2 <HAL_TIM_IC_CaptureCallback>
 8004eb0:	e005      	b.n	8004ebe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f873 	bl	8004f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f884 	bl	8004fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00c      	beq.n	8004ee8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d007      	beq.n	8004ee8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0201 	mvn.w	r2, #1
 8004ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f851 	bl	8004f8a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d104      	bne.n	8004efc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00c      	beq.n	8004f16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f91d 	bl	8005150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00c      	beq.n	8004f3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d007      	beq.n	8004f3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f915 	bl	8005164 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00c      	beq.n	8004f5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d007      	beq.n	8004f5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f83e 	bl	8004fda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f003 0320 	and.w	r3, r3, #32
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00c      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f06f 0220 	mvn.w	r2, #32
 8004f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f8dd 	bl	800513c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f82:	bf00      	nop
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
	...

08004ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a46      	ldr	r2, [pc, #280]	@ (800511c <TIM_Base_SetConfig+0x12c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d013      	beq.n	8005030 <TIM_Base_SetConfig+0x40>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800500e:	d00f      	beq.n	8005030 <TIM_Base_SetConfig+0x40>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a43      	ldr	r2, [pc, #268]	@ (8005120 <TIM_Base_SetConfig+0x130>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d00b      	beq.n	8005030 <TIM_Base_SetConfig+0x40>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a42      	ldr	r2, [pc, #264]	@ (8005124 <TIM_Base_SetConfig+0x134>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d007      	beq.n	8005030 <TIM_Base_SetConfig+0x40>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a41      	ldr	r2, [pc, #260]	@ (8005128 <TIM_Base_SetConfig+0x138>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d003      	beq.n	8005030 <TIM_Base_SetConfig+0x40>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a40      	ldr	r2, [pc, #256]	@ (800512c <TIM_Base_SetConfig+0x13c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d108      	bne.n	8005042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a35      	ldr	r2, [pc, #212]	@ (800511c <TIM_Base_SetConfig+0x12c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d01f      	beq.n	800508a <TIM_Base_SetConfig+0x9a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005050:	d01b      	beq.n	800508a <TIM_Base_SetConfig+0x9a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a32      	ldr	r2, [pc, #200]	@ (8005120 <TIM_Base_SetConfig+0x130>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d017      	beq.n	800508a <TIM_Base_SetConfig+0x9a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a31      	ldr	r2, [pc, #196]	@ (8005124 <TIM_Base_SetConfig+0x134>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d013      	beq.n	800508a <TIM_Base_SetConfig+0x9a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a30      	ldr	r2, [pc, #192]	@ (8005128 <TIM_Base_SetConfig+0x138>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00f      	beq.n	800508a <TIM_Base_SetConfig+0x9a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a2f      	ldr	r2, [pc, #188]	@ (800512c <TIM_Base_SetConfig+0x13c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d00b      	beq.n	800508a <TIM_Base_SetConfig+0x9a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a2e      	ldr	r2, [pc, #184]	@ (8005130 <TIM_Base_SetConfig+0x140>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d007      	beq.n	800508a <TIM_Base_SetConfig+0x9a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a2d      	ldr	r2, [pc, #180]	@ (8005134 <TIM_Base_SetConfig+0x144>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d003      	beq.n	800508a <TIM_Base_SetConfig+0x9a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a2c      	ldr	r2, [pc, #176]	@ (8005138 <TIM_Base_SetConfig+0x148>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d108      	bne.n	800509c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a16      	ldr	r2, [pc, #88]	@ (800511c <TIM_Base_SetConfig+0x12c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00f      	beq.n	80050e8 <TIM_Base_SetConfig+0xf8>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a18      	ldr	r2, [pc, #96]	@ (800512c <TIM_Base_SetConfig+0x13c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00b      	beq.n	80050e8 <TIM_Base_SetConfig+0xf8>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a17      	ldr	r2, [pc, #92]	@ (8005130 <TIM_Base_SetConfig+0x140>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d007      	beq.n	80050e8 <TIM_Base_SetConfig+0xf8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a16      	ldr	r2, [pc, #88]	@ (8005134 <TIM_Base_SetConfig+0x144>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d003      	beq.n	80050e8 <TIM_Base_SetConfig+0xf8>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a15      	ldr	r2, [pc, #84]	@ (8005138 <TIM_Base_SetConfig+0x148>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d103      	bne.n	80050f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d105      	bne.n	800510e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f023 0201 	bic.w	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	611a      	str	r2, [r3, #16]
  }
}
 800510e:	bf00      	nop
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40012c00 	.word	0x40012c00
 8005120:	40000400 	.word	0x40000400
 8005124:	40000800 	.word	0x40000800
 8005128:	40000c00 	.word	0x40000c00
 800512c:	40013400 	.word	0x40013400
 8005130:	40014000 	.word	0x40014000
 8005134:	40014400 	.word	0x40014400
 8005138:	40014800 	.word	0x40014800

0800513c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e042      	b.n	8005210 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005190:	2b00      	cmp	r3, #0
 8005192:	d106      	bne.n	80051a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7fb ff2d 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2224      	movs	r2, #36	@ 0x24
 80051a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0201 	bic.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fb24 	bl	8005810 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f825 	bl	8005218 <UART_SetConfig>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e01b      	b.n	8005210 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fba3 	bl	8005954 <UART_CheckIdleState>
 800520e:	4603      	mov	r3, r0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800521c:	b08c      	sub	sp, #48	@ 0x30
 800521e:	af00      	add	r7, sp, #0
 8005220:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	431a      	orrs	r2, r3
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	431a      	orrs	r2, r3
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	4313      	orrs	r3, r2
 800523e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	4baa      	ldr	r3, [pc, #680]	@ (80054f0 <UART_SetConfig+0x2d8>)
 8005248:	4013      	ands	r3, r2
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005250:	430b      	orrs	r3, r1
 8005252:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a9f      	ldr	r2, [pc, #636]	@ (80054f4 <UART_SetConfig+0x2dc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005280:	4313      	orrs	r3, r2
 8005282:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800528e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005298:	430b      	orrs	r3, r1
 800529a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a2:	f023 010f 	bic.w	r1, r3, #15
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a90      	ldr	r2, [pc, #576]	@ (80054f8 <UART_SetConfig+0x2e0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d125      	bne.n	8005308 <UART_SetConfig+0xf0>
 80052bc:	4b8f      	ldr	r3, [pc, #572]	@ (80054fc <UART_SetConfig+0x2e4>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d81a      	bhi.n	8005300 <UART_SetConfig+0xe8>
 80052ca:	a201      	add	r2, pc, #4	@ (adr r2, 80052d0 <UART_SetConfig+0xb8>)
 80052cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d0:	080052e1 	.word	0x080052e1
 80052d4:	080052f1 	.word	0x080052f1
 80052d8:	080052e9 	.word	0x080052e9
 80052dc:	080052f9 	.word	0x080052f9
 80052e0:	2301      	movs	r3, #1
 80052e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052e6:	e116      	b.n	8005516 <UART_SetConfig+0x2fe>
 80052e8:	2302      	movs	r3, #2
 80052ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ee:	e112      	b.n	8005516 <UART_SetConfig+0x2fe>
 80052f0:	2304      	movs	r3, #4
 80052f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052f6:	e10e      	b.n	8005516 <UART_SetConfig+0x2fe>
 80052f8:	2308      	movs	r3, #8
 80052fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052fe:	e10a      	b.n	8005516 <UART_SetConfig+0x2fe>
 8005300:	2310      	movs	r3, #16
 8005302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005306:	e106      	b.n	8005516 <UART_SetConfig+0x2fe>
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a7c      	ldr	r2, [pc, #496]	@ (8005500 <UART_SetConfig+0x2e8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d138      	bne.n	8005384 <UART_SetConfig+0x16c>
 8005312:	4b7a      	ldr	r3, [pc, #488]	@ (80054fc <UART_SetConfig+0x2e4>)
 8005314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005318:	f003 030c 	and.w	r3, r3, #12
 800531c:	2b0c      	cmp	r3, #12
 800531e:	d82d      	bhi.n	800537c <UART_SetConfig+0x164>
 8005320:	a201      	add	r2, pc, #4	@ (adr r2, 8005328 <UART_SetConfig+0x110>)
 8005322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005326:	bf00      	nop
 8005328:	0800535d 	.word	0x0800535d
 800532c:	0800537d 	.word	0x0800537d
 8005330:	0800537d 	.word	0x0800537d
 8005334:	0800537d 	.word	0x0800537d
 8005338:	0800536d 	.word	0x0800536d
 800533c:	0800537d 	.word	0x0800537d
 8005340:	0800537d 	.word	0x0800537d
 8005344:	0800537d 	.word	0x0800537d
 8005348:	08005365 	.word	0x08005365
 800534c:	0800537d 	.word	0x0800537d
 8005350:	0800537d 	.word	0x0800537d
 8005354:	0800537d 	.word	0x0800537d
 8005358:	08005375 	.word	0x08005375
 800535c:	2300      	movs	r3, #0
 800535e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005362:	e0d8      	b.n	8005516 <UART_SetConfig+0x2fe>
 8005364:	2302      	movs	r3, #2
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536a:	e0d4      	b.n	8005516 <UART_SetConfig+0x2fe>
 800536c:	2304      	movs	r3, #4
 800536e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005372:	e0d0      	b.n	8005516 <UART_SetConfig+0x2fe>
 8005374:	2308      	movs	r3, #8
 8005376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800537a:	e0cc      	b.n	8005516 <UART_SetConfig+0x2fe>
 800537c:	2310      	movs	r3, #16
 800537e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005382:	e0c8      	b.n	8005516 <UART_SetConfig+0x2fe>
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a5e      	ldr	r2, [pc, #376]	@ (8005504 <UART_SetConfig+0x2ec>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d125      	bne.n	80053da <UART_SetConfig+0x1c2>
 800538e:	4b5b      	ldr	r3, [pc, #364]	@ (80054fc <UART_SetConfig+0x2e4>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005394:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005398:	2b30      	cmp	r3, #48	@ 0x30
 800539a:	d016      	beq.n	80053ca <UART_SetConfig+0x1b2>
 800539c:	2b30      	cmp	r3, #48	@ 0x30
 800539e:	d818      	bhi.n	80053d2 <UART_SetConfig+0x1ba>
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d00a      	beq.n	80053ba <UART_SetConfig+0x1a2>
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d814      	bhi.n	80053d2 <UART_SetConfig+0x1ba>
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <UART_SetConfig+0x19a>
 80053ac:	2b10      	cmp	r3, #16
 80053ae:	d008      	beq.n	80053c2 <UART_SetConfig+0x1aa>
 80053b0:	e00f      	b.n	80053d2 <UART_SetConfig+0x1ba>
 80053b2:	2300      	movs	r3, #0
 80053b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053b8:	e0ad      	b.n	8005516 <UART_SetConfig+0x2fe>
 80053ba:	2302      	movs	r3, #2
 80053bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053c0:	e0a9      	b.n	8005516 <UART_SetConfig+0x2fe>
 80053c2:	2304      	movs	r3, #4
 80053c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053c8:	e0a5      	b.n	8005516 <UART_SetConfig+0x2fe>
 80053ca:	2308      	movs	r3, #8
 80053cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053d0:	e0a1      	b.n	8005516 <UART_SetConfig+0x2fe>
 80053d2:	2310      	movs	r3, #16
 80053d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053d8:	e09d      	b.n	8005516 <UART_SetConfig+0x2fe>
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a4a      	ldr	r2, [pc, #296]	@ (8005508 <UART_SetConfig+0x2f0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d125      	bne.n	8005430 <UART_SetConfig+0x218>
 80053e4:	4b45      	ldr	r3, [pc, #276]	@ (80054fc <UART_SetConfig+0x2e4>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80053ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80053f0:	d016      	beq.n	8005420 <UART_SetConfig+0x208>
 80053f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80053f4:	d818      	bhi.n	8005428 <UART_SetConfig+0x210>
 80053f6:	2b80      	cmp	r3, #128	@ 0x80
 80053f8:	d00a      	beq.n	8005410 <UART_SetConfig+0x1f8>
 80053fa:	2b80      	cmp	r3, #128	@ 0x80
 80053fc:	d814      	bhi.n	8005428 <UART_SetConfig+0x210>
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <UART_SetConfig+0x1f0>
 8005402:	2b40      	cmp	r3, #64	@ 0x40
 8005404:	d008      	beq.n	8005418 <UART_SetConfig+0x200>
 8005406:	e00f      	b.n	8005428 <UART_SetConfig+0x210>
 8005408:	2300      	movs	r3, #0
 800540a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800540e:	e082      	b.n	8005516 <UART_SetConfig+0x2fe>
 8005410:	2302      	movs	r3, #2
 8005412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005416:	e07e      	b.n	8005516 <UART_SetConfig+0x2fe>
 8005418:	2304      	movs	r3, #4
 800541a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800541e:	e07a      	b.n	8005516 <UART_SetConfig+0x2fe>
 8005420:	2308      	movs	r3, #8
 8005422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005426:	e076      	b.n	8005516 <UART_SetConfig+0x2fe>
 8005428:	2310      	movs	r3, #16
 800542a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800542e:	e072      	b.n	8005516 <UART_SetConfig+0x2fe>
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a35      	ldr	r2, [pc, #212]	@ (800550c <UART_SetConfig+0x2f4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d12a      	bne.n	8005490 <UART_SetConfig+0x278>
 800543a:	4b30      	ldr	r3, [pc, #192]	@ (80054fc <UART_SetConfig+0x2e4>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005440:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005444:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005448:	d01a      	beq.n	8005480 <UART_SetConfig+0x268>
 800544a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800544e:	d81b      	bhi.n	8005488 <UART_SetConfig+0x270>
 8005450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005454:	d00c      	beq.n	8005470 <UART_SetConfig+0x258>
 8005456:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800545a:	d815      	bhi.n	8005488 <UART_SetConfig+0x270>
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <UART_SetConfig+0x250>
 8005460:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005464:	d008      	beq.n	8005478 <UART_SetConfig+0x260>
 8005466:	e00f      	b.n	8005488 <UART_SetConfig+0x270>
 8005468:	2300      	movs	r3, #0
 800546a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800546e:	e052      	b.n	8005516 <UART_SetConfig+0x2fe>
 8005470:	2302      	movs	r3, #2
 8005472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005476:	e04e      	b.n	8005516 <UART_SetConfig+0x2fe>
 8005478:	2304      	movs	r3, #4
 800547a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800547e:	e04a      	b.n	8005516 <UART_SetConfig+0x2fe>
 8005480:	2308      	movs	r3, #8
 8005482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005486:	e046      	b.n	8005516 <UART_SetConfig+0x2fe>
 8005488:	2310      	movs	r3, #16
 800548a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800548e:	e042      	b.n	8005516 <UART_SetConfig+0x2fe>
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a17      	ldr	r2, [pc, #92]	@ (80054f4 <UART_SetConfig+0x2dc>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d13a      	bne.n	8005510 <UART_SetConfig+0x2f8>
 800549a:	4b18      	ldr	r3, [pc, #96]	@ (80054fc <UART_SetConfig+0x2e4>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80054a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054a8:	d01a      	beq.n	80054e0 <UART_SetConfig+0x2c8>
 80054aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054ae:	d81b      	bhi.n	80054e8 <UART_SetConfig+0x2d0>
 80054b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054b4:	d00c      	beq.n	80054d0 <UART_SetConfig+0x2b8>
 80054b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054ba:	d815      	bhi.n	80054e8 <UART_SetConfig+0x2d0>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <UART_SetConfig+0x2b0>
 80054c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054c4:	d008      	beq.n	80054d8 <UART_SetConfig+0x2c0>
 80054c6:	e00f      	b.n	80054e8 <UART_SetConfig+0x2d0>
 80054c8:	2300      	movs	r3, #0
 80054ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ce:	e022      	b.n	8005516 <UART_SetConfig+0x2fe>
 80054d0:	2302      	movs	r3, #2
 80054d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054d6:	e01e      	b.n	8005516 <UART_SetConfig+0x2fe>
 80054d8:	2304      	movs	r3, #4
 80054da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054de:	e01a      	b.n	8005516 <UART_SetConfig+0x2fe>
 80054e0:	2308      	movs	r3, #8
 80054e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e6:	e016      	b.n	8005516 <UART_SetConfig+0x2fe>
 80054e8:	2310      	movs	r3, #16
 80054ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ee:	e012      	b.n	8005516 <UART_SetConfig+0x2fe>
 80054f0:	cfff69f3 	.word	0xcfff69f3
 80054f4:	40008000 	.word	0x40008000
 80054f8:	40013800 	.word	0x40013800
 80054fc:	40021000 	.word	0x40021000
 8005500:	40004400 	.word	0x40004400
 8005504:	40004800 	.word	0x40004800
 8005508:	40004c00 	.word	0x40004c00
 800550c:	40005000 	.word	0x40005000
 8005510:	2310      	movs	r3, #16
 8005512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4aae      	ldr	r2, [pc, #696]	@ (80057d4 <UART_SetConfig+0x5bc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	f040 8097 	bne.w	8005650 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005522:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005526:	2b08      	cmp	r3, #8
 8005528:	d823      	bhi.n	8005572 <UART_SetConfig+0x35a>
 800552a:	a201      	add	r2, pc, #4	@ (adr r2, 8005530 <UART_SetConfig+0x318>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	08005555 	.word	0x08005555
 8005534:	08005573 	.word	0x08005573
 8005538:	0800555d 	.word	0x0800555d
 800553c:	08005573 	.word	0x08005573
 8005540:	08005563 	.word	0x08005563
 8005544:	08005573 	.word	0x08005573
 8005548:	08005573 	.word	0x08005573
 800554c:	08005573 	.word	0x08005573
 8005550:	0800556b 	.word	0x0800556b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005554:	f7fe fd14 	bl	8003f80 <HAL_RCC_GetPCLK1Freq>
 8005558:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800555a:	e010      	b.n	800557e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800555c:	4b9e      	ldr	r3, [pc, #632]	@ (80057d8 <UART_SetConfig+0x5c0>)
 800555e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005560:	e00d      	b.n	800557e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005562:	f7fe fc75 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 8005566:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005568:	e009      	b.n	800557e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800556a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800556e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005570:	e005      	b.n	800557e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800557c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8130 	beq.w	80057e6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558a:	4a94      	ldr	r2, [pc, #592]	@ (80057dc <UART_SetConfig+0x5c4>)
 800558c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005590:	461a      	mov	r2, r3
 8005592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005594:	fbb3 f3f2 	udiv	r3, r3, r2
 8005598:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	4613      	mov	r3, r2
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	4413      	add	r3, r2
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d305      	bcc.n	80055b6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d903      	bls.n	80055be <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80055bc:	e113      	b.n	80057e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	2200      	movs	r2, #0
 80055c2:	60bb      	str	r3, [r7, #8]
 80055c4:	60fa      	str	r2, [r7, #12]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ca:	4a84      	ldr	r2, [pc, #528]	@ (80057dc <UART_SetConfig+0x5c4>)
 80055cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	2200      	movs	r2, #0
 80055d4:	603b      	str	r3, [r7, #0]
 80055d6:	607a      	str	r2, [r7, #4]
 80055d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055e0:	f7fa fe0c 	bl	80001fc <__aeabi_uldivmod>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4610      	mov	r0, r2
 80055ea:	4619      	mov	r1, r3
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	020b      	lsls	r3, r1, #8
 80055f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055fa:	0202      	lsls	r2, r0, #8
 80055fc:	6979      	ldr	r1, [r7, #20]
 80055fe:	6849      	ldr	r1, [r1, #4]
 8005600:	0849      	lsrs	r1, r1, #1
 8005602:	2000      	movs	r0, #0
 8005604:	460c      	mov	r4, r1
 8005606:	4605      	mov	r5, r0
 8005608:	eb12 0804 	adds.w	r8, r2, r4
 800560c:	eb43 0905 	adc.w	r9, r3, r5
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	469a      	mov	sl, r3
 8005618:	4693      	mov	fp, r2
 800561a:	4652      	mov	r2, sl
 800561c:	465b      	mov	r3, fp
 800561e:	4640      	mov	r0, r8
 8005620:	4649      	mov	r1, r9
 8005622:	f7fa fdeb 	bl	80001fc <__aeabi_uldivmod>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4613      	mov	r3, r2
 800562c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005634:	d308      	bcc.n	8005648 <UART_SetConfig+0x430>
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800563c:	d204      	bcs.n	8005648 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6a3a      	ldr	r2, [r7, #32]
 8005644:	60da      	str	r2, [r3, #12]
 8005646:	e0ce      	b.n	80057e6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800564e:	e0ca      	b.n	80057e6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005658:	d166      	bne.n	8005728 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800565a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800565e:	2b08      	cmp	r3, #8
 8005660:	d827      	bhi.n	80056b2 <UART_SetConfig+0x49a>
 8005662:	a201      	add	r2, pc, #4	@ (adr r2, 8005668 <UART_SetConfig+0x450>)
 8005664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005668:	0800568d 	.word	0x0800568d
 800566c:	08005695 	.word	0x08005695
 8005670:	0800569d 	.word	0x0800569d
 8005674:	080056b3 	.word	0x080056b3
 8005678:	080056a3 	.word	0x080056a3
 800567c:	080056b3 	.word	0x080056b3
 8005680:	080056b3 	.word	0x080056b3
 8005684:	080056b3 	.word	0x080056b3
 8005688:	080056ab 	.word	0x080056ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800568c:	f7fe fc78 	bl	8003f80 <HAL_RCC_GetPCLK1Freq>
 8005690:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005692:	e014      	b.n	80056be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005694:	f7fe fc8a 	bl	8003fac <HAL_RCC_GetPCLK2Freq>
 8005698:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800569a:	e010      	b.n	80056be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800569c:	4b4e      	ldr	r3, [pc, #312]	@ (80057d8 <UART_SetConfig+0x5c0>)
 800569e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056a0:	e00d      	b.n	80056be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056a2:	f7fe fbd5 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 80056a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056a8:	e009      	b.n	80056be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056b0:	e005      	b.n	80056be <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80056bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 8090 	beq.w	80057e6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ca:	4a44      	ldr	r2, [pc, #272]	@ (80057dc <UART_SetConfig+0x5c4>)
 80056cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056d0:	461a      	mov	r2, r3
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80056d8:	005a      	lsls	r2, r3, #1
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	085b      	lsrs	r3, r3, #1
 80056e0:	441a      	add	r2, r3
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	2b0f      	cmp	r3, #15
 80056f0:	d916      	bls.n	8005720 <UART_SetConfig+0x508>
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056f8:	d212      	bcs.n	8005720 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	f023 030f 	bic.w	r3, r3, #15
 8005702:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	b29b      	uxth	r3, r3
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	b29a      	uxth	r2, r3
 8005710:	8bfb      	ldrh	r3, [r7, #30]
 8005712:	4313      	orrs	r3, r2
 8005714:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	8bfa      	ldrh	r2, [r7, #30]
 800571c:	60da      	str	r2, [r3, #12]
 800571e:	e062      	b.n	80057e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005726:	e05e      	b.n	80057e6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005728:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800572c:	2b08      	cmp	r3, #8
 800572e:	d828      	bhi.n	8005782 <UART_SetConfig+0x56a>
 8005730:	a201      	add	r2, pc, #4	@ (adr r2, 8005738 <UART_SetConfig+0x520>)
 8005732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005736:	bf00      	nop
 8005738:	0800575d 	.word	0x0800575d
 800573c:	08005765 	.word	0x08005765
 8005740:	0800576d 	.word	0x0800576d
 8005744:	08005783 	.word	0x08005783
 8005748:	08005773 	.word	0x08005773
 800574c:	08005783 	.word	0x08005783
 8005750:	08005783 	.word	0x08005783
 8005754:	08005783 	.word	0x08005783
 8005758:	0800577b 	.word	0x0800577b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800575c:	f7fe fc10 	bl	8003f80 <HAL_RCC_GetPCLK1Freq>
 8005760:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005762:	e014      	b.n	800578e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005764:	f7fe fc22 	bl	8003fac <HAL_RCC_GetPCLK2Freq>
 8005768:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800576a:	e010      	b.n	800578e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800576c:	4b1a      	ldr	r3, [pc, #104]	@ (80057d8 <UART_SetConfig+0x5c0>)
 800576e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005770:	e00d      	b.n	800578e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005772:	f7fe fb6d 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 8005776:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005778:	e009      	b.n	800578e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800577a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800577e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005780:	e005      	b.n	800578e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800578c:	bf00      	nop
    }

    if (pclk != 0U)
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	2b00      	cmp	r3, #0
 8005792:	d028      	beq.n	80057e6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005798:	4a10      	ldr	r2, [pc, #64]	@ (80057dc <UART_SetConfig+0x5c4>)
 800579a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800579e:	461a      	mov	r2, r3
 80057a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	085b      	lsrs	r3, r3, #1
 80057ac:	441a      	add	r2, r3
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	2b0f      	cmp	r3, #15
 80057bc:	d910      	bls.n	80057e0 <UART_SetConfig+0x5c8>
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057c4:	d20c      	bcs.n	80057e0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60da      	str	r2, [r3, #12]
 80057d0:	e009      	b.n	80057e6 <UART_SetConfig+0x5ce>
 80057d2:	bf00      	nop
 80057d4:	40008000 	.word	0x40008000
 80057d8:	00f42400 	.word	0x00f42400
 80057dc:	08005f0c 	.word	0x08005f0c
      }
      else
      {
        ret = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2200      	movs	r2, #0
 80057fa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	2200      	movs	r2, #0
 8005800:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005802:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005806:	4618      	mov	r0, r3
 8005808:	3730      	adds	r7, #48	@ 0x30
 800580a:	46bd      	mov	sp, r7
 800580c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a4:	f003 0310 	and.w	r3, r3, #16
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01a      	beq.n	8005926 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800590e:	d10a      	bne.n	8005926 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	605a      	str	r2, [r3, #4]
  }
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b098      	sub	sp, #96	@ 0x60
 8005958:	af02      	add	r7, sp, #8
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005964:	f7fb fd8c 	bl	8001480 <HAL_GetTick>
 8005968:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0308 	and.w	r3, r3, #8
 8005974:	2b08      	cmp	r3, #8
 8005976:	d12f      	bne.n	80059d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005978:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005980:	2200      	movs	r2, #0
 8005982:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f88e 	bl	8005aa8 <UART_WaitOnFlagUntilTimeout>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d022      	beq.n	80059d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	461a      	mov	r2, r3
 80059ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80059b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059b8:	e841 2300 	strex	r3, r2, [r1]
 80059bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e6      	bne.n	8005992 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e063      	b.n	8005aa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d149      	bne.n	8005a7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059ee:	2200      	movs	r2, #0
 80059f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f857 	bl	8005aa8 <UART_WaitOnFlagUntilTimeout>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d03c      	beq.n	8005a7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	e853 3f00 	ldrex	r3, [r3]
 8005a0c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a20:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a26:	e841 2300 	strex	r3, r2, [r1]
 8005a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1e6      	bne.n	8005a00 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3308      	adds	r3, #8
 8005a38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f023 0301 	bic.w	r3, r3, #1
 8005a48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3308      	adds	r3, #8
 8005a50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a52:	61fa      	str	r2, [r7, #28]
 8005a54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a56:	69b9      	ldr	r1, [r7, #24]
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	e841 2300 	strex	r3, r2, [r1]
 8005a5e:	617b      	str	r3, [r7, #20]
   return(result);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1e5      	bne.n	8005a32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e012      	b.n	8005aa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2220      	movs	r2, #32
 8005a86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3758      	adds	r7, #88	@ 0x58
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	603b      	str	r3, [r7, #0]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab8:	e04f      	b.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d04b      	beq.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ac2:	f7fb fcdd 	bl	8001480 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d302      	bcc.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e04e      	b.n	8005b7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d037      	beq.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b80      	cmp	r3, #128	@ 0x80
 8005aee:	d034      	beq.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b40      	cmp	r3, #64	@ 0x40
 8005af4:	d031      	beq.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	f003 0308 	and.w	r3, r3, #8
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d110      	bne.n	8005b26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2208      	movs	r2, #8
 8005b0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 f838 	bl	8005b82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2208      	movs	r2, #8
 8005b16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e029      	b.n	8005b7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69db      	ldr	r3, [r3, #28]
 8005b2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b34:	d111      	bne.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f81e 	bl	8005b82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e00f      	b.n	8005b7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69da      	ldr	r2, [r3, #28]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4013      	ands	r3, r2
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	bf0c      	ite	eq
 8005b6a:	2301      	moveq	r3, #1
 8005b6c:	2300      	movne	r3, #0
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	461a      	mov	r2, r3
 8005b72:	79fb      	ldrb	r3, [r7, #7]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d0a0      	beq.n	8005aba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b095      	sub	sp, #84	@ 0x54
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ba8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005baa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e6      	bne.n	8005b8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bd2:	f023 0301 	bic.w	r3, r3, #1
 8005bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3308      	adds	r3, #8
 8005bde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005be0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005be6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e3      	bne.n	8005bbc <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d118      	bne.n	8005c2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	e853 3f00 	ldrex	r3, [r3]
 8005c08:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f023 0310 	bic.w	r3, r3, #16
 8005c10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c1a:	61bb      	str	r3, [r7, #24]
 8005c1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	6979      	ldr	r1, [r7, #20]
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	613b      	str	r3, [r7, #16]
   return(result);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e6      	bne.n	8005bfc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005c42:	bf00      	nop
 8005c44:	3754      	adds	r7, #84	@ 0x54
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b085      	sub	sp, #20
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e027      	b.n	8005cb4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2224      	movs	r2, #36	@ 0x24
 8005c70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0201 	bic.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005c92:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e02d      	b.n	8005d34 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2224      	movs	r2, #36	@ 0x24
 8005ce4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0201 	bic.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f84f 	bl	8005db8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d50:	2302      	movs	r3, #2
 8005d52:	e02d      	b.n	8005db0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2224      	movs	r2, #36	@ 0x24
 8005d60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0201 	bic.w	r2, r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f811 	bl	8005db8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d108      	bne.n	8005dda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005dd8:	e031      	b.n	8005e3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005dda:	2308      	movs	r3, #8
 8005ddc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005dde:	2308      	movs	r3, #8
 8005de0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	0e5b      	lsrs	r3, r3, #25
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	f003 0307 	and.w	r3, r3, #7
 8005df0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	0f5b      	lsrs	r3, r3, #29
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e02:	7bbb      	ldrb	r3, [r7, #14]
 8005e04:	7b3a      	ldrb	r2, [r7, #12]
 8005e06:	4911      	ldr	r1, [pc, #68]	@ (8005e4c <UARTEx_SetNbDataToProcess+0x94>)
 8005e08:	5c8a      	ldrb	r2, [r1, r2]
 8005e0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e0e:	7b3a      	ldrb	r2, [r7, #12]
 8005e10:	490f      	ldr	r1, [pc, #60]	@ (8005e50 <UARTEx_SetNbDataToProcess+0x98>)
 8005e12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e14:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
 8005e22:	7b7a      	ldrb	r2, [r7, #13]
 8005e24:	4909      	ldr	r1, [pc, #36]	@ (8005e4c <UARTEx_SetNbDataToProcess+0x94>)
 8005e26:	5c8a      	ldrb	r2, [r1, r2]
 8005e28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e2c:	7b7a      	ldrb	r2, [r7, #13]
 8005e2e:	4908      	ldr	r1, [pc, #32]	@ (8005e50 <UARTEx_SetNbDataToProcess+0x98>)
 8005e30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e32:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005e3e:	bf00      	nop
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	08005f24 	.word	0x08005f24
 8005e50:	08005f2c 	.word	0x08005f2c

08005e54 <memset>:
 8005e54:	4402      	add	r2, r0
 8005e56:	4603      	mov	r3, r0
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d100      	bne.n	8005e5e <memset+0xa>
 8005e5c:	4770      	bx	lr
 8005e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e62:	e7f9      	b.n	8005e58 <memset+0x4>

08005e64 <__libc_init_array>:
 8005e64:	b570      	push	{r4, r5, r6, lr}
 8005e66:	4d0d      	ldr	r5, [pc, #52]	@ (8005e9c <__libc_init_array+0x38>)
 8005e68:	4c0d      	ldr	r4, [pc, #52]	@ (8005ea0 <__libc_init_array+0x3c>)
 8005e6a:	1b64      	subs	r4, r4, r5
 8005e6c:	10a4      	asrs	r4, r4, #2
 8005e6e:	2600      	movs	r6, #0
 8005e70:	42a6      	cmp	r6, r4
 8005e72:	d109      	bne.n	8005e88 <__libc_init_array+0x24>
 8005e74:	4d0b      	ldr	r5, [pc, #44]	@ (8005ea4 <__libc_init_array+0x40>)
 8005e76:	4c0c      	ldr	r4, [pc, #48]	@ (8005ea8 <__libc_init_array+0x44>)
 8005e78:	f000 f818 	bl	8005eac <_init>
 8005e7c:	1b64      	subs	r4, r4, r5
 8005e7e:	10a4      	asrs	r4, r4, #2
 8005e80:	2600      	movs	r6, #0
 8005e82:	42a6      	cmp	r6, r4
 8005e84:	d105      	bne.n	8005e92 <__libc_init_array+0x2e>
 8005e86:	bd70      	pop	{r4, r5, r6, pc}
 8005e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e8c:	4798      	blx	r3
 8005e8e:	3601      	adds	r6, #1
 8005e90:	e7ee      	b.n	8005e70 <__libc_init_array+0xc>
 8005e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e96:	4798      	blx	r3
 8005e98:	3601      	adds	r6, #1
 8005e9a:	e7f2      	b.n	8005e82 <__libc_init_array+0x1e>
 8005e9c:	08005f3c 	.word	0x08005f3c
 8005ea0:	08005f3c 	.word	0x08005f3c
 8005ea4:	08005f3c 	.word	0x08005f3c
 8005ea8:	08005f40 	.word	0x08005f40

08005eac <_init>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	bf00      	nop
 8005eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb2:	bc08      	pop	{r3}
 8005eb4:	469e      	mov	lr, r3
 8005eb6:	4770      	bx	lr

08005eb8 <_fini>:
 8005eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eba:	bf00      	nop
 8005ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ebe:	bc08      	pop	{r3}
 8005ec0:	469e      	mov	lr, r3
 8005ec2:	4770      	bx	lr
