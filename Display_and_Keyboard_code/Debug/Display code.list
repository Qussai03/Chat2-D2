
Display code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000844c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08008610  08008610  00009610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a0c  08008a0c  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008a0c  08008a0c  00009a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a14  08008a14  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a14  08008a14  00009a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a18  08008a18  00009a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20040000  08008a1c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200401d4  08008bf0  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2004050c  08008bf0  0000a50c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7bf  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213d  00000000  00000000  000189c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  0001ab00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008da  00000000  00000000  0001b690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a1b8  00000000  00000000  0001bf6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ded7  00000000  00000000  00046122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff272  00000000  00000000  00053ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015326b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed0  00000000  00000000  001532b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00157180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200401d4 	.word	0x200401d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080085f4 	.word	0x080085f4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200401d8 	.word	0x200401d8
 80001fc:	080085f4 	.word	0x080085f4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bec:	f000 b988 	b.w	8000f00 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	468e      	mov	lr, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	4688      	mov	r8, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d962      	bls.n	8000ce4 <__udivmoddi4+0xdc>
 8000c1e:	fab2 f682 	clz	r6, r2
 8000c22:	b14e      	cbz	r6, 8000c38 <__udivmoddi4+0x30>
 8000c24:	f1c6 0320 	rsb	r3, r6, #32
 8000c28:	fa01 f806 	lsl.w	r8, r1, r6
 8000c2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c30:	40b7      	lsls	r7, r6
 8000c32:	ea43 0808 	orr.w	r8, r3, r8
 8000c36:	40b4      	lsls	r4, r6
 8000c38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c44:	0c23      	lsrs	r3, r4, #16
 8000c46:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c5c:	f080 80ea 	bcs.w	8000e34 <__udivmoddi4+0x22c>
 8000c60:	429a      	cmp	r2, r3
 8000c62:	f240 80e7 	bls.w	8000e34 <__udivmoddi4+0x22c>
 8000c66:	3902      	subs	r1, #2
 8000c68:	443b      	add	r3, r7
 8000c6a:	1a9a      	subs	r2, r3, r2
 8000c6c:	b2a3      	uxth	r3, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c7a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c7e:	459c      	cmp	ip, r3
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0x8e>
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c88:	f080 80d6 	bcs.w	8000e38 <__udivmoddi4+0x230>
 8000c8c:	459c      	cmp	ip, r3
 8000c8e:	f240 80d3 	bls.w	8000e38 <__udivmoddi4+0x230>
 8000c92:	443b      	add	r3, r7
 8000c94:	3802      	subs	r0, #2
 8000c96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9a:	eba3 030c 	sub.w	r3, r3, ip
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11d      	cbz	r5, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40f3      	lsrs	r3, r6
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	e9c5 3200 	strd	r3, r2, [r5]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d905      	bls.n	8000cbe <__udivmoddi4+0xb6>
 8000cb2:	b10d      	cbz	r5, 8000cb8 <__udivmoddi4+0xb0>
 8000cb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e7f5      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cbe:	fab3 f183 	clz	r1, r3
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	d146      	bne.n	8000d54 <__udivmoddi4+0x14c>
 8000cc6:	4573      	cmp	r3, lr
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xc8>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 8105 	bhi.w	8000eda <__udivmoddi4+0x2d2>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	4690      	mov	r8, r2
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d0e5      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000cde:	e9c5 4800 	strd	r4, r8, [r5]
 8000ce2:	e7e2      	b.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f000 8090 	beq.w	8000e0a <__udivmoddi4+0x202>
 8000cea:	fab2 f682 	clz	r6, r2
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	f040 80a4 	bne.w	8000e3c <__udivmoddi4+0x234>
 8000cf4:	1a8a      	subs	r2, r1, r2
 8000cf6:	0c03      	lsrs	r3, r0, #16
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	b280      	uxth	r0, r0
 8000cfe:	b2bc      	uxth	r4, r7
 8000d00:	2101      	movs	r1, #1
 8000d02:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d06:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x11e>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x11c>
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	f200 80e0 	bhi.w	8000ee4 <__udivmoddi4+0x2dc>
 8000d24:	46c4      	mov	ip, r8
 8000d26:	1a9b      	subs	r3, r3, r2
 8000d28:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d2c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d30:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d34:	fb02 f404 	mul.w	r4, r2, r4
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x144>
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x142>
 8000d44:	429c      	cmp	r4, r3
 8000d46:	f200 80ca 	bhi.w	8000ede <__udivmoddi4+0x2d6>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	1b1b      	subs	r3, r3, r4
 8000d4e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d52:	e7a5      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	fa0e f401 	lsl.w	r4, lr, r1
 8000d64:	fa20 f306 	lsr.w	r3, r0, r6
 8000d68:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d6c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d70:	4323      	orrs	r3, r4
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	fa1f fc87 	uxth.w	ip, r7
 8000d7a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d7e:	0c1c      	lsrs	r4, r3, #16
 8000d80:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d84:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d88:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x1a0>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d9a:	f080 809c 	bcs.w	8000ed6 <__udivmoddi4+0x2ce>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f240 8099 	bls.w	8000ed6 <__udivmoddi4+0x2ce>
 8000da4:	3802      	subs	r0, #2
 8000da6:	443c      	add	r4, r7
 8000da8:	eba4 040e 	sub.w	r4, r4, lr
 8000dac:	fa1f fe83 	uxth.w	lr, r3
 8000db0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db4:	fb09 4413 	mls	r4, r9, r3, r4
 8000db8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dbc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc0:	45a4      	cmp	ip, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x1ce>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dca:	f080 8082 	bcs.w	8000ed2 <__udivmoddi4+0x2ca>
 8000dce:	45a4      	cmp	ip, r4
 8000dd0:	d97f      	bls.n	8000ed2 <__udivmoddi4+0x2ca>
 8000dd2:	3b02      	subs	r3, #2
 8000dd4:	443c      	add	r4, r7
 8000dd6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	fba0 ec02 	umull	lr, ip, r0, r2
 8000de2:	4564      	cmp	r4, ip
 8000de4:	4673      	mov	r3, lr
 8000de6:	46e1      	mov	r9, ip
 8000de8:	d362      	bcc.n	8000eb0 <__udivmoddi4+0x2a8>
 8000dea:	d05f      	beq.n	8000eac <__udivmoddi4+0x2a4>
 8000dec:	b15d      	cbz	r5, 8000e06 <__udivmoddi4+0x1fe>
 8000dee:	ebb8 0203 	subs.w	r2, r8, r3
 8000df2:	eb64 0409 	sbc.w	r4, r4, r9
 8000df6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfa:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfe:	431e      	orrs	r6, r3
 8000e00:	40cc      	lsrs	r4, r1
 8000e02:	e9c5 6400 	strd	r6, r4, [r5]
 8000e06:	2100      	movs	r1, #0
 8000e08:	e74f      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e0a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e0e:	0c01      	lsrs	r1, r0, #16
 8000e10:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e14:	b280      	uxth	r0, r0
 8000e16:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4638      	mov	r0, r7
 8000e1e:	463c      	mov	r4, r7
 8000e20:	46b8      	mov	r8, r7
 8000e22:	46be      	mov	lr, r7
 8000e24:	2620      	movs	r6, #32
 8000e26:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e2a:	eba2 0208 	sub.w	r2, r2, r8
 8000e2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e32:	e766      	b.n	8000d02 <__udivmoddi4+0xfa>
 8000e34:	4601      	mov	r1, r0
 8000e36:	e718      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e38:	4610      	mov	r0, r2
 8000e3a:	e72c      	b.n	8000c96 <__udivmoddi4+0x8e>
 8000e3c:	f1c6 0220 	rsb	r2, r6, #32
 8000e40:	fa2e f302 	lsr.w	r3, lr, r2
 8000e44:	40b7      	lsls	r7, r6
 8000e46:	40b1      	lsls	r1, r6
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e50:	430a      	orrs	r2, r1
 8000e52:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e56:	b2bc      	uxth	r4, r7
 8000e58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb08 f904 	mul.w	r9, r8, r4
 8000e66:	40b0      	lsls	r0, r6
 8000e68:	4589      	cmp	r9, r1
 8000e6a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e6e:	b280      	uxth	r0, r0
 8000e70:	d93e      	bls.n	8000ef0 <__udivmoddi4+0x2e8>
 8000e72:	1879      	adds	r1, r7, r1
 8000e74:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e78:	d201      	bcs.n	8000e7e <__udivmoddi4+0x276>
 8000e7a:	4589      	cmp	r9, r1
 8000e7c:	d81f      	bhi.n	8000ebe <__udivmoddi4+0x2b6>
 8000e7e:	eba1 0109 	sub.w	r1, r1, r9
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	4542      	cmp	r2, r8
 8000e96:	d229      	bcs.n	8000eec <__udivmoddi4+0x2e4>
 8000e98:	18ba      	adds	r2, r7, r2
 8000e9a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e9e:	d2c4      	bcs.n	8000e2a <__udivmoddi4+0x222>
 8000ea0:	4542      	cmp	r2, r8
 8000ea2:	d2c2      	bcs.n	8000e2a <__udivmoddi4+0x222>
 8000ea4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ea8:	443a      	add	r2, r7
 8000eaa:	e7be      	b.n	8000e2a <__udivmoddi4+0x222>
 8000eac:	45f0      	cmp	r8, lr
 8000eae:	d29d      	bcs.n	8000dec <__udivmoddi4+0x1e4>
 8000eb0:	ebbe 0302 	subs.w	r3, lr, r2
 8000eb4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000eb8:	3801      	subs	r0, #1
 8000eba:	46e1      	mov	r9, ip
 8000ebc:	e796      	b.n	8000dec <__udivmoddi4+0x1e4>
 8000ebe:	eba7 0909 	sub.w	r9, r7, r9
 8000ec2:	4449      	add	r1, r9
 8000ec4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ec8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ecc:	fb09 f804 	mul.w	r8, r9, r4
 8000ed0:	e7db      	b.n	8000e8a <__udivmoddi4+0x282>
 8000ed2:	4673      	mov	r3, lr
 8000ed4:	e77f      	b.n	8000dd6 <__udivmoddi4+0x1ce>
 8000ed6:	4650      	mov	r0, sl
 8000ed8:	e766      	b.n	8000da8 <__udivmoddi4+0x1a0>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e6fd      	b.n	8000cda <__udivmoddi4+0xd2>
 8000ede:	443b      	add	r3, r7
 8000ee0:	3a02      	subs	r2, #2
 8000ee2:	e733      	b.n	8000d4c <__udivmoddi4+0x144>
 8000ee4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee8:	443b      	add	r3, r7
 8000eea:	e71c      	b.n	8000d26 <__udivmoddi4+0x11e>
 8000eec:	4649      	mov	r1, r9
 8000eee:	e79c      	b.n	8000e2a <__udivmoddi4+0x222>
 8000ef0:	eba1 0109 	sub.w	r1, r1, r9
 8000ef4:	46c4      	mov	ip, r8
 8000ef6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efa:	fb09 f804 	mul.w	r8, r9, r4
 8000efe:	e7c4      	b.n	8000e8a <__udivmoddi4+0x282>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <command>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

void command(char i){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]

	data(i); //put data on output Port
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f837 	bl	8000f84 <data>
	//D_I =0; //D/I=LOW : send instruction
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2104      	movs	r1, #4
 8000f1a:	4809      	ldr	r0, [pc, #36]	@ (8000f40 <command+0x3c>)
 8000f1c:	f001 ff26 	bl	8002d6c <HAL_GPIO_WritePin>
	//R_W =0; //R/W=LOW : Write
	Nybble(); //Send lower 4 bits
 8000f20:	f000 f86a 	bl	8000ff8 <Nybble>
	i = i<<4; //Shift over by 4 bits
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	71fb      	strb	r3, [r7, #7]
	data(i); //put data on output Port
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f829 	bl	8000f84 <data>
	Nybble(); //Send upper 4 bits
 8000f32:	f000 f861 	bl	8000ff8 <Nybble>

}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	48000400 	.word	0x48000400

08000f44 <write>:

void write(char i){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]

	data(i); //put data on output Port
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 f817 	bl	8000f84 <data>
	//D_I =1; //D/I=HIGH : send data
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	2104      	movs	r1, #4
 8000f5a:	4809      	ldr	r0, [pc, #36]	@ (8000f80 <write+0x3c>)
 8000f5c:	f001 ff06 	bl	8002d6c <HAL_GPIO_WritePin>
	//R_W =0; //R/W=LOW : Write
	Nybble(); //Clock lower 4 bits
 8000f60:	f000 f84a 	bl	8000ff8 <Nybble>
	i = i<<4; //Shift over by 4 bits
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	71fb      	strb	r3, [r7, #7]
	data(i); //put data on output Port
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f809 	bl	8000f84 <data>
	Nybble(); //Clock upper 4 bits
 8000f72:	f000 f841 	bl	8000ff8 <Nybble>

}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	48000400 	.word	0x48000400

08000f84 <data>:
		str++;

	}
}

void data(char i){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, (i >> 4) & 1);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fa0:	4813      	ldr	r0, [pc, #76]	@ (8000ff0 <data+0x6c>)
 8000fa2:	f001 fee3 	bl	8002d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, (i >> 5) & 1);
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	095b      	lsrs	r3, r3, #5
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fb8:	480e      	ldr	r0, [pc, #56]	@ (8000ff4 <data+0x70>)
 8000fba:	f001 fed7 	bl	8002d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, (i >> 6) & 1);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	099b      	lsrs	r3, r3, #6
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	461a      	mov	r2, r3
 8000fcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fd0:	4808      	ldr	r0, [pc, #32]	@ (8000ff4 <data+0x70>)
 8000fd2:	f001 fecb 	bl	8002d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, (i >> 7) & 1);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	09db      	lsrs	r3, r3, #7
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	461a      	mov	r2, r3
 8000fde:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fe2:	4803      	ldr	r0, [pc, #12]	@ (8000ff0 <data+0x6c>)
 8000fe4:	f001 fec2 	bl	8002d6c <HAL_GPIO_WritePin>

}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	48001400 	.word	0x48001400
 8000ff4:	48001000 	.word	0x48001000

08000ff8 <Nybble>:

void Nybble(){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2140      	movs	r1, #64	@ 0x40
 8001000:	4806      	ldr	r0, [pc, #24]	@ (800101c <Nybble+0x24>)
 8001002:	f001 feb3 	bl	8002d6c <HAL_GPIO_WritePin>
	HAL_Delay(1); //enable pulse width >= 300ns
 8001006:	2001      	movs	r0, #1
 8001008:	f001 fb16 	bl	8002638 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0); //enable falling edge
 800100c:	2200      	movs	r2, #0
 800100e:	2140      	movs	r1, #64	@ 0x40
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <Nybble+0x24>)
 8001012:	f001 feab 	bl	8002d6c <HAL_GPIO_WritePin>

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	48000400 	.word	0x48000400

08001020 <lcd_init>:

void lcd_init(){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

	data(0);
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff ffad 	bl	8000f84 <data>
	HAL_Delay(100); //Wait >40 msec after power is applied
 800102a:	2064      	movs	r0, #100	@ 0x64
 800102c:	f001 fb04 	bl	8002638 <HAL_Delay>
	data(0x30); //put 0x30 on the output port
 8001030:	2030      	movs	r0, #48	@ 0x30
 8001032:	f7ff ffa7 	bl	8000f84 <data>
	HAL_Delay(30); //must wait 5ms, busy flag not available
 8001036:	201e      	movs	r0, #30
 8001038:	f001 fafe 	bl	8002638 <HAL_Delay>
	Nybble(); //command 0x30 = Wake up
 800103c:	f7ff ffdc 	bl	8000ff8 <Nybble>
	HAL_Delay(10); //must wait 160us, busy flag not available
 8001040:	200a      	movs	r0, #10
 8001042:	f001 faf9 	bl	8002638 <HAL_Delay>
	Nybble(); //command 0x30 = Wake up #2
 8001046:	f7ff ffd7 	bl	8000ff8 <Nybble>
	HAL_Delay(10); //must wait 160us, busy flag not available
 800104a:	200a      	movs	r0, #10
 800104c:	f001 faf4 	bl	8002638 <HAL_Delay>
	Nybble(); //command 0x30 = Wake up #3
 8001050:	f7ff ffd2 	bl	8000ff8 <Nybble>
	HAL_Delay(10); //can check busy flag now instead of delay
 8001054:	200a      	movs	r0, #10
 8001056:	f001 faef 	bl	8002638 <HAL_Delay>
	data(0x20); //put 0x20 on the output port
 800105a:	2020      	movs	r0, #32
 800105c:	f7ff ff92 	bl	8000f84 <data>
	Nybble(); //Function set: 4-bit interface
 8001060:	f7ff ffca 	bl	8000ff8 <Nybble>
	command(0x28); //Function set: 4-bit/2-line
 8001064:	2028      	movs	r0, #40	@ 0x28
 8001066:	f7ff ff4d 	bl	8000f04 <command>
	command(0x10); //Set cursor
 800106a:	2010      	movs	r0, #16
 800106c:	f7ff ff4a 	bl	8000f04 <command>
	command(0x0F); //Display ON; Blinking cursor
 8001070:	200f      	movs	r0, #15
 8001072:	f7ff ff47 	bl	8000f04 <command>
	command(0x06); //Entry Mode set
 8001076:	2006      	movs	r0, #6
 8001078:	f7ff ff44 	bl	8000f04 <command>

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <process_keyboard>:
char keyChar = 0;
char promptBuffer[128];
uint16_t promptIndex = 0;
bool screen_limit = false;

void process_keyboard(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0


	if (ps2_data_ready == false) return;
 8001086:	4bc0      	ldr	r3, [pc, #768]	@ (8001388 <process_keyboard+0x308>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 841e 	beq.w	80018cc <process_keyboard+0x84c>
	uint8_t current_code = ps2_scan_code;
 8001090:	4bbe      	ldr	r3, [pc, #760]	@ (800138c <process_keyboard+0x30c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	71fb      	strb	r3, [r7, #7]


	// Handle special codes
	if (current_code == 0xF0) {
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2bf0      	cmp	r3, #240	@ 0xf0
 800109a:	d107      	bne.n	80010ac <process_keyboard+0x2c>
		ps2_state =	PS2_BREAK_PENDING;
 800109c:	4bbc      	ldr	r3, [pc, #752]	@ (8001390 <process_keyboard+0x310>)
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
		ps2_data_ready = false;
 80010a2:	4bb9      	ldr	r3, [pc, #740]	@ (8001388 <process_keyboard+0x308>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]

		return;
 80010a8:	f000 bc11 	b.w	80018ce <process_keyboard+0x84e>
	}
	if (current_code == 0xE0) {
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2be0      	cmp	r3, #224	@ 0xe0
 80010b0:	d107      	bne.n	80010c2 <process_keyboard+0x42>
		ps2_state =	PS2_EXTENDED_PENDING;
 80010b2:	4bb7      	ldr	r3, [pc, #732]	@ (8001390 <process_keyboard+0x310>)
 80010b4:	2202      	movs	r2, #2
 80010b6:	701a      	strb	r2, [r3, #0]
		ps2_data_ready = false;
 80010b8:	4bb3      	ldr	r3, [pc, #716]	@ (8001388 <process_keyboard+0x308>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]

		return;
 80010be:	f000 bc06 	b.w	80018ce <process_keyboard+0x84e>
	}

	// If we're processing the second byte of a break sequence, ignore it
	if (ps2_state == PS2_BREAK_PENDING) {
 80010c2:	4bb3      	ldr	r3, [pc, #716]	@ (8001390 <process_keyboard+0x310>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d106      	bne.n	80010da <process_keyboard+0x5a>
		ps2_state = PS2_IDLE;
 80010cc:	4bb0      	ldr	r3, [pc, #704]	@ (8001390 <process_keyboard+0x310>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
		ps2_data_ready = false;
 80010d2:	4bad      	ldr	r3, [pc, #692]	@ (8001388 <process_keyboard+0x308>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]

		return;
 80010d8:	e3f9      	b.n	80018ce <process_keyboard+0x84e>
	}

	//printf("Scan code: 0x%02X\n", current_code);

    uint32_t now = HAL_GetTick();
 80010da:	f001 faa1 	bl	8002620 <HAL_GetTick>
 80010de:	6038      	str	r0, [r7, #0]
    if ((current_code == last_key_code) &&
 80010e0:	4bac      	ldr	r3, [pc, #688]	@ (8001394 <process_keyboard+0x314>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	79fa      	ldrb	r2, [r7, #7]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d109      	bne.n	8001100 <process_keyboard+0x80>
        ((now - last_key_timestamp) < REPEAT_FILTER_MS)) {
 80010ec:	4baa      	ldr	r3, [pc, #680]	@ (8001398 <process_keyboard+0x318>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	1ad3      	subs	r3, r2, r3
    if ((current_code == last_key_code) &&
 80010f4:	2b9f      	cmp	r3, #159	@ 0x9f
 80010f6:	d803      	bhi.n	8001100 <process_keyboard+0x80>
        // Ignore this duplicate event.
    	ps2_data_ready = false;
 80010f8:	4ba3      	ldr	r3, [pc, #652]	@ (8001388 <process_keyboard+0x308>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]

        return;
 80010fe:	e3e6      	b.n	80018ce <process_keyboard+0x84e>
    }

    last_key_timestamp = now;
 8001100:	4aa5      	ldr	r2, [pc, #660]	@ (8001398 <process_keyboard+0x318>)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	6013      	str	r3, [r2, #0]
    last_key_code = current_code;
 8001106:	4aa3      	ldr	r2, [pc, #652]	@ (8001394 <process_keyboard+0x314>)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	7013      	strb	r3, [r2, #0]

	switch (current_code) {
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	3b0e      	subs	r3, #14
 8001110:	2b58      	cmp	r3, #88	@ 0x58
 8001112:	f200 82f8 	bhi.w	8001706 <process_keyboard+0x686>
 8001116:	a201      	add	r2, pc, #4	@ (adr r2, 800111c <process_keyboard+0x9c>)
 8001118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111c:	0800162d 	.word	0x0800162d
 8001120:	08001707 	.word	0x08001707
 8001124:	08001707 	.word	0x08001707
 8001128:	08001707 	.word	0x08001707
 800112c:	08001707 	.word	0x08001707
 8001130:	08001707 	.word	0x08001707
 8001134:	08001707 	.word	0x08001707
 8001138:	0800141d 	.word	0x0800141d
 800113c:	0800150d 	.word	0x0800150d
 8001140:	08001707 	.word	0x08001707
 8001144:	08001707 	.word	0x08001707
 8001148:	08001707 	.word	0x08001707
 800114c:	080014f5 	.word	0x080014f5
 8001150:	0800144d 	.word	0x0800144d
 8001154:	08001281 	.word	0x08001281
 8001158:	080014ad 	.word	0x080014ad
 800115c:	08001525 	.word	0x08001525
 8001160:	08001707 	.word	0x08001707
 8001164:	08001707 	.word	0x08001707
 8001168:	080012b1 	.word	0x080012b1
 800116c:	080014c5 	.word	0x080014c5
 8001170:	080012c9 	.word	0x080012c9
 8001174:	080012e1 	.word	0x080012e1
 8001178:	08001555 	.word	0x08001555
 800117c:	0800153d 	.word	0x0800153d
 8001180:	08001707 	.word	0x08001707
 8001184:	08001707 	.word	0x08001707
 8001188:	080016ed 	.word	0x080016ed
 800118c:	08001495 	.word	0x08001495
 8001190:	080012f9 	.word	0x080012f9
 8001194:	08001465 	.word	0x08001465
 8001198:	08001435 	.word	0x08001435
 800119c:	0800156d 	.word	0x0800156d
 80011a0:	08001707 	.word	0x08001707
 80011a4:	08001707 	.word	0x08001707
 80011a8:	080013d5 	.word	0x080013d5
 80011ac:	08001299 	.word	0x08001299
 80011b0:	08001329 	.word	0x08001329
 80011b4:	08001311 	.word	0x08001311
 80011b8:	080014dd 	.word	0x080014dd
 80011bc:	08001585 	.word	0x08001585
 80011c0:	08001707 	.word	0x08001707
 80011c4:	08001707 	.word	0x08001707
 80011c8:	08001707 	.word	0x08001707
 80011cc:	080013bd 	.word	0x080013bd
 80011d0:	08001359 	.word	0x08001359
 80011d4:	0800147d 	.word	0x0800147d
 80011d8:	0800159d 	.word	0x0800159d
 80011dc:	080015b5 	.word	0x080015b5
 80011e0:	08001707 	.word	0x08001707
 80011e4:	08001707 	.word	0x08001707
 80011e8:	080015fd 	.word	0x080015fd
 80011ec:	08001371 	.word	0x08001371
 80011f0:	08001341 	.word	0x08001341
 80011f4:	080013ed 	.word	0x080013ed
 80011f8:	080015e5 	.word	0x080015e5
 80011fc:	080015cd 	.word	0x080015cd
 8001200:	08001707 	.word	0x08001707
 8001204:	08001707 	.word	0x08001707
 8001208:	08001615 	.word	0x08001615
 800120c:	08001707 	.word	0x08001707
 8001210:	080013a5 	.word	0x080013a5
 8001214:	08001707 	.word	0x08001707
 8001218:	08001405 	.word	0x08001405
 800121c:	0800164d 	.word	0x0800164d
 8001220:	08001707 	.word	0x08001707
 8001224:	08001707 	.word	0x08001707
 8001228:	08001707 	.word	0x08001707
 800122c:	08001707 	.word	0x08001707
 8001230:	08001707 	.word	0x08001707
 8001234:	080016bd 	.word	0x080016bd
 8001238:	08001665 	.word	0x08001665
 800123c:	08001707 	.word	0x08001707
 8001240:	08001707 	.word	0x08001707
 8001244:	08001707 	.word	0x08001707
 8001248:	08001707 	.word	0x08001707
 800124c:	0800167d 	.word	0x0800167d
 8001250:	080016d5 	.word	0x080016d5
 8001254:	08001707 	.word	0x08001707
 8001258:	08001707 	.word	0x08001707
 800125c:	08001707 	.word	0x08001707
 8001260:	08001707 	.word	0x08001707
 8001264:	08001707 	.word	0x08001707
 8001268:	08001707 	.word	0x08001707
 800126c:	08001707 	.word	0x08001707
 8001270:	08001707 	.word	0x08001707
 8001274:	08001707 	.word	0x08001707
 8001278:	08001707 	.word	0x08001707
 800127c:	08001691 	.word	0x08001691
		case 0x1C: keyChar = 'A'; write('A'); counter++; break;
 8001280:	4b46      	ldr	r3, [pc, #280]	@ (800139c <process_keyboard+0x31c>)
 8001282:	2241      	movs	r2, #65	@ 0x41
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	2041      	movs	r0, #65	@ 0x41
 8001288:	f7ff fe5c 	bl	8000f44 <write>
 800128c:	4b44      	ldr	r3, [pc, #272]	@ (80013a0 <process_keyboard+0x320>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	4a43      	ldr	r2, [pc, #268]	@ (80013a0 <process_keyboard+0x320>)
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e236      	b.n	8001706 <process_keyboard+0x686>
	    case 0x32: keyChar = 'B'; write('B'); counter++; break;
 8001298:	4b40      	ldr	r3, [pc, #256]	@ (800139c <process_keyboard+0x31c>)
 800129a:	2242      	movs	r2, #66	@ 0x42
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	2042      	movs	r0, #66	@ 0x42
 80012a0:	f7ff fe50 	bl	8000f44 <write>
 80012a4:	4b3e      	ldr	r3, [pc, #248]	@ (80013a0 <process_keyboard+0x320>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	4a3d      	ldr	r2, [pc, #244]	@ (80013a0 <process_keyboard+0x320>)
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e22a      	b.n	8001706 <process_keyboard+0x686>
	    case 0x21: keyChar = 'C'; write('C'); counter++; break;
 80012b0:	4b3a      	ldr	r3, [pc, #232]	@ (800139c <process_keyboard+0x31c>)
 80012b2:	2243      	movs	r2, #67	@ 0x43
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	2043      	movs	r0, #67	@ 0x43
 80012b8:	f7ff fe44 	bl	8000f44 <write>
 80012bc:	4b38      	ldr	r3, [pc, #224]	@ (80013a0 <process_keyboard+0x320>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a37      	ldr	r2, [pc, #220]	@ (80013a0 <process_keyboard+0x320>)
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e21e      	b.n	8001706 <process_keyboard+0x686>
	    case 0x23: keyChar = 'D'; write('D'); counter++; break;
 80012c8:	4b34      	ldr	r3, [pc, #208]	@ (800139c <process_keyboard+0x31c>)
 80012ca:	2244      	movs	r2, #68	@ 0x44
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	2044      	movs	r0, #68	@ 0x44
 80012d0:	f7ff fe38 	bl	8000f44 <write>
 80012d4:	4b32      	ldr	r3, [pc, #200]	@ (80013a0 <process_keyboard+0x320>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	4a31      	ldr	r2, [pc, #196]	@ (80013a0 <process_keyboard+0x320>)
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e212      	b.n	8001706 <process_keyboard+0x686>
	    case 0x24: keyChar = 'E'; write('E'); counter++; break;
 80012e0:	4b2e      	ldr	r3, [pc, #184]	@ (800139c <process_keyboard+0x31c>)
 80012e2:	2245      	movs	r2, #69	@ 0x45
 80012e4:	701a      	strb	r2, [r3, #0]
 80012e6:	2045      	movs	r0, #69	@ 0x45
 80012e8:	f7ff fe2c 	bl	8000f44 <write>
 80012ec:	4b2c      	ldr	r3, [pc, #176]	@ (80013a0 <process_keyboard+0x320>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	4a2b      	ldr	r2, [pc, #172]	@ (80013a0 <process_keyboard+0x320>)
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e206      	b.n	8001706 <process_keyboard+0x686>
	    case 0x2B: keyChar = 'F'; write('F'); counter++; break;
 80012f8:	4b28      	ldr	r3, [pc, #160]	@ (800139c <process_keyboard+0x31c>)
 80012fa:	2246      	movs	r2, #70	@ 0x46
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	2046      	movs	r0, #70	@ 0x46
 8001300:	f7ff fe20 	bl	8000f44 <write>
 8001304:	4b26      	ldr	r3, [pc, #152]	@ (80013a0 <process_keyboard+0x320>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	4a25      	ldr	r2, [pc, #148]	@ (80013a0 <process_keyboard+0x320>)
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e1fa      	b.n	8001706 <process_keyboard+0x686>
	    case 0x34: keyChar = 'G'; write('G'); counter++; break;
 8001310:	4b22      	ldr	r3, [pc, #136]	@ (800139c <process_keyboard+0x31c>)
 8001312:	2247      	movs	r2, #71	@ 0x47
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	2047      	movs	r0, #71	@ 0x47
 8001318:	f7ff fe14 	bl	8000f44 <write>
 800131c:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <process_keyboard+0x320>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	4a1f      	ldr	r2, [pc, #124]	@ (80013a0 <process_keyboard+0x320>)
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e1ee      	b.n	8001706 <process_keyboard+0x686>
	    case 0x33: keyChar = 'H'; write('H'); counter++; break;
 8001328:	4b1c      	ldr	r3, [pc, #112]	@ (800139c <process_keyboard+0x31c>)
 800132a:	2248      	movs	r2, #72	@ 0x48
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	2048      	movs	r0, #72	@ 0x48
 8001330:	f7ff fe08 	bl	8000f44 <write>
 8001334:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <process_keyboard+0x320>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	4a19      	ldr	r2, [pc, #100]	@ (80013a0 <process_keyboard+0x320>)
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e1e2      	b.n	8001706 <process_keyboard+0x686>
	    case 0x43: keyChar = 'I'; write('I'); counter++; break;
 8001340:	4b16      	ldr	r3, [pc, #88]	@ (800139c <process_keyboard+0x31c>)
 8001342:	2249      	movs	r2, #73	@ 0x49
 8001344:	701a      	strb	r2, [r3, #0]
 8001346:	2049      	movs	r0, #73	@ 0x49
 8001348:	f7ff fdfc 	bl	8000f44 <write>
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <process_keyboard+0x320>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	4a13      	ldr	r2, [pc, #76]	@ (80013a0 <process_keyboard+0x320>)
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e1d6      	b.n	8001706 <process_keyboard+0x686>
	    case 0x3B: keyChar = 'J'; write('J'); counter++; break;
 8001358:	4b10      	ldr	r3, [pc, #64]	@ (800139c <process_keyboard+0x31c>)
 800135a:	224a      	movs	r2, #74	@ 0x4a
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	204a      	movs	r0, #74	@ 0x4a
 8001360:	f7ff fdf0 	bl	8000f44 <write>
 8001364:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <process_keyboard+0x320>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	4a0d      	ldr	r2, [pc, #52]	@ (80013a0 <process_keyboard+0x320>)
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e1ca      	b.n	8001706 <process_keyboard+0x686>
	    case 0x42: keyChar = 'K'; write('K'); counter++; break;
 8001370:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <process_keyboard+0x31c>)
 8001372:	224b      	movs	r2, #75	@ 0x4b
 8001374:	701a      	strb	r2, [r3, #0]
 8001376:	204b      	movs	r0, #75	@ 0x4b
 8001378:	f7ff fde4 	bl	8000f44 <write>
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <process_keyboard+0x320>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	4a07      	ldr	r2, [pc, #28]	@ (80013a0 <process_keyboard+0x320>)
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e1be      	b.n	8001706 <process_keyboard+0x686>
 8001388:	200401f0 	.word	0x200401f0
 800138c:	200401f4 	.word	0x200401f4
 8001390:	200401fc 	.word	0x200401fc
 8001394:	20040204 	.word	0x20040204
 8001398:	20040200 	.word	0x20040200
 800139c:	20040205 	.word	0x20040205
 80013a0:	200401f8 	.word	0x200401f8
	    case 0x4B: keyChar = 'L'; write('L'); counter++; break;
 80013a4:	4ba7      	ldr	r3, [pc, #668]	@ (8001644 <process_keyboard+0x5c4>)
 80013a6:	224c      	movs	r2, #76	@ 0x4c
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	204c      	movs	r0, #76	@ 0x4c
 80013ac:	f7ff fdca 	bl	8000f44 <write>
 80013b0:	4ba5      	ldr	r3, [pc, #660]	@ (8001648 <process_keyboard+0x5c8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	4aa4      	ldr	r2, [pc, #656]	@ (8001648 <process_keyboard+0x5c8>)
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e1a4      	b.n	8001706 <process_keyboard+0x686>
	    case 0x3A: keyChar = 'M'; write('M'); counter++; break;
 80013bc:	4ba1      	ldr	r3, [pc, #644]	@ (8001644 <process_keyboard+0x5c4>)
 80013be:	224d      	movs	r2, #77	@ 0x4d
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	204d      	movs	r0, #77	@ 0x4d
 80013c4:	f7ff fdbe 	bl	8000f44 <write>
 80013c8:	4b9f      	ldr	r3, [pc, #636]	@ (8001648 <process_keyboard+0x5c8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3301      	adds	r3, #1
 80013ce:	4a9e      	ldr	r2, [pc, #632]	@ (8001648 <process_keyboard+0x5c8>)
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e198      	b.n	8001706 <process_keyboard+0x686>
	    case 0x31: keyChar = 'N'; write('N'); counter++; break;
 80013d4:	4b9b      	ldr	r3, [pc, #620]	@ (8001644 <process_keyboard+0x5c4>)
 80013d6:	224e      	movs	r2, #78	@ 0x4e
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	204e      	movs	r0, #78	@ 0x4e
 80013dc:	f7ff fdb2 	bl	8000f44 <write>
 80013e0:	4b99      	ldr	r3, [pc, #612]	@ (8001648 <process_keyboard+0x5c8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	4a98      	ldr	r2, [pc, #608]	@ (8001648 <process_keyboard+0x5c8>)
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e18c      	b.n	8001706 <process_keyboard+0x686>
	    case 0x44: keyChar = 'O'; write('O'); counter++; break;
 80013ec:	4b95      	ldr	r3, [pc, #596]	@ (8001644 <process_keyboard+0x5c4>)
 80013ee:	224f      	movs	r2, #79	@ 0x4f
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	204f      	movs	r0, #79	@ 0x4f
 80013f4:	f7ff fda6 	bl	8000f44 <write>
 80013f8:	4b93      	ldr	r3, [pc, #588]	@ (8001648 <process_keyboard+0x5c8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	4a92      	ldr	r2, [pc, #584]	@ (8001648 <process_keyboard+0x5c8>)
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e180      	b.n	8001706 <process_keyboard+0x686>
	    case 0x4D: keyChar = 'P'; write('P'); counter++; break;
 8001404:	4b8f      	ldr	r3, [pc, #572]	@ (8001644 <process_keyboard+0x5c4>)
 8001406:	2250      	movs	r2, #80	@ 0x50
 8001408:	701a      	strb	r2, [r3, #0]
 800140a:	2050      	movs	r0, #80	@ 0x50
 800140c:	f7ff fd9a 	bl	8000f44 <write>
 8001410:	4b8d      	ldr	r3, [pc, #564]	@ (8001648 <process_keyboard+0x5c8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	4a8c      	ldr	r2, [pc, #560]	@ (8001648 <process_keyboard+0x5c8>)
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e174      	b.n	8001706 <process_keyboard+0x686>
	    case 0x15: keyChar = 'Q'; write('Q'); counter++; break;
 800141c:	4b89      	ldr	r3, [pc, #548]	@ (8001644 <process_keyboard+0x5c4>)
 800141e:	2251      	movs	r2, #81	@ 0x51
 8001420:	701a      	strb	r2, [r3, #0]
 8001422:	2051      	movs	r0, #81	@ 0x51
 8001424:	f7ff fd8e 	bl	8000f44 <write>
 8001428:	4b87      	ldr	r3, [pc, #540]	@ (8001648 <process_keyboard+0x5c8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	4a86      	ldr	r2, [pc, #536]	@ (8001648 <process_keyboard+0x5c8>)
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e168      	b.n	8001706 <process_keyboard+0x686>
	    case 0x2D: keyChar = 'R'; write('R'); counter++; break;
 8001434:	4b83      	ldr	r3, [pc, #524]	@ (8001644 <process_keyboard+0x5c4>)
 8001436:	2252      	movs	r2, #82	@ 0x52
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	2052      	movs	r0, #82	@ 0x52
 800143c:	f7ff fd82 	bl	8000f44 <write>
 8001440:	4b81      	ldr	r3, [pc, #516]	@ (8001648 <process_keyboard+0x5c8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	4a80      	ldr	r2, [pc, #512]	@ (8001648 <process_keyboard+0x5c8>)
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e15c      	b.n	8001706 <process_keyboard+0x686>
	    case 0x1B: keyChar = 'S'; write('S'); counter++; break;
 800144c:	4b7d      	ldr	r3, [pc, #500]	@ (8001644 <process_keyboard+0x5c4>)
 800144e:	2253      	movs	r2, #83	@ 0x53
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	2053      	movs	r0, #83	@ 0x53
 8001454:	f7ff fd76 	bl	8000f44 <write>
 8001458:	4b7b      	ldr	r3, [pc, #492]	@ (8001648 <process_keyboard+0x5c8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	4a7a      	ldr	r2, [pc, #488]	@ (8001648 <process_keyboard+0x5c8>)
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e150      	b.n	8001706 <process_keyboard+0x686>
	    case 0x2C: keyChar = 'T'; write('T'); counter++; break;
 8001464:	4b77      	ldr	r3, [pc, #476]	@ (8001644 <process_keyboard+0x5c4>)
 8001466:	2254      	movs	r2, #84	@ 0x54
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	2054      	movs	r0, #84	@ 0x54
 800146c:	f7ff fd6a 	bl	8000f44 <write>
 8001470:	4b75      	ldr	r3, [pc, #468]	@ (8001648 <process_keyboard+0x5c8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	4a74      	ldr	r2, [pc, #464]	@ (8001648 <process_keyboard+0x5c8>)
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e144      	b.n	8001706 <process_keyboard+0x686>
	    case 0x3C: keyChar = 'U'; write('U'); counter++; break;
 800147c:	4b71      	ldr	r3, [pc, #452]	@ (8001644 <process_keyboard+0x5c4>)
 800147e:	2255      	movs	r2, #85	@ 0x55
 8001480:	701a      	strb	r2, [r3, #0]
 8001482:	2055      	movs	r0, #85	@ 0x55
 8001484:	f7ff fd5e 	bl	8000f44 <write>
 8001488:	4b6f      	ldr	r3, [pc, #444]	@ (8001648 <process_keyboard+0x5c8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	4a6e      	ldr	r2, [pc, #440]	@ (8001648 <process_keyboard+0x5c8>)
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e138      	b.n	8001706 <process_keyboard+0x686>
	    case 0x2A: keyChar = 'V'; write('V'); counter++; break;
 8001494:	4b6b      	ldr	r3, [pc, #428]	@ (8001644 <process_keyboard+0x5c4>)
 8001496:	2256      	movs	r2, #86	@ 0x56
 8001498:	701a      	strb	r2, [r3, #0]
 800149a:	2056      	movs	r0, #86	@ 0x56
 800149c:	f7ff fd52 	bl	8000f44 <write>
 80014a0:	4b69      	ldr	r3, [pc, #420]	@ (8001648 <process_keyboard+0x5c8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	4a68      	ldr	r2, [pc, #416]	@ (8001648 <process_keyboard+0x5c8>)
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e12c      	b.n	8001706 <process_keyboard+0x686>
	    case 0x1D: keyChar = 'W'; write('W'); counter++; break;
 80014ac:	4b65      	ldr	r3, [pc, #404]	@ (8001644 <process_keyboard+0x5c4>)
 80014ae:	2257      	movs	r2, #87	@ 0x57
 80014b0:	701a      	strb	r2, [r3, #0]
 80014b2:	2057      	movs	r0, #87	@ 0x57
 80014b4:	f7ff fd46 	bl	8000f44 <write>
 80014b8:	4b63      	ldr	r3, [pc, #396]	@ (8001648 <process_keyboard+0x5c8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	4a62      	ldr	r2, [pc, #392]	@ (8001648 <process_keyboard+0x5c8>)
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e120      	b.n	8001706 <process_keyboard+0x686>
	    case 0x22: keyChar = 'X'; write('X'); counter++; break;
 80014c4:	4b5f      	ldr	r3, [pc, #380]	@ (8001644 <process_keyboard+0x5c4>)
 80014c6:	2258      	movs	r2, #88	@ 0x58
 80014c8:	701a      	strb	r2, [r3, #0]
 80014ca:	2058      	movs	r0, #88	@ 0x58
 80014cc:	f7ff fd3a 	bl	8000f44 <write>
 80014d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001648 <process_keyboard+0x5c8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	3301      	adds	r3, #1
 80014d6:	4a5c      	ldr	r2, [pc, #368]	@ (8001648 <process_keyboard+0x5c8>)
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	e114      	b.n	8001706 <process_keyboard+0x686>
	    case 0x35: keyChar = 'Y'; write('Y'); counter++; break;
 80014dc:	4b59      	ldr	r3, [pc, #356]	@ (8001644 <process_keyboard+0x5c4>)
 80014de:	2259      	movs	r2, #89	@ 0x59
 80014e0:	701a      	strb	r2, [r3, #0]
 80014e2:	2059      	movs	r0, #89	@ 0x59
 80014e4:	f7ff fd2e 	bl	8000f44 <write>
 80014e8:	4b57      	ldr	r3, [pc, #348]	@ (8001648 <process_keyboard+0x5c8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	4a56      	ldr	r2, [pc, #344]	@ (8001648 <process_keyboard+0x5c8>)
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e108      	b.n	8001706 <process_keyboard+0x686>
	    case 0x1A: keyChar = 'Z'; write('Z'); counter++; break;
 80014f4:	4b53      	ldr	r3, [pc, #332]	@ (8001644 <process_keyboard+0x5c4>)
 80014f6:	225a      	movs	r2, #90	@ 0x5a
 80014f8:	701a      	strb	r2, [r3, #0]
 80014fa:	205a      	movs	r0, #90	@ 0x5a
 80014fc:	f7ff fd22 	bl	8000f44 <write>
 8001500:	4b51      	ldr	r3, [pc, #324]	@ (8001648 <process_keyboard+0x5c8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	3301      	adds	r3, #1
 8001506:	4a50      	ldr	r2, [pc, #320]	@ (8001648 <process_keyboard+0x5c8>)
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e0fc      	b.n	8001706 <process_keyboard+0x686>
	    // Numbers
	    case 0x16: keyChar = '1'; write('1'); counter++; break;
 800150c:	4b4d      	ldr	r3, [pc, #308]	@ (8001644 <process_keyboard+0x5c4>)
 800150e:	2231      	movs	r2, #49	@ 0x31
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	2031      	movs	r0, #49	@ 0x31
 8001514:	f7ff fd16 	bl	8000f44 <write>
 8001518:	4b4b      	ldr	r3, [pc, #300]	@ (8001648 <process_keyboard+0x5c8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	4a4a      	ldr	r2, [pc, #296]	@ (8001648 <process_keyboard+0x5c8>)
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e0f0      	b.n	8001706 <process_keyboard+0x686>
	    case 0x1E: keyChar = '2'; write('2'); counter++; break;
 8001524:	4b47      	ldr	r3, [pc, #284]	@ (8001644 <process_keyboard+0x5c4>)
 8001526:	2232      	movs	r2, #50	@ 0x32
 8001528:	701a      	strb	r2, [r3, #0]
 800152a:	2032      	movs	r0, #50	@ 0x32
 800152c:	f7ff fd0a 	bl	8000f44 <write>
 8001530:	4b45      	ldr	r3, [pc, #276]	@ (8001648 <process_keyboard+0x5c8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	4a44      	ldr	r2, [pc, #272]	@ (8001648 <process_keyboard+0x5c8>)
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e0e4      	b.n	8001706 <process_keyboard+0x686>
	    case 0x26: keyChar = '3'; write('3'); counter++; break;
 800153c:	4b41      	ldr	r3, [pc, #260]	@ (8001644 <process_keyboard+0x5c4>)
 800153e:	2233      	movs	r2, #51	@ 0x33
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	2033      	movs	r0, #51	@ 0x33
 8001544:	f7ff fcfe 	bl	8000f44 <write>
 8001548:	4b3f      	ldr	r3, [pc, #252]	@ (8001648 <process_keyboard+0x5c8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	4a3e      	ldr	r2, [pc, #248]	@ (8001648 <process_keyboard+0x5c8>)
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	e0d8      	b.n	8001706 <process_keyboard+0x686>
	    case 0x25: keyChar = '4'; write('4'); counter++; break;
 8001554:	4b3b      	ldr	r3, [pc, #236]	@ (8001644 <process_keyboard+0x5c4>)
 8001556:	2234      	movs	r2, #52	@ 0x34
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	2034      	movs	r0, #52	@ 0x34
 800155c:	f7ff fcf2 	bl	8000f44 <write>
 8001560:	4b39      	ldr	r3, [pc, #228]	@ (8001648 <process_keyboard+0x5c8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	4a38      	ldr	r2, [pc, #224]	@ (8001648 <process_keyboard+0x5c8>)
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e0cc      	b.n	8001706 <process_keyboard+0x686>
	    case 0x2E: keyChar = '5'; write('5'); counter++; break;
 800156c:	4b35      	ldr	r3, [pc, #212]	@ (8001644 <process_keyboard+0x5c4>)
 800156e:	2235      	movs	r2, #53	@ 0x35
 8001570:	701a      	strb	r2, [r3, #0]
 8001572:	2035      	movs	r0, #53	@ 0x35
 8001574:	f7ff fce6 	bl	8000f44 <write>
 8001578:	4b33      	ldr	r3, [pc, #204]	@ (8001648 <process_keyboard+0x5c8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	3301      	adds	r3, #1
 800157e:	4a32      	ldr	r2, [pc, #200]	@ (8001648 <process_keyboard+0x5c8>)
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e0c0      	b.n	8001706 <process_keyboard+0x686>
	    case 0x36: keyChar = '6'; write('6'); counter++; break;
 8001584:	4b2f      	ldr	r3, [pc, #188]	@ (8001644 <process_keyboard+0x5c4>)
 8001586:	2236      	movs	r2, #54	@ 0x36
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	2036      	movs	r0, #54	@ 0x36
 800158c:	f7ff fcda 	bl	8000f44 <write>
 8001590:	4b2d      	ldr	r3, [pc, #180]	@ (8001648 <process_keyboard+0x5c8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	4a2c      	ldr	r2, [pc, #176]	@ (8001648 <process_keyboard+0x5c8>)
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e0b4      	b.n	8001706 <process_keyboard+0x686>
	    case 0x3D: keyChar = '7'; write('7'); counter++; break;
 800159c:	4b29      	ldr	r3, [pc, #164]	@ (8001644 <process_keyboard+0x5c4>)
 800159e:	2237      	movs	r2, #55	@ 0x37
 80015a0:	701a      	strb	r2, [r3, #0]
 80015a2:	2037      	movs	r0, #55	@ 0x37
 80015a4:	f7ff fcce 	bl	8000f44 <write>
 80015a8:	4b27      	ldr	r3, [pc, #156]	@ (8001648 <process_keyboard+0x5c8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	4a26      	ldr	r2, [pc, #152]	@ (8001648 <process_keyboard+0x5c8>)
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e0a8      	b.n	8001706 <process_keyboard+0x686>
	    case 0x3E: keyChar = '8'; write('8'); counter++; break;
 80015b4:	4b23      	ldr	r3, [pc, #140]	@ (8001644 <process_keyboard+0x5c4>)
 80015b6:	2238      	movs	r2, #56	@ 0x38
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	2038      	movs	r0, #56	@ 0x38
 80015bc:	f7ff fcc2 	bl	8000f44 <write>
 80015c0:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <process_keyboard+0x5c8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	3301      	adds	r3, #1
 80015c6:	4a20      	ldr	r2, [pc, #128]	@ (8001648 <process_keyboard+0x5c8>)
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e09c      	b.n	8001706 <process_keyboard+0x686>
	    case 0x46: keyChar = '9'; write('9'); counter++; break;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001644 <process_keyboard+0x5c4>)
 80015ce:	2239      	movs	r2, #57	@ 0x39
 80015d0:	701a      	strb	r2, [r3, #0]
 80015d2:	2039      	movs	r0, #57	@ 0x39
 80015d4:	f7ff fcb6 	bl	8000f44 <write>
 80015d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <process_keyboard+0x5c8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	4a1a      	ldr	r2, [pc, #104]	@ (8001648 <process_keyboard+0x5c8>)
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e090      	b.n	8001706 <process_keyboard+0x686>
	    case 0x45: keyChar = '0'; write('0'); counter++; break;
 80015e4:	4b17      	ldr	r3, [pc, #92]	@ (8001644 <process_keyboard+0x5c4>)
 80015e6:	2230      	movs	r2, #48	@ 0x30
 80015e8:	701a      	strb	r2, [r3, #0]
 80015ea:	2030      	movs	r0, #48	@ 0x30
 80015ec:	f7ff fcaa 	bl	8000f44 <write>
 80015f0:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <process_keyboard+0x5c8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	4a14      	ldr	r2, [pc, #80]	@ (8001648 <process_keyboard+0x5c8>)
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e084      	b.n	8001706 <process_keyboard+0x686>
	    // Punctuation and symbols
	    case 0x41: keyChar = ','; write(','); counter++; break;
 80015fc:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <process_keyboard+0x5c4>)
 80015fe:	222c      	movs	r2, #44	@ 0x2c
 8001600:	701a      	strb	r2, [r3, #0]
 8001602:	202c      	movs	r0, #44	@ 0x2c
 8001604:	f7ff fc9e 	bl	8000f44 <write>
 8001608:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <process_keyboard+0x5c8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	4a0e      	ldr	r2, [pc, #56]	@ (8001648 <process_keyboard+0x5c8>)
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e078      	b.n	8001706 <process_keyboard+0x686>
	    case 0x49: keyChar = '.'; write('.'); counter++; break;
 8001614:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <process_keyboard+0x5c4>)
 8001616:	222e      	movs	r2, #46	@ 0x2e
 8001618:	701a      	strb	r2, [r3, #0]
 800161a:	202e      	movs	r0, #46	@ 0x2e
 800161c:	f7ff fc92 	bl	8000f44 <write>
 8001620:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <process_keyboard+0x5c8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	4a08      	ldr	r2, [pc, #32]	@ (8001648 <process_keyboard+0x5c8>)
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e06c      	b.n	8001706 <process_keyboard+0x686>
	    case 0x0E: keyChar = '`'; write('`'); counter++; break;
 800162c:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <process_keyboard+0x5c4>)
 800162e:	2260      	movs	r2, #96	@ 0x60
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	2060      	movs	r0, #96	@ 0x60
 8001634:	f7ff fc86 	bl	8000f44 <write>
 8001638:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <process_keyboard+0x5c8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3301      	adds	r3, #1
 800163e:	4a02      	ldr	r2, [pc, #8]	@ (8001648 <process_keyboard+0x5c8>)
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e060      	b.n	8001706 <process_keyboard+0x686>
 8001644:	20040205 	.word	0x20040205
 8001648:	200401f8 	.word	0x200401f8
	    case 0x4E: keyChar = '-'; write('-'); counter++; break;
 800164c:	4ba1      	ldr	r3, [pc, #644]	@ (80018d4 <process_keyboard+0x854>)
 800164e:	222d      	movs	r2, #45	@ 0x2d
 8001650:	701a      	strb	r2, [r3, #0]
 8001652:	202d      	movs	r0, #45	@ 0x2d
 8001654:	f7ff fc76 	bl	8000f44 <write>
 8001658:	4b9f      	ldr	r3, [pc, #636]	@ (80018d8 <process_keyboard+0x858>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	4a9e      	ldr	r2, [pc, #632]	@ (80018d8 <process_keyboard+0x858>)
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e050      	b.n	8001706 <process_keyboard+0x686>
	    case 0x55: keyChar = '='; write('='); counter++; break;
 8001664:	4b9b      	ldr	r3, [pc, #620]	@ (80018d4 <process_keyboard+0x854>)
 8001666:	223d      	movs	r2, #61	@ 0x3d
 8001668:	701a      	strb	r2, [r3, #0]
 800166a:	203d      	movs	r0, #61	@ 0x3d
 800166c:	f7ff fc6a 	bl	8000f44 <write>
 8001670:	4b99      	ldr	r3, [pc, #612]	@ (80018d8 <process_keyboard+0x858>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3301      	adds	r3, #1
 8001676:	4a98      	ldr	r2, [pc, #608]	@ (80018d8 <process_keyboard+0x858>)
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e044      	b.n	8001706 <process_keyboard+0x686>
	    case 0x5A: keyChar = '\n'; command(0x01); counter = 0; break;
 800167c:	4b95      	ldr	r3, [pc, #596]	@ (80018d4 <process_keyboard+0x854>)
 800167e:	220a      	movs	r2, #10
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	2001      	movs	r0, #1
 8001684:	f7ff fc3e 	bl	8000f04 <command>
 8001688:	4b93      	ldr	r3, [pc, #588]	@ (80018d8 <process_keyboard+0x858>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e03a      	b.n	8001706 <process_keyboard+0x686>
	    case 0x66:
	        keyChar = '\b';
 8001690:	4b90      	ldr	r3, [pc, #576]	@ (80018d4 <process_keyboard+0x854>)
 8001692:	2208      	movs	r2, #8
 8001694:	701a      	strb	r2, [r3, #0]
	        if (counter > 0) {
 8001696:	4b90      	ldr	r3, [pc, #576]	@ (80018d8 <process_keyboard+0x858>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	dd32      	ble.n	8001704 <process_keyboard+0x684>
	            command(0x10);  // Shift cursor left
 800169e:	2010      	movs	r0, #16
 80016a0:	f7ff fc30 	bl	8000f04 <command>
	            write(' ');     // Write a space to erase the character
 80016a4:	2020      	movs	r0, #32
 80016a6:	f7ff fc4d 	bl	8000f44 <write>
	            command(0x10);  // Move cursor back to the "erased" position
 80016aa:	2010      	movs	r0, #16
 80016ac:	f7ff fc2a 	bl	8000f04 <command>
	            counter--;
 80016b0:	4b89      	ldr	r3, [pc, #548]	@ (80018d8 <process_keyboard+0x858>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	4a88      	ldr	r2, [pc, #544]	@ (80018d8 <process_keyboard+0x858>)
 80016b8:	6013      	str	r3, [r2, #0]
	        }
	        break;
 80016ba:	e023      	b.n	8001704 <process_keyboard+0x684>
	    case 0x54: keyChar = '['; write('['); counter++; break;
 80016bc:	4b85      	ldr	r3, [pc, #532]	@ (80018d4 <process_keyboard+0x854>)
 80016be:	225b      	movs	r2, #91	@ 0x5b
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	205b      	movs	r0, #91	@ 0x5b
 80016c4:	f7ff fc3e 	bl	8000f44 <write>
 80016c8:	4b83      	ldr	r3, [pc, #524]	@ (80018d8 <process_keyboard+0x858>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	4a82      	ldr	r2, [pc, #520]	@ (80018d8 <process_keyboard+0x858>)
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e018      	b.n	8001706 <process_keyboard+0x686>
	    case 0x5B: keyChar = ']'; write(']'); counter++; break;
 80016d4:	4b7f      	ldr	r3, [pc, #508]	@ (80018d4 <process_keyboard+0x854>)
 80016d6:	225d      	movs	r2, #93	@ 0x5d
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	205d      	movs	r0, #93	@ 0x5d
 80016dc:	f7ff fc32 	bl	8000f44 <write>
 80016e0:	4b7d      	ldr	r3, [pc, #500]	@ (80018d8 <process_keyboard+0x858>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	3301      	adds	r3, #1
 80016e6:	4a7c      	ldr	r2, [pc, #496]	@ (80018d8 <process_keyboard+0x858>)
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e00c      	b.n	8001706 <process_keyboard+0x686>
	    case 0x29: keyChar = ' '; write(' '); counter++; break;
 80016ec:	4b79      	ldr	r3, [pc, #484]	@ (80018d4 <process_keyboard+0x854>)
 80016ee:	2220      	movs	r2, #32
 80016f0:	701a      	strb	r2, [r3, #0]
 80016f2:	2020      	movs	r0, #32
 80016f4:	f7ff fc26 	bl	8000f44 <write>
 80016f8:	4b77      	ldr	r3, [pc, #476]	@ (80018d8 <process_keyboard+0x858>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	4a76      	ldr	r2, [pc, #472]	@ (80018d8 <process_keyboard+0x858>)
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e000      	b.n	8001706 <process_keyboard+0x686>
	        break;
 8001704:	bf00      	nop
	}


	if(counter == 20 && current_code != 0x66){
 8001706:	4b74      	ldr	r3, [pc, #464]	@ (80018d8 <process_keyboard+0x858>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b14      	cmp	r3, #20
 800170c:	d106      	bne.n	800171c <process_keyboard+0x69c>
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b66      	cmp	r3, #102	@ 0x66
 8001712:	d003      	beq.n	800171c <process_keyboard+0x69c>
		command(0xC0);
 8001714:	20c0      	movs	r0, #192	@ 0xc0
 8001716:	f7ff fbf5 	bl	8000f04 <command>
 800171a:	e089      	b.n	8001830 <process_keyboard+0x7b0>
	}
	else if(counter == 40 && current_code != 0x66){
 800171c:	4b6e      	ldr	r3, [pc, #440]	@ (80018d8 <process_keyboard+0x858>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b28      	cmp	r3, #40	@ 0x28
 8001722:	d106      	bne.n	8001732 <process_keyboard+0x6b2>
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	2b66      	cmp	r3, #102	@ 0x66
 8001728:	d003      	beq.n	8001732 <process_keyboard+0x6b2>
		command(0x94);
 800172a:	2094      	movs	r0, #148	@ 0x94
 800172c:	f7ff fbea 	bl	8000f04 <command>
 8001730:	e07e      	b.n	8001830 <process_keyboard+0x7b0>
	}
	else if(counter == 60 && current_code != 0x66){
 8001732:	4b69      	ldr	r3, [pc, #420]	@ (80018d8 <process_keyboard+0x858>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b3c      	cmp	r3, #60	@ 0x3c
 8001738:	d106      	bne.n	8001748 <process_keyboard+0x6c8>
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	2b66      	cmp	r3, #102	@ 0x66
 800173e:	d003      	beq.n	8001748 <process_keyboard+0x6c8>
		command(0xD4);
 8001740:	20d4      	movs	r0, #212	@ 0xd4
 8001742:	f7ff fbdf 	bl	8000f04 <command>
 8001746:	e073      	b.n	8001830 <process_keyboard+0x7b0>
	}
	else if(counter == 80 && current_code != 0x66){
 8001748:	4b63      	ldr	r3, [pc, #396]	@ (80018d8 <process_keyboard+0x858>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b50      	cmp	r3, #80	@ 0x50
 800174e:	d10c      	bne.n	800176a <process_keyboard+0x6ea>
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b66      	cmp	r3, #102	@ 0x66
 8001754:	d009      	beq.n	800176a <process_keyboard+0x6ea>
		command(0x01);
 8001756:	2001      	movs	r0, #1
 8001758:	f7ff fbd4 	bl	8000f04 <command>
		counter = 0;
 800175c:	4b5e      	ldr	r3, [pc, #376]	@ (80018d8 <process_keyboard+0x858>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
		screen_limit = true;
 8001762:	4b5e      	ldr	r3, [pc, #376]	@ (80018dc <process_keyboard+0x85c>)
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	e062      	b.n	8001830 <process_keyboard+0x7b0>
	}
	else if(counter == 20 && current_code == 0x66){
 800176a:	4b5b      	ldr	r3, [pc, #364]	@ (80018d8 <process_keyboard+0x858>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b14      	cmp	r3, #20
 8001770:	d114      	bne.n	800179c <process_keyboard+0x71c>
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	2b66      	cmp	r3, #102	@ 0x66
 8001776:	d111      	bne.n	800179c <process_keyboard+0x71c>
		command(0x94);
 8001778:	2094      	movs	r0, #148	@ 0x94
 800177a:	f7ff fbc3 	bl	8000f04 <command>
		command(0x10);  // Shift cursor left
 800177e:	2010      	movs	r0, #16
 8001780:	f7ff fbc0 	bl	8000f04 <command>
		write(' ');     // Write a space to erase the character
 8001784:	2020      	movs	r0, #32
 8001786:	f7ff fbdd 	bl	8000f44 <write>
		command(0x10);
 800178a:	2010      	movs	r0, #16
 800178c:	f7ff fbba 	bl	8000f04 <command>
		counter--;
 8001790:	4b51      	ldr	r3, [pc, #324]	@ (80018d8 <process_keyboard+0x858>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3b01      	subs	r3, #1
 8001796:	4a50      	ldr	r2, [pc, #320]	@ (80018d8 <process_keyboard+0x858>)
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e049      	b.n	8001830 <process_keyboard+0x7b0>
	}
	else if(counter == 40 && current_code == 0x66){
 800179c:	4b4e      	ldr	r3, [pc, #312]	@ (80018d8 <process_keyboard+0x858>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b28      	cmp	r3, #40	@ 0x28
 80017a2:	d114      	bne.n	80017ce <process_keyboard+0x74e>
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	2b66      	cmp	r3, #102	@ 0x66
 80017a8:	d111      	bne.n	80017ce <process_keyboard+0x74e>
		command(0xD4);
 80017aa:	20d4      	movs	r0, #212	@ 0xd4
 80017ac:	f7ff fbaa 	bl	8000f04 <command>
		command(0x10);  // Shift cursor left
 80017b0:	2010      	movs	r0, #16
 80017b2:	f7ff fba7 	bl	8000f04 <command>
		write(' ');     // Write a space to erase the character
 80017b6:	2020      	movs	r0, #32
 80017b8:	f7ff fbc4 	bl	8000f44 <write>
		command(0x10);
 80017bc:	2010      	movs	r0, #16
 80017be:	f7ff fba1 	bl	8000f04 <command>
		counter--;
 80017c2:	4b45      	ldr	r3, [pc, #276]	@ (80018d8 <process_keyboard+0x858>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	4a43      	ldr	r2, [pc, #268]	@ (80018d8 <process_keyboard+0x858>)
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	e030      	b.n	8001830 <process_keyboard+0x7b0>
	}
	else if(counter == 60 && current_code == 0x66){
 80017ce:	4b42      	ldr	r3, [pc, #264]	@ (80018d8 <process_keyboard+0x858>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b3c      	cmp	r3, #60	@ 0x3c
 80017d4:	d114      	bne.n	8001800 <process_keyboard+0x780>
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	2b66      	cmp	r3, #102	@ 0x66
 80017da:	d111      	bne.n	8001800 <process_keyboard+0x780>
		command(0xC0);
 80017dc:	20c0      	movs	r0, #192	@ 0xc0
 80017de:	f7ff fb91 	bl	8000f04 <command>
		command(0x10);  // Shift cursor left
 80017e2:	2010      	movs	r0, #16
 80017e4:	f7ff fb8e 	bl	8000f04 <command>
		write(' ');     // Write a space to erase the character
 80017e8:	2020      	movs	r0, #32
 80017ea:	f7ff fbab 	bl	8000f44 <write>
		command(0x10);
 80017ee:	2010      	movs	r0, #16
 80017f0:	f7ff fb88 	bl	8000f04 <command>
		counter--;
 80017f4:	4b38      	ldr	r3, [pc, #224]	@ (80018d8 <process_keyboard+0x858>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	4a37      	ldr	r2, [pc, #220]	@ (80018d8 <process_keyboard+0x858>)
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e017      	b.n	8001830 <process_keyboard+0x7b0>
	}
	else if(counter == 80 && current_code == 0x66){
 8001800:	4b35      	ldr	r3, [pc, #212]	@ (80018d8 <process_keyboard+0x858>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b50      	cmp	r3, #80	@ 0x50
 8001806:	d113      	bne.n	8001830 <process_keyboard+0x7b0>
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2b66      	cmp	r3, #102	@ 0x66
 800180c:	d110      	bne.n	8001830 <process_keyboard+0x7b0>
		command(0x01);
 800180e:	2001      	movs	r0, #1
 8001810:	f7ff fb78 	bl	8000f04 <command>
		command(0x10);  // Shift cursor left
 8001814:	2010      	movs	r0, #16
 8001816:	f7ff fb75 	bl	8000f04 <command>
		write(' ');     // Write a space to erase the character
 800181a:	2020      	movs	r0, #32
 800181c:	f7ff fb92 	bl	8000f44 <write>
		command(0x10);
 8001820:	2010      	movs	r0, #16
 8001822:	f7ff fb6f 	bl	8000f04 <command>
		counter--;
 8001826:	4b2c      	ldr	r3, [pc, #176]	@ (80018d8 <process_keyboard+0x858>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	3b01      	subs	r3, #1
 800182c:	4a2a      	ldr	r2, [pc, #168]	@ (80018d8 <process_keyboard+0x858>)
 800182e:	6013      	str	r3, [r2, #0]
	}

	// Bluetooth Code
	if(current_code == 0x66){
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	2b66      	cmp	r3, #102	@ 0x66
 8001834:	d110      	bne.n	8001858 <process_keyboard+0x7d8>
		if (promptIndex > 0) {
 8001836:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <process_keyboard+0x860>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d042      	beq.n	80018c4 <process_keyboard+0x844>
			promptIndex--;
 800183e:	4b28      	ldr	r3, [pc, #160]	@ (80018e0 <process_keyboard+0x860>)
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	3b01      	subs	r3, #1
 8001844:	b29a      	uxth	r2, r3
 8001846:	4b26      	ldr	r3, [pc, #152]	@ (80018e0 <process_keyboard+0x860>)
 8001848:	801a      	strh	r2, [r3, #0]
		    promptBuffer[promptIndex] = '\0';
 800184a:	4b25      	ldr	r3, [pc, #148]	@ (80018e0 <process_keyboard+0x860>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	4b24      	ldr	r3, [pc, #144]	@ (80018e4 <process_keyboard+0x864>)
 8001852:	2100      	movs	r1, #0
 8001854:	5499      	strb	r1, [r3, r2]
 8001856:	e035      	b.n	80018c4 <process_keyboard+0x844>
		}
	}
	else if(current_code == 0x5A || screen_limit == true){
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2b5a      	cmp	r3, #90	@ 0x5a
 800185c:	d003      	beq.n	8001866 <process_keyboard+0x7e6>
 800185e:	4b1f      	ldr	r3, [pc, #124]	@ (80018dc <process_keyboard+0x85c>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d01d      	beq.n	80018a2 <process_keyboard+0x822>
		printf("Final Prompt: %s\n", promptBuffer);
 8001866:	491f      	ldr	r1, [pc, #124]	@ (80018e4 <process_keyboard+0x864>)
 8001868:	481f      	ldr	r0, [pc, #124]	@ (80018e8 <process_keyboard+0x868>)
 800186a:	f004 ff49 	bl	8006700 <iprintf>
		promptBuffer[promptIndex] = '\n';
 800186e:	4b1c      	ldr	r3, [pc, #112]	@ (80018e0 <process_keyboard+0x860>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <process_keyboard+0x864>)
 8001876:	210a      	movs	r1, #10
 8001878:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, (uint8_t *)promptBuffer, promptIndex, HAL_MAX_DELAY);
 800187a:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <process_keyboard+0x860>)
 800187c:	881a      	ldrh	r2, [r3, #0]
 800187e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001882:	4918      	ldr	r1, [pc, #96]	@ (80018e4 <process_keyboard+0x864>)
 8001884:	4819      	ldr	r0, [pc, #100]	@ (80018ec <process_keyboard+0x86c>)
 8001886:	f002 ffb5 	bl	80047f4 <HAL_UART_Transmit>
		promptIndex = 0;
 800188a:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <process_keyboard+0x860>)
 800188c:	2200      	movs	r2, #0
 800188e:	801a      	strh	r2, [r3, #0]
		memset(promptBuffer, 0, BUFFER_SIZE);
 8001890:	2280      	movs	r2, #128	@ 0x80
 8001892:	2100      	movs	r1, #0
 8001894:	4813      	ldr	r0, [pc, #76]	@ (80018e4 <process_keyboard+0x864>)
 8001896:	f004 ff45 	bl	8006724 <memset>
		screen_limit = false;
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <process_keyboard+0x85c>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
	else if(current_code == 0x5A || screen_limit == true){
 80018a0:	e010      	b.n	80018c4 <process_keyboard+0x844>
	}
	else{
		promptBuffer[promptIndex++] = keyChar;
 80018a2:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <process_keyboard+0x860>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	b291      	uxth	r1, r2
 80018aa:	4a0d      	ldr	r2, [pc, #52]	@ (80018e0 <process_keyboard+0x860>)
 80018ac:	8011      	strh	r1, [r2, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <process_keyboard+0x854>)
 80018b2:	7819      	ldrb	r1, [r3, #0]
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <process_keyboard+0x864>)
 80018b6:	5499      	strb	r1, [r3, r2]
		promptBuffer[promptIndex] = '\0';  // Keep it null-terminated.
 80018b8:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <process_keyboard+0x860>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <process_keyboard+0x864>)
 80018c0:	2100      	movs	r1, #0
 80018c2:	5499      	strb	r1, [r3, r2]
	}

	ps2_data_ready = false;
 80018c4:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <process_keyboard+0x870>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	e000      	b.n	80018ce <process_keyboard+0x84e>
	if (ps2_data_ready == false) return;
 80018cc:	bf00      	nop
}
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20040205 	.word	0x20040205
 80018d8:	200401f8 	.word	0x200401f8
 80018dc:	2004028a 	.word	0x2004028a
 80018e0:	20040288 	.word	0x20040288
 80018e4:	20040208 	.word	0x20040208
 80018e8:	08008610 	.word	0x08008610
 80018ec:	20040320 	.word	0x20040320
 80018f0:	200401f0 	.word	0x200401f0

080018f4 <HAL_GPIO_EXTI_Callback>:


volatile uint8_t ps2_data = 0;
volatile uint8_t ps2_bitcount = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PS2_CLOCK_PIN) {
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	2b40      	cmp	r3, #64	@ 0x40
 8001902:	d161      	bne.n	80019c8 <HAL_GPIO_EXTI_Callback+0xd4>
	    // Start bit (should be 0)

		if(ps2_data_ready == false){
 8001904:	4b32      	ldr	r3, [pc, #200]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d15d      	bne.n	80019c8 <HAL_GPIO_EXTI_Callback+0xd4>

			if (ps2_bitcount == 0) {
 800190c:	4b31      	ldr	r3, [pc, #196]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d112      	bne.n	800193c <HAL_GPIO_EXTI_Callback+0x48>
			  // Verify it's a start bit (0)
			  if (!HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_PIN)) {
 8001916:	2120      	movs	r1, #32
 8001918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800191c:	f001 fa0e 	bl	8002d3c <HAL_GPIO_ReadPin>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d150      	bne.n	80019c8 <HAL_GPIO_EXTI_Callback+0xd4>
				ps2_data = 0;
 8001926:	4b2c      	ldr	r3, [pc, #176]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
				ps2_bitcount++;
 800192c:	4b29      	ldr	r3, [pc, #164]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	3301      	adds	r3, #1
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b27      	ldr	r3, [pc, #156]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001938:	701a      	strb	r2, [r3, #0]
			  ps2_data_ready = true;
			}

		}
	  }
}
 800193a:	e045      	b.n	80019c8 <HAL_GPIO_EXTI_Callback+0xd4>
			else if (ps2_bitcount >= 1 && ps2_bitcount <= 8) {
 800193c:	4b25      	ldr	r3, [pc, #148]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d023      	beq.n	800198e <HAL_GPIO_EXTI_Callback+0x9a>
 8001946:	4b23      	ldr	r3, [pc, #140]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b08      	cmp	r3, #8
 800194e:	d81e      	bhi.n	800198e <HAL_GPIO_EXTI_Callback+0x9a>
			  ps2_data >>= 1;
 8001950:	4b21      	ldr	r3, [pc, #132]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4b1f      	ldr	r3, [pc, #124]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0xe4>)
 800195c:	701a      	strb	r2, [r3, #0]
			  if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_PIN)) {
 800195e:	2120      	movs	r1, #32
 8001960:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001964:	f001 f9ea 	bl	8002d3c <HAL_GPIO_ReadPin>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d007      	beq.n	800197e <HAL_GPIO_EXTI_Callback+0x8a>
				ps2_data |= 0x80;
 800196e:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b17      	ldr	r3, [pc, #92]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0xe4>)
 800197c:	701a      	strb	r2, [r3, #0]
			  ps2_bitcount++;
 800197e:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	3301      	adds	r3, #1
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800198a:	701a      	strb	r2, [r3, #0]
}
 800198c:	e01c      	b.n	80019c8 <HAL_GPIO_EXTI_Callback+0xd4>
			else if (ps2_bitcount == 9) {
 800198e:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b09      	cmp	r3, #9
 8001996:	d107      	bne.n	80019a8 <HAL_GPIO_EXTI_Callback+0xb4>
			  ps2_bitcount++;
 8001998:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	3301      	adds	r3, #1
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 80019a4:	701a      	strb	r2, [r3, #0]
}
 80019a6:	e00f      	b.n	80019c8 <HAL_GPIO_EXTI_Callback+0xd4>
			else if (ps2_bitcount == 10) {
 80019a8:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b0a      	cmp	r3, #10
 80019b0:	d10a      	bne.n	80019c8 <HAL_GPIO_EXTI_Callback+0xd4>
			  ps2_bitcount = 0;
 80019b2:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0xe0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
			  ps2_scan_code = ps2_data;
 80019b8:	4b07      	ldr	r3, [pc, #28]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <HAL_GPIO_EXTI_Callback+0xe8>)
 80019c0:	701a      	strb	r2, [r3, #0]
			  ps2_data_ready = true;
 80019c2:	4b03      	ldr	r3, [pc, #12]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0xdc>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200401f0 	.word	0x200401f0
 80019d4:	200403b5 	.word	0x200403b5
 80019d8:	200403b4 	.word	0x200403b4
 80019dc:	200401f4 	.word	0x200401f4

080019e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019e4:	f000 fdb3 	bl	800254e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019e8:	f000 f811 	bl	8001a0e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ec:	f000 f8ee 	bl	8001bcc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80019f0:	f000 f854 	bl	8001a9c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80019f4:	f000 f89e 	bl	8001b34 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//  uint8_t buffer[BUFFER_SIZE];
  lcd_init();
 80019f8:	f7ff fb12 	bl	8001020 <lcd_init>

  command(0x01);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f7ff fa81 	bl	8000f04 <command>
  HAL_Delay(5);
 8001a02:	2005      	movs	r0, #5
 8001a04:	f000 fe18 	bl	8002638 <HAL_Delay>
  //print_lcd("Qussai");

  while (1)
  {
    /* USER CODE END WHILE */
	  process_keyboard();
 8001a08:	f7ff fb3a 	bl	8001080 <process_keyboard>
 8001a0c:	e7fc      	b.n	8001a08 <main+0x28>

08001a0e <SystemClock_Config>:
/*
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b096      	sub	sp, #88	@ 0x58
 8001a12:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2244      	movs	r2, #68	@ 0x44
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f004 fe81 	bl	8006724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a22:	463b      	mov	r3, r7
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a30:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a34:	f001 f9ea 	bl	8002e0c <HAL_PWREx_ControlVoltageScaling>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a3e:	f000 fb6d 	bl	800211c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001a42:	2310      	movs	r3, #16
 8001a44:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a46:	2301      	movs	r3, #1
 8001a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a4e:	2360      	movs	r3, #96	@ 0x60
 8001a50:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f001 fa8a 	bl	8002f74 <HAL_RCC_OscConfig>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001a66:	f000 fb59 	bl	800211c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a6a:	230f      	movs	r3, #15
 8001a6c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a7e:	463b      	mov	r3, r7
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f001 fe90 	bl	80037a8 <HAL_RCC_ClockConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001a8e:	f000 fb45 	bl	800211c <Error_Handler>
  }
}
 8001a92:	bf00      	nop
 8001a94:	3758      	adds	r7, #88	@ 0x58
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001aa0:	4b22      	ldr	r3, [pc, #136]	@ (8001b2c <MX_LPUART1_UART_Init+0x90>)
 8001aa2:	4a23      	ldr	r2, [pc, #140]	@ (8001b30 <MX_LPUART1_UART_Init+0x94>)
 8001aa4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001aa6:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <MX_LPUART1_UART_Init+0x90>)
 8001aa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001aac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aae:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <MX_LPUART1_UART_Init+0x90>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <MX_LPUART1_UART_Init+0x90>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001aba:	4b1c      	ldr	r3, [pc, #112]	@ (8001b2c <MX_LPUART1_UART_Init+0x90>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <MX_LPUART1_UART_Init+0x90>)
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac6:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <MX_LPUART1_UART_Init+0x90>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001acc:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <MX_LPUART1_UART_Init+0x90>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ad2:	4b16      	ldr	r3, [pc, #88]	@ (8001b2c <MX_LPUART1_UART_Init+0x90>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad8:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <MX_LPUART1_UART_Init+0x90>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001ade:	4b13      	ldr	r3, [pc, #76]	@ (8001b2c <MX_LPUART1_UART_Init+0x90>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001ae4:	4811      	ldr	r0, [pc, #68]	@ (8001b2c <MX_LPUART1_UART_Init+0x90>)
 8001ae6:	f002 fe35 	bl	8004754 <HAL_UART_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001af0:	f000 fb14 	bl	800211c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af4:	2100      	movs	r1, #0
 8001af6:	480d      	ldr	r0, [pc, #52]	@ (8001b2c <MX_LPUART1_UART_Init+0x90>)
 8001af8:	f004 f81f 	bl	8005b3a <HAL_UARTEx_SetTxFifoThreshold>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b02:	f000 fb0b 	bl	800211c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b06:	2100      	movs	r1, #0
 8001b08:	4808      	ldr	r0, [pc, #32]	@ (8001b2c <MX_LPUART1_UART_Init+0x90>)
 8001b0a:	f004 f854 	bl	8005bb6 <HAL_UARTEx_SetRxFifoThreshold>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b14:	f000 fb02 	bl	800211c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b18:	4804      	ldr	r0, [pc, #16]	@ (8001b2c <MX_LPUART1_UART_Init+0x90>)
 8001b1a:	f003 ffd5 	bl	8005ac8 <HAL_UARTEx_DisableFifoMode>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b24:	f000 fafa 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	2004028c 	.word	0x2004028c
 8001b30:	40008000 	.word	0x40008000

08001b34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b38:	4b22      	ldr	r3, [pc, #136]	@ (8001bc4 <MX_USART1_UART_Init+0x90>)
 8001b3a:	4a23      	ldr	r2, [pc, #140]	@ (8001bc8 <MX_USART1_UART_Init+0x94>)
 8001b3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b3e:	4b21      	ldr	r3, [pc, #132]	@ (8001bc4 <MX_USART1_UART_Init+0x90>)
 8001b40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b46:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc4 <MX_USART1_UART_Init+0x90>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc4 <MX_USART1_UART_Init+0x90>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b52:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc4 <MX_USART1_UART_Init+0x90>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b58:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc4 <MX_USART1_UART_Init+0x90>)
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5e:	4b19      	ldr	r3, [pc, #100]	@ (8001bc4 <MX_USART1_UART_Init+0x90>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b64:	4b17      	ldr	r3, [pc, #92]	@ (8001bc4 <MX_USART1_UART_Init+0x90>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b6a:	4b16      	ldr	r3, [pc, #88]	@ (8001bc4 <MX_USART1_UART_Init+0x90>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b70:	4b14      	ldr	r3, [pc, #80]	@ (8001bc4 <MX_USART1_UART_Init+0x90>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b76:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <MX_USART1_UART_Init+0x90>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b7c:	4811      	ldr	r0, [pc, #68]	@ (8001bc4 <MX_USART1_UART_Init+0x90>)
 8001b7e:	f002 fde9 	bl	8004754 <HAL_UART_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b88:	f000 fac8 	bl	800211c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	480d      	ldr	r0, [pc, #52]	@ (8001bc4 <MX_USART1_UART_Init+0x90>)
 8001b90:	f003 ffd3 	bl	8005b3a <HAL_UARTEx_SetTxFifoThreshold>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b9a:	f000 fabf 	bl	800211c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4808      	ldr	r0, [pc, #32]	@ (8001bc4 <MX_USART1_UART_Init+0x90>)
 8001ba2:	f004 f808 	bl	8005bb6 <HAL_UARTEx_SetRxFifoThreshold>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bac:	f000 fab6 	bl	800211c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bb0:	4804      	ldr	r0, [pc, #16]	@ (8001bc4 <MX_USART1_UART_Init+0x90>)
 8001bb2:	f003 ff89 	bl	8005ac8 <HAL_UARTEx_DisableFifoMode>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001bbc:	f000 faae 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20040320 	.word	0x20040320
 8001bc8:	40013800 	.word	0x40013800

08001bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08e      	sub	sp, #56	@ 0x38
 8001bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001be2:	4bb5      	ldr	r3, [pc, #724]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be6:	4ab4      	ldr	r2, [pc, #720]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001be8:	f043 0310 	orr.w	r3, r3, #16
 8001bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bee:	4bb2      	ldr	r3, [pc, #712]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	623b      	str	r3, [r7, #32]
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfa:	4baf      	ldr	r3, [pc, #700]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfe:	4aae      	ldr	r2, [pc, #696]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c06:	4bac      	ldr	r3, [pc, #688]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	61fb      	str	r3, [r7, #28]
 8001c10:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c12:	4ba9      	ldr	r3, [pc, #676]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c16:	4aa8      	ldr	r2, [pc, #672]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c18:	f043 0320 	orr.w	r3, r3, #32
 8001c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c1e:	4ba6      	ldr	r3, [pc, #664]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c22:	f003 0320 	and.w	r3, r3, #32
 8001c26:	61bb      	str	r3, [r7, #24]
 8001c28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c2a:	4ba3      	ldr	r3, [pc, #652]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2e:	4aa2      	ldr	r2, [pc, #648]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c36:	4ba0      	ldr	r3, [pc, #640]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	4b9d      	ldr	r3, [pc, #628]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c46:	4a9c      	ldr	r2, [pc, #624]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4e:	4b9a      	ldr	r3, [pc, #616]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5a:	4b97      	ldr	r3, [pc, #604]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5e:	4a96      	ldr	r2, [pc, #600]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c66:	4b94      	ldr	r3, [pc, #592]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c72:	4b91      	ldr	r3, [pc, #580]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c76:	4a90      	ldr	r2, [pc, #576]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c78:	f043 0308 	orr.w	r3, r3, #8
 8001c7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c7e:	4b8e      	ldr	r3, [pc, #568]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c8a:	4b8b      	ldr	r3, [pc, #556]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8e:	4a8a      	ldr	r2, [pc, #552]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c96:	4b88      	ldr	r3, [pc, #544]	@ (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001ca2:	f001 f957 	bl	8002f54 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2144      	movs	r1, #68	@ 0x44
 8001caa:	4884      	ldr	r0, [pc, #528]	@ (8001ebc <MX_GPIO_Init+0x2f0>)
 8001cac:	f001 f85e 	bl	8002d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001cb6:	4882      	ldr	r0, [pc, #520]	@ (8001ec0 <MX_GPIO_Init+0x2f4>)
 8001cb8:	f001 f858 	bl	8002d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8001cc2:	4880      	ldr	r0, [pc, #512]	@ (8001ec4 <MX_GPIO_Init+0x2f8>)
 8001cc4:	f001 f852 	bl	8002d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cc8:	230c      	movs	r3, #12
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001cd8:	230d      	movs	r3, #13
 8001cda:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4878      	ldr	r0, [pc, #480]	@ (8001ec4 <MX_GPIO_Init+0x2f8>)
 8001ce4:	f000 fe98 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001ce8:	2307      	movs	r3, #7
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cec:	2312      	movs	r3, #18
 8001cee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d00:	4619      	mov	r1, r3
 8001d02:	486f      	ldr	r0, [pc, #444]	@ (8001ec0 <MX_GPIO_Init+0x2f4>)
 8001d04:	f000 fe88 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d08:	2380      	movs	r3, #128	@ 0x80
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001d18:	230d      	movs	r3, #13
 8001d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d20:	4619      	mov	r1, r3
 8001d22:	4867      	ldr	r0, [pc, #412]	@ (8001ec0 <MX_GPIO_Init+0x2f4>)
 8001d24:	f000 fe78 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001d28:	233f      	movs	r3, #63	@ 0x3f
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d2c:	230b      	movs	r3, #11
 8001d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4863      	ldr	r0, [pc, #396]	@ (8001ec8 <MX_GPIO_Init+0x2fc>)
 8001d3c:	f000 fe6c 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d40:	2301      	movs	r3, #1
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d50:	2301      	movs	r3, #1
 8001d52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d5e:	f000 fe5b 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001d62:	230a      	movs	r3, #10
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d66:	230b      	movs	r3, #11
 8001d68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d72:	4619      	mov	r1, r3
 8001d74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d78:	f000 fe4e 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8001d7c:	2390      	movs	r3, #144	@ 0x90
 8001d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d8c:	2305      	movs	r3, #5
 8001d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d94:	4619      	mov	r1, r3
 8001d96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d9a:	f000 fe3d 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d9e:	2320      	movs	r3, #32
 8001da0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da2:	2300      	movs	r3, #0
 8001da4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da6:	2301      	movs	r3, #1
 8001da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dae:	4619      	mov	r1, r3
 8001db0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001db4:	f000 fe30 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001db8:	2340      	movs	r3, #64	@ 0x40
 8001dba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dbc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dd0:	f000 fe22 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001de4:	2302      	movs	r3, #2
 8001de6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dec:	4619      	mov	r1, r3
 8001dee:	4833      	ldr	r0, [pc, #204]	@ (8001ebc <MX_GPIO_Init+0x2f0>)
 8001df0:	f000 fe12 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001df4:	2302      	movs	r3, #2
 8001df6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001df8:	230b      	movs	r3, #11
 8001dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e04:	4619      	mov	r1, r3
 8001e06:	482d      	ldr	r0, [pc, #180]	@ (8001ebc <MX_GPIO_Init+0x2f0>)
 8001e08:	f000 fe06 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001e0c:	2344      	movs	r3, #68	@ 0x44
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e10:	2301      	movs	r3, #1
 8001e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e20:	4619      	mov	r1, r3
 8001e22:	4826      	ldr	r0, [pc, #152]	@ (8001ebc <MX_GPIO_Init+0x2f0>)
 8001e24:	f000 fdf8 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001e28:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e3e:	4619      	mov	r1, r3
 8001e40:	481f      	ldr	r0, [pc, #124]	@ (8001ec0 <MX_GPIO_Init+0x2f4>)
 8001e42:	f000 fde9 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 PE12
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12
 8001e46:	f44f 5356 	mov.w	r3, #13696	@ 0x3580
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e60:	4619      	mov	r1, r3
 8001e62:	4818      	ldr	r0, [pc, #96]	@ (8001ec4 <MX_GPIO_Init+0x2f8>)
 8001e64:	f000 fdd8 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001e68:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4810      	ldr	r0, [pc, #64]	@ (8001ec4 <MX_GPIO_Init+0x2f8>)
 8001e82:	f000 fdc9 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001e86:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4808      	ldr	r0, [pc, #32]	@ (8001ec4 <MX_GPIO_Init+0x2f8>)
 8001ea4:	f000 fdb8 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ea8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e00a      	b.n	8001ecc <MX_GPIO_Init+0x300>
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	48000400 	.word	0x48000400
 8001ec0:	48001400 	.word	0x48001400
 8001ec4:	48001000 	.word	0x48001000
 8001ec8:	48000800 	.word	0x48000800
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eda:	4619      	mov	r1, r3
 8001edc:	4882      	ldr	r0, [pc, #520]	@ (80020e8 <MX_GPIO_Init+0x51c>)
 8001ede:	f000 fd9b 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001ee2:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001ef4:	230d      	movs	r3, #13
 8001ef6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001efc:	4619      	mov	r1, r3
 8001efe:	487a      	ldr	r0, [pc, #488]	@ (80020e8 <MX_GPIO_Init+0x51c>)
 8001f00:	f000 fd8a 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f04:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001f16:	230e      	movs	r3, #14
 8001f18:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4871      	ldr	r0, [pc, #452]	@ (80020e8 <MX_GPIO_Init+0x51c>)
 8001f22:	f000 fd79 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f34:	2303      	movs	r3, #3
 8001f36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f38:	2307      	movs	r3, #7
 8001f3a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f40:	4619      	mov	r1, r3
 8001f42:	486a      	ldr	r0, [pc, #424]	@ (80020ec <MX_GPIO_Init+0x520>)
 8001f44:	f000 fd68 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001f48:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f62:	4619      	mov	r1, r3
 8001f64:	4861      	ldr	r0, [pc, #388]	@ (80020ec <MX_GPIO_Init+0x520>)
 8001f66:	f000 fd57 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f6a:	2340      	movs	r3, #64	@ 0x40
 8001f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001f7a:	230d      	movs	r3, #13
 8001f7c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f82:	4619      	mov	r1, r3
 8001f84:	485a      	ldr	r0, [pc, #360]	@ (80020f0 <MX_GPIO_Init+0x524>)
 8001f86:	f000 fd47 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f8a:	2380      	movs	r3, #128	@ 0x80
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4852      	ldr	r0, [pc, #328]	@ (80020f0 <MX_GPIO_Init+0x524>)
 8001fa6:	f000 fd37 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001faa:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001fae:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001fbc:	230c      	movs	r3, #12
 8001fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	484a      	ldr	r0, [pc, #296]	@ (80020f0 <MX_GPIO_Init+0x524>)
 8001fc8:	f000 fd26 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001fcc:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fde:	230a      	movs	r3, #10
 8001fe0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fec:	f000 fd14 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ff0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002002:	4619      	mov	r1, r3
 8002004:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002008:	f000 fd06 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800200c:	2301      	movs	r3, #1
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800201c:	2309      	movs	r3, #9
 800201e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002020:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002024:	4619      	mov	r1, r3
 8002026:	4831      	ldr	r0, [pc, #196]	@ (80020ec <MX_GPIO_Init+0x520>)
 8002028:	f000 fcf6 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800202c:	2304      	movs	r3, #4
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002038:	2303      	movs	r3, #3
 800203a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800203c:	230c      	movs	r3, #12
 800203e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002040:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002044:	4619      	mov	r1, r3
 8002046:	4829      	ldr	r0, [pc, #164]	@ (80020ec <MX_GPIO_Init+0x520>)
 8002048:	f000 fce6 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800204c:	2378      	movs	r3, #120	@ 0x78
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800205c:	2307      	movs	r3, #7
 800205e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002064:	4619      	mov	r1, r3
 8002066:	4821      	ldr	r0, [pc, #132]	@ (80020ec <MX_GPIO_Init+0x520>)
 8002068:	f000 fcd6 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800206c:	2338      	movs	r3, #56	@ 0x38
 800206e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002078:	2303      	movs	r3, #3
 800207a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800207c:	2306      	movs	r3, #6
 800207e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002080:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002084:	4619      	mov	r1, r3
 8002086:	4818      	ldr	r0, [pc, #96]	@ (80020e8 <MX_GPIO_Init+0x51c>)
 8002088:	f000 fcc6 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800208c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002092:	2312      	movs	r3, #18
 8002094:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800209e:	2304      	movs	r3, #4
 80020a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020a6:	4619      	mov	r1, r3
 80020a8:	480f      	ldr	r0, [pc, #60]	@ (80020e8 <MX_GPIO_Init+0x51c>)
 80020aa:	f000 fcb5 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020ae:	2301      	movs	r3, #1
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020be:	2302      	movs	r3, #2
 80020c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020c6:	4619      	mov	r1, r3
 80020c8:	480a      	ldr	r0, [pc, #40]	@ (80020f4 <MX_GPIO_Init+0x528>)
 80020ca:	f000 fca5 	bl	8002a18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	2017      	movs	r0, #23
 80020d4:	f000 fbaf 	bl	8002836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020d8:	2017      	movs	r0, #23
 80020da:	f000 fbc8 	bl	800286e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80020de:	bf00      	nop
 80020e0:	3738      	adds	r7, #56	@ 0x38
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	48000400 	.word	0x48000400
 80020ec:	48000c00 	.word	0x48000c00
 80020f0:	48000800 	.word	0x48000800
 80020f4:	48001000 	.word	0x48001000

080020f8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002100:	1d39      	adds	r1, r7, #4
 8002102:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002106:	2201      	movs	r2, #1
 8002108:	4803      	ldr	r0, [pc, #12]	@ (8002118 <__io_putchar+0x20>)
 800210a:	f002 fb73 	bl	80047f4 <HAL_UART_Transmit>
  return ch;
 800210e:	687b      	ldr	r3, [r7, #4]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	2004028c 	.word	0x2004028c

0800211c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002120:	b672      	cpsid	i
}
 8002122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <Error_Handler+0x8>

08002128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212e:	4b0f      	ldr	r3, [pc, #60]	@ (800216c <HAL_MspInit+0x44>)
 8002130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002132:	4a0e      	ldr	r2, [pc, #56]	@ (800216c <HAL_MspInit+0x44>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6613      	str	r3, [r2, #96]	@ 0x60
 800213a:	4b0c      	ldr	r3, [pc, #48]	@ (800216c <HAL_MspInit+0x44>)
 800213c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	4b09      	ldr	r3, [pc, #36]	@ (800216c <HAL_MspInit+0x44>)
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214a:	4a08      	ldr	r2, [pc, #32]	@ (800216c <HAL_MspInit+0x44>)
 800214c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002150:	6593      	str	r3, [r2, #88]	@ 0x58
 8002152:	4b06      	ldr	r3, [pc, #24]	@ (800216c <HAL_MspInit+0x44>)
 8002154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000

08002170 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b0b0      	sub	sp, #192	@ 0xc0
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002188:	f107 0318 	add.w	r3, r7, #24
 800218c:	2294      	movs	r2, #148	@ 0x94
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f004 fac7 	bl	8006724 <memset>
  if(huart->Instance==LPUART1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a48      	ldr	r2, [pc, #288]	@ (80022bc <HAL_UART_MspInit+0x14c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d13e      	bne.n	800221e <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80021a0:	2320      	movs	r3, #32
 80021a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80021a4:	2300      	movs	r3, #0
 80021a6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021a8:	f107 0318 	add.w	r3, r7, #24
 80021ac:	4618      	mov	r0, r3
 80021ae:	f001 fdb9 	bl	8003d24 <HAL_RCCEx_PeriphCLKConfig>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021b8:	f7ff ffb0 	bl	800211c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80021bc:	4b40      	ldr	r3, [pc, #256]	@ (80022c0 <HAL_UART_MspInit+0x150>)
 80021be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c0:	4a3f      	ldr	r2, [pc, #252]	@ (80022c0 <HAL_UART_MspInit+0x150>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80021c8:	4b3d      	ldr	r3, [pc, #244]	@ (80022c0 <HAL_UART_MspInit+0x150>)
 80021ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021d4:	4b3a      	ldr	r3, [pc, #232]	@ (80022c0 <HAL_UART_MspInit+0x150>)
 80021d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d8:	4a39      	ldr	r2, [pc, #228]	@ (80022c0 <HAL_UART_MspInit+0x150>)
 80021da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021e0:	4b37      	ldr	r3, [pc, #220]	@ (80022c0 <HAL_UART_MspInit+0x150>)
 80021e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80021ec:	f000 feb2 	bl	8002f54 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80021f0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80021f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002204:	2303      	movs	r3, #3
 8002206:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800220a:	2308      	movs	r3, #8
 800220c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002210:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002214:	4619      	mov	r1, r3
 8002216:	482b      	ldr	r0, [pc, #172]	@ (80022c4 <HAL_UART_MspInit+0x154>)
 8002218:	f000 fbfe 	bl	8002a18 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 800221c:	e04a      	b.n	80022b4 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a29      	ldr	r2, [pc, #164]	@ (80022c8 <HAL_UART_MspInit+0x158>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d145      	bne.n	80022b4 <HAL_UART_MspInit+0x144>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002228:	2301      	movs	r3, #1
 800222a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800222c:	2300      	movs	r3, #0
 800222e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002230:	f107 0318 	add.w	r3, r7, #24
 8002234:	4618      	mov	r0, r3
 8002236:	f001 fd75 	bl	8003d24 <HAL_RCCEx_PeriphCLKConfig>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002240:	f7ff ff6c 	bl	800211c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002244:	4b1e      	ldr	r3, [pc, #120]	@ (80022c0 <HAL_UART_MspInit+0x150>)
 8002246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002248:	4a1d      	ldr	r2, [pc, #116]	@ (80022c0 <HAL_UART_MspInit+0x150>)
 800224a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800224e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002250:	4b1b      	ldr	r3, [pc, #108]	@ (80022c0 <HAL_UART_MspInit+0x150>)
 8002252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002254:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800225c:	4b18      	ldr	r3, [pc, #96]	@ (80022c0 <HAL_UART_MspInit+0x150>)
 800225e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002260:	4a17      	ldr	r2, [pc, #92]	@ (80022c0 <HAL_UART_MspInit+0x150>)
 8002262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002266:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002268:	4b15      	ldr	r3, [pc, #84]	@ (80022c0 <HAL_UART_MspInit+0x150>)
 800226a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8002274:	f000 fe6e 	bl	8002f54 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002278:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800227c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228c:	2303      	movs	r3, #3
 800228e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002292:	2307      	movs	r3, #7
 8002294:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002298:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800229c:	4619      	mov	r1, r3
 800229e:	4809      	ldr	r0, [pc, #36]	@ (80022c4 <HAL_UART_MspInit+0x154>)
 80022a0:	f000 fbba 	bl	8002a18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2100      	movs	r1, #0
 80022a8:	2025      	movs	r0, #37	@ 0x25
 80022aa:	f000 fac4 	bl	8002836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ae:	2025      	movs	r0, #37	@ 0x25
 80022b0:	f000 fadd 	bl	800286e <HAL_NVIC_EnableIRQ>
}
 80022b4:	bf00      	nop
 80022b6:	37c0      	adds	r7, #192	@ 0xc0
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40008000 	.word	0x40008000
 80022c0:	40021000 	.word	0x40021000
 80022c4:	48001800 	.word	0x48001800
 80022c8:	40013800 	.word	0x40013800

080022cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <NMI_Handler+0x4>

080022d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <HardFault_Handler+0x4>

080022dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <MemManage_Handler+0x4>

080022e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <BusFault_Handler+0x4>

080022ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f0:	bf00      	nop
 80022f2:	e7fd      	b.n	80022f0 <UsageFault_Handler+0x4>

080022f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002322:	f000 f969 	bl	80025f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}

0800232a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800232e:	2040      	movs	r0, #64	@ 0x40
 8002330:	f000 fd34 	bl	8002d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}

08002338 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800233c:	4802      	ldr	r0, [pc, #8]	@ (8002348 <USART1_IRQHandler+0x10>)
 800233e:	f002 fae7 	bl	8004910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20040320 	.word	0x20040320

0800234c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return 1;
 8002350:	2301      	movs	r3, #1
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <_kill>:

int _kill(int pid, int sig)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002366:	f004 f9e5 	bl	8006734 <__errno>
 800236a:	4603      	mov	r3, r0
 800236c:	2216      	movs	r2, #22
 800236e:	601a      	str	r2, [r3, #0]
  return -1;
 8002370:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <_exit>:

void _exit (int status)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002384:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ffe7 	bl	800235c <_kill>
  while (1) {}    /* Make sure we hang here */
 800238e:	bf00      	nop
 8002390:	e7fd      	b.n	800238e <_exit+0x12>

08002392 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	e00a      	b.n	80023ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023a4:	f3af 8000 	nop.w
 80023a8:	4601      	mov	r1, r0
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	60ba      	str	r2, [r7, #8]
 80023b0:	b2ca      	uxtb	r2, r1
 80023b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	3301      	adds	r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	dbf0      	blt.n	80023a4 <_read+0x12>
  }

  return len;
 80023c2:	687b      	ldr	r3, [r7, #4]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	e009      	b.n	80023f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	60ba      	str	r2, [r7, #8]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fe86 	bl	80020f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	3301      	adds	r3, #1
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	dbf1      	blt.n	80023de <_write+0x12>
  }
  return len;
 80023fa:	687b      	ldr	r3, [r7, #4]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <_close>:

int _close(int file)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800240c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800242c:	605a      	str	r2, [r3, #4]
  return 0;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_isatty>:

int _isatty(int file)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002444:	2301      	movs	r3, #1
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002474:	4a14      	ldr	r2, [pc, #80]	@ (80024c8 <_sbrk+0x5c>)
 8002476:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <_sbrk+0x60>)
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002480:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <_sbrk+0x64>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002488:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <_sbrk+0x64>)
 800248a:	4a12      	ldr	r2, [pc, #72]	@ (80024d4 <_sbrk+0x68>)
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800248e:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <_sbrk+0x64>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	429a      	cmp	r2, r3
 800249a:	d207      	bcs.n	80024ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800249c:	f004 f94a 	bl	8006734 <__errno>
 80024a0:	4603      	mov	r3, r0
 80024a2:	220c      	movs	r2, #12
 80024a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024aa:	e009      	b.n	80024c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ac:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <_sbrk+0x64>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024b2:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <_sbrk+0x64>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	4a05      	ldr	r2, [pc, #20]	@ (80024d0 <_sbrk+0x64>)
 80024bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024be:	68fb      	ldr	r3, [r7, #12]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	200a0000 	.word	0x200a0000
 80024cc:	00000400 	.word	0x00000400
 80024d0:	200403b8 	.word	0x200403b8
 80024d4:	20040510 	.word	0x20040510

080024d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024dc:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <SystemInit+0x20>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e2:	4a05      	ldr	r2, [pc, #20]	@ (80024f8 <SystemInit+0x20>)
 80024e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002534 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002500:	f7ff ffea 	bl	80024d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002504:	480c      	ldr	r0, [pc, #48]	@ (8002538 <LoopForever+0x6>)
  ldr r1, =_edata
 8002506:	490d      	ldr	r1, [pc, #52]	@ (800253c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002508:	4a0d      	ldr	r2, [pc, #52]	@ (8002540 <LoopForever+0xe>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800250c:	e002      	b.n	8002514 <LoopCopyDataInit>

0800250e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800250e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002512:	3304      	adds	r3, #4

08002514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002518:	d3f9      	bcc.n	800250e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800251a:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800251c:	4c0a      	ldr	r4, [pc, #40]	@ (8002548 <LoopForever+0x16>)
  movs r3, #0
 800251e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002520:	e001      	b.n	8002526 <LoopFillZerobss>

08002522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002524:	3204      	adds	r2, #4

08002526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002528:	d3fb      	bcc.n	8002522 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800252a:	f004 f909 	bl	8006740 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800252e:	f7ff fa57 	bl	80019e0 <main>

08002532 <LoopForever>:

LoopForever:
    b LoopForever
 8002532:	e7fe      	b.n	8002532 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002534:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002538:	20040000 	.word	0x20040000
  ldr r1, =_edata
 800253c:	200401d4 	.word	0x200401d4
  ldr r2, =_sidata
 8002540:	08008a1c 	.word	0x08008a1c
  ldr r2, =_sbss
 8002544:	200401d4 	.word	0x200401d4
  ldr r4, =_ebss
 8002548:	2004050c 	.word	0x2004050c

0800254c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800254c:	e7fe      	b.n	800254c <ADC1_IRQHandler>

0800254e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002558:	2003      	movs	r0, #3
 800255a:	f000 f961 	bl	8002820 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800255e:	2000      	movs	r0, #0
 8002560:	f000 f80e 	bl	8002580 <HAL_InitTick>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	71fb      	strb	r3, [r7, #7]
 800256e:	e001      	b.n	8002574 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002570:	f7ff fdda 	bl	8002128 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002574:	79fb      	ldrb	r3, [r7, #7]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800258c:	4b17      	ldr	r3, [pc, #92]	@ (80025ec <HAL_InitTick+0x6c>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d023      	beq.n	80025dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002594:	4b16      	ldr	r3, [pc, #88]	@ (80025f0 <HAL_InitTick+0x70>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b14      	ldr	r3, [pc, #80]	@ (80025ec <HAL_InitTick+0x6c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f96d 	bl	800288a <HAL_SYSTICK_Config>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10f      	bne.n	80025d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b0f      	cmp	r3, #15
 80025ba:	d809      	bhi.n	80025d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025bc:	2200      	movs	r2, #0
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025c4:	f000 f937 	bl	8002836 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025c8:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <HAL_InitTick+0x74>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e007      	b.n	80025e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e004      	b.n	80025e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	e001      	b.n	80025e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20040008 	.word	0x20040008
 80025f0:	20040000 	.word	0x20040000
 80025f4:	20040004 	.word	0x20040004

080025f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_IncTick+0x20>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <HAL_IncTick+0x24>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4413      	add	r3, r2
 8002608:	4a04      	ldr	r2, [pc, #16]	@ (800261c <HAL_IncTick+0x24>)
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20040008 	.word	0x20040008
 800261c:	200403bc 	.word	0x200403bc

08002620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return uwTick;
 8002624:	4b03      	ldr	r3, [pc, #12]	@ (8002634 <HAL_GetTick+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	200403bc 	.word	0x200403bc

08002638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002640:	f7ff ffee 	bl	8002620 <HAL_GetTick>
 8002644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002650:	d005      	beq.n	800265e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002652:	4b0a      	ldr	r3, [pc, #40]	@ (800267c <HAL_Delay+0x44>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4413      	add	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800265e:	bf00      	nop
 8002660:	f7ff ffde 	bl	8002620 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	429a      	cmp	r2, r3
 800266e:	d8f7      	bhi.n	8002660 <HAL_Delay+0x28>
  {
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20040008 	.word	0x20040008

08002680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002690:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800269c:	4013      	ands	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b2:	4a04      	ldr	r2, [pc, #16]	@ (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	60d3      	str	r3, [r2, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026cc:	4b04      	ldr	r3, [pc, #16]	@ (80026e0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	f003 0307 	and.w	r3, r3, #7
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	db0b      	blt.n	800270e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	4907      	ldr	r1, [pc, #28]	@ (800271c <__NVIC_EnableIRQ+0x38>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	2001      	movs	r0, #1
 8002706:	fa00 f202 	lsl.w	r2, r0, r2
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000e100 	.word	0xe000e100

08002720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	2b00      	cmp	r3, #0
 8002732:	db0a      	blt.n	800274a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	490c      	ldr	r1, [pc, #48]	@ (800276c <__NVIC_SetPriority+0x4c>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	0112      	lsls	r2, r2, #4
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	440b      	add	r3, r1
 8002744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002748:	e00a      	b.n	8002760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4908      	ldr	r1, [pc, #32]	@ (8002770 <__NVIC_SetPriority+0x50>)
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	3b04      	subs	r3, #4
 8002758:	0112      	lsls	r2, r2, #4
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	440b      	add	r3, r1
 800275e:	761a      	strb	r2, [r3, #24]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000e100 	.word	0xe000e100
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	@ 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f1c3 0307 	rsb	r3, r3, #7
 800278e:	2b04      	cmp	r3, #4
 8002790:	bf28      	it	cs
 8002792:	2304      	movcs	r3, #4
 8002794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3304      	adds	r3, #4
 800279a:	2b06      	cmp	r3, #6
 800279c:	d902      	bls.n	80027a4 <NVIC_EncodePriority+0x30>
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3b03      	subs	r3, #3
 80027a2:	e000      	b.n	80027a6 <NVIC_EncodePriority+0x32>
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	401a      	ands	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	43d9      	mvns	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	4313      	orrs	r3, r2
         );
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3724      	adds	r7, #36	@ 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027ec:	d301      	bcc.n	80027f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ee:	2301      	movs	r3, #1
 80027f0:	e00f      	b.n	8002812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027f2:	4a0a      	ldr	r2, [pc, #40]	@ (800281c <SysTick_Config+0x40>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027fa:	210f      	movs	r1, #15
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002800:	f7ff ff8e 	bl	8002720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002804:	4b05      	ldr	r3, [pc, #20]	@ (800281c <SysTick_Config+0x40>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800280a:	4b04      	ldr	r3, [pc, #16]	@ (800281c <SysTick_Config+0x40>)
 800280c:	2207      	movs	r2, #7
 800280e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	e000e010 	.word	0xe000e010

08002820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff29 	bl	8002680 <__NVIC_SetPriorityGrouping>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002848:	f7ff ff3e 	bl	80026c8 <__NVIC_GetPriorityGrouping>
 800284c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	6978      	ldr	r0, [r7, #20]
 8002854:	f7ff ff8e 	bl	8002774 <NVIC_EncodePriority>
 8002858:	4602      	mov	r2, r0
 800285a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff5d 	bl	8002720 <__NVIC_SetPriority>
}
 8002866:	bf00      	nop
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	4603      	mov	r3, r0
 8002876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff31 	bl	80026e4 <__NVIC_EnableIRQ>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ffa2 	bl	80027dc <SysTick_Config>
 8002898:	4603      	mov	r3, r0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b085      	sub	sp, #20
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d008      	beq.n	80028cc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2204      	movs	r2, #4
 80028be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e040      	b.n	800294e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 020e 	bic.w	r2, r2, #14
 80028da:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028ea:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002900:	f003 021c 	and.w	r2, r3, #28
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	2101      	movs	r1, #1
 800290a:	fa01 f202 	lsl.w	r2, r1, r2
 800290e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002918:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00c      	beq.n	800293c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002930:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800293a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800294c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d005      	beq.n	800297e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2204      	movs	r2, #4
 8002976:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	e047      	b.n	8002a0e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 020e 	bic.w	r2, r2, #14
 800298c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0201 	bic.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	f003 021c 	and.w	r2, r3, #28
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	2101      	movs	r1, #1
 80029bc:	fa01 f202 	lsl.w	r2, r1, r2
 80029c0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029ca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00c      	beq.n	80029ee <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029ec:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	4798      	blx	r3
    }
  }
  return status;
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a26:	e166      	b.n	8002cf6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	4013      	ands	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8158 	beq.w	8002cf0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d005      	beq.n	8002a58 <HAL_GPIO_Init+0x40>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d130      	bne.n	8002aba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	2203      	movs	r2, #3
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a8e:	2201      	movs	r2, #1
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	f003 0201 	and.w	r2, r3, #1
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d017      	beq.n	8002af6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d123      	bne.n	8002b4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	08da      	lsrs	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3208      	adds	r2, #8
 8002b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	220f      	movs	r2, #15
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	08da      	lsrs	r2, r3, #3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3208      	adds	r2, #8
 8002b44:	6939      	ldr	r1, [r7, #16]
 8002b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	2203      	movs	r2, #3
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 0203 	and.w	r2, r3, #3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 80b2 	beq.w	8002cf0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8c:	4b61      	ldr	r3, [pc, #388]	@ (8002d14 <HAL_GPIO_Init+0x2fc>)
 8002b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b90:	4a60      	ldr	r2, [pc, #384]	@ (8002d14 <HAL_GPIO_Init+0x2fc>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b98:	4b5e      	ldr	r3, [pc, #376]	@ (8002d14 <HAL_GPIO_Init+0x2fc>)
 8002b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ba4:	4a5c      	ldr	r2, [pc, #368]	@ (8002d18 <HAL_GPIO_Init+0x300>)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	089b      	lsrs	r3, r3, #2
 8002baa:	3302      	adds	r3, #2
 8002bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	220f      	movs	r2, #15
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002bce:	d02b      	beq.n	8002c28 <HAL_GPIO_Init+0x210>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a52      	ldr	r2, [pc, #328]	@ (8002d1c <HAL_GPIO_Init+0x304>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d025      	beq.n	8002c24 <HAL_GPIO_Init+0x20c>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a51      	ldr	r2, [pc, #324]	@ (8002d20 <HAL_GPIO_Init+0x308>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d01f      	beq.n	8002c20 <HAL_GPIO_Init+0x208>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a50      	ldr	r2, [pc, #320]	@ (8002d24 <HAL_GPIO_Init+0x30c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d019      	beq.n	8002c1c <HAL_GPIO_Init+0x204>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a4f      	ldr	r2, [pc, #316]	@ (8002d28 <HAL_GPIO_Init+0x310>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d013      	beq.n	8002c18 <HAL_GPIO_Init+0x200>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a4e      	ldr	r2, [pc, #312]	@ (8002d2c <HAL_GPIO_Init+0x314>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00d      	beq.n	8002c14 <HAL_GPIO_Init+0x1fc>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a4d      	ldr	r2, [pc, #308]	@ (8002d30 <HAL_GPIO_Init+0x318>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d007      	beq.n	8002c10 <HAL_GPIO_Init+0x1f8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a4c      	ldr	r2, [pc, #304]	@ (8002d34 <HAL_GPIO_Init+0x31c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d101      	bne.n	8002c0c <HAL_GPIO_Init+0x1f4>
 8002c08:	2307      	movs	r3, #7
 8002c0a:	e00e      	b.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c0c:	2308      	movs	r3, #8
 8002c0e:	e00c      	b.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c10:	2306      	movs	r3, #6
 8002c12:	e00a      	b.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c14:	2305      	movs	r3, #5
 8002c16:	e008      	b.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c18:	2304      	movs	r3, #4
 8002c1a:	e006      	b.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e004      	b.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e002      	b.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	f002 0203 	and.w	r2, r2, #3
 8002c30:	0092      	lsls	r2, r2, #2
 8002c32:	4093      	lsls	r3, r2
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c3a:	4937      	ldr	r1, [pc, #220]	@ (8002d18 <HAL_GPIO_Init+0x300>)
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	3302      	adds	r3, #2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c48:	4b3b      	ldr	r3, [pc, #236]	@ (8002d38 <HAL_GPIO_Init+0x320>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c6c:	4a32      	ldr	r2, [pc, #200]	@ (8002d38 <HAL_GPIO_Init+0x320>)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c72:	4b31      	ldr	r3, [pc, #196]	@ (8002d38 <HAL_GPIO_Init+0x320>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c96:	4a28      	ldr	r2, [pc, #160]	@ (8002d38 <HAL_GPIO_Init+0x320>)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c9c:	4b26      	ldr	r3, [pc, #152]	@ (8002d38 <HAL_GPIO_Init+0x320>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8002d38 <HAL_GPIO_Init+0x320>)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d38 <HAL_GPIO_Init+0x320>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cea:	4a13      	ldr	r2, [pc, #76]	@ (8002d38 <HAL_GPIO_Init+0x320>)
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f47f ae91 	bne.w	8002a28 <HAL_GPIO_Init+0x10>
  }
}
 8002d06:	bf00      	nop
 8002d08:	bf00      	nop
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40010000 	.word	0x40010000
 8002d1c:	48000400 	.word	0x48000400
 8002d20:	48000800 	.word	0x48000800
 8002d24:	48000c00 	.word	0x48000c00
 8002d28:	48001000 	.word	0x48001000
 8002d2c:	48001400 	.word	0x48001400
 8002d30:	48001800 	.word	0x48001800
 8002d34:	48001c00 	.word	0x48001c00
 8002d38:	40010400 	.word	0x40010400

08002d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	887b      	ldrh	r3, [r7, #2]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	e001      	b.n	8002d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	807b      	strh	r3, [r7, #2]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d7c:	787b      	ldrb	r3, [r7, #1]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d82:	887a      	ldrh	r2, [r7, #2]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d88:	e002      	b.n	8002d90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d8a:	887a      	ldrh	r2, [r7, #2]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002da6:	4b08      	ldr	r3, [pc, #32]	@ (8002dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da8:	695a      	ldr	r2, [r3, #20]
 8002daa:	88fb      	ldrh	r3, [r7, #6]
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d006      	beq.n	8002dc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002db2:	4a05      	ldr	r2, [pc, #20]	@ (8002dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe fd9a 	bl	80018f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40010400 	.word	0x40010400

08002dcc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002e08 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002dd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ddc:	d102      	bne.n	8002de4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002dde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002de2:	e00b      	b.n	8002dfc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002de4:	4b08      	ldr	r3, [pc, #32]	@ (8002e08 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002df2:	d102      	bne.n	8002dfa <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002df4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002df8:	e000      	b.n	8002dfc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002dfa:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40007000 	.word	0x40007000

08002e0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d141      	bne.n	8002e9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e26:	d131      	bne.n	8002e8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e28:	4b47      	ldr	r3, [pc, #284]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e2e:	4a46      	ldr	r2, [pc, #280]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e38:	4b43      	ldr	r3, [pc, #268]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e40:	4a41      	ldr	r2, [pc, #260]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002e48:	4b40      	ldr	r3, [pc, #256]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2232      	movs	r2, #50	@ 0x32
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	4a3f      	ldr	r2, [pc, #252]	@ (8002f50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	0c9b      	lsrs	r3, r3, #18
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e5e:	e002      	b.n	8002e66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e66:	4b38      	ldr	r3, [pc, #224]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e72:	d102      	bne.n	8002e7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f2      	bne.n	8002e60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e7a:	4b33      	ldr	r3, [pc, #204]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e86:	d158      	bne.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e057      	b.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e92:	4a2d      	ldr	r2, [pc, #180]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002e9c:	e04d      	b.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ea4:	d141      	bne.n	8002f2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ea6:	4b28      	ldr	r3, [pc, #160]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eb2:	d131      	bne.n	8002f18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002eb4:	4b24      	ldr	r3, [pc, #144]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eba:	4a23      	ldr	r2, [pc, #140]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ec4:	4b20      	ldr	r3, [pc, #128]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ece:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ed2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2232      	movs	r2, #50	@ 0x32
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	4a1c      	ldr	r2, [pc, #112]	@ (8002f50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	0c9b      	lsrs	r3, r3, #18
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eea:	e002      	b.n	8002ef2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ef2:	4b15      	ldr	r3, [pc, #84]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002efe:	d102      	bne.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f2      	bne.n	8002eec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f06:	4b10      	ldr	r3, [pc, #64]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f12:	d112      	bne.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e011      	b.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f18:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f28:	e007      	b.n	8002f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f2a:	4b07      	ldr	r3, [pc, #28]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f32:	4a05      	ldr	r2, [pc, #20]	@ (8002f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f38:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	40007000 	.word	0x40007000
 8002f4c:	20040000 	.word	0x20040000
 8002f50:	431bde83 	.word	0x431bde83

08002f54 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002f58:	4b05      	ldr	r3, [pc, #20]	@ (8002f70 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4a04      	ldr	r2, [pc, #16]	@ (8002f70 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f62:	6053      	str	r3, [r2, #4]
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40007000 	.word	0x40007000

08002f74 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f000 bc08 	b.w	8003798 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f88:	4b96      	ldr	r3, [pc, #600]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 030c 	and.w	r3, r3, #12
 8002f90:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f92:	4b94      	ldr	r3, [pc, #592]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80e4 	beq.w	8003172 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d007      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x4c>
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2b0c      	cmp	r3, #12
 8002fb4:	f040 808b 	bne.w	80030ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	f040 8087 	bne.w	80030ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fc0:	4b88      	ldr	r3, [pc, #544]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x64>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e3df      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1a      	ldr	r2, [r3, #32]
 8002fdc:	4b81      	ldr	r3, [pc, #516]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d004      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x7e>
 8002fe8:	4b7e      	ldr	r3, [pc, #504]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ff0:	e005      	b.n	8002ffe <HAL_RCC_OscConfig+0x8a>
 8002ff2:	4b7c      	ldr	r3, [pc, #496]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d223      	bcs.n	800304a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fdcc 	bl	8003ba4 <RCC_SetFlashLatencyFromMSIRange>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e3c0      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003016:	4b73      	ldr	r3, [pc, #460]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a72      	ldr	r2, [pc, #456]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800301c:	f043 0308 	orr.w	r3, r3, #8
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b70      	ldr	r3, [pc, #448]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	496d      	ldr	r1, [pc, #436]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003034:	4b6b      	ldr	r3, [pc, #428]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	4968      	ldr	r1, [pc, #416]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
 8003048:	e025      	b.n	8003096 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800304a:	4b66      	ldr	r3, [pc, #408]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a65      	ldr	r2, [pc, #404]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003050:	f043 0308 	orr.w	r3, r3, #8
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	4b63      	ldr	r3, [pc, #396]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4960      	ldr	r1, [pc, #384]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003068:	4b5e      	ldr	r3, [pc, #376]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	495b      	ldr	r1, [pc, #364]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fd8c 	bl	8003ba4 <RCC_SetFlashLatencyFromMSIRange>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e380      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003096:	f000 fcc1 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 800309a:	4602      	mov	r2, r0
 800309c:	4b51      	ldr	r3, [pc, #324]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	4950      	ldr	r1, [pc, #320]	@ (80031e8 <HAL_RCC_OscConfig+0x274>)
 80030a8:	5ccb      	ldrb	r3, [r1, r3]
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	fa22 f303 	lsr.w	r3, r2, r3
 80030b2:	4a4e      	ldr	r2, [pc, #312]	@ (80031ec <HAL_RCC_OscConfig+0x278>)
 80030b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030b6:	4b4e      	ldr	r3, [pc, #312]	@ (80031f0 <HAL_RCC_OscConfig+0x27c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fa60 	bl	8002580 <HAL_InitTick>
 80030c0:	4603      	mov	r3, r0
 80030c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d052      	beq.n	8003170 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	e364      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d032      	beq.n	800313c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030d6:	4b43      	ldr	r3, [pc, #268]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a42      	ldr	r2, [pc, #264]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030e2:	f7ff fa9d 	bl	8002620 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030ea:	f7ff fa99 	bl	8002620 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e34d      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030fc:	4b39      	ldr	r3, [pc, #228]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003108:	4b36      	ldr	r3, [pc, #216]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a35      	ldr	r2, [pc, #212]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800310e:	f043 0308 	orr.w	r3, r3, #8
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	4b33      	ldr	r3, [pc, #204]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	4930      	ldr	r1, [pc, #192]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003126:	4b2f      	ldr	r3, [pc, #188]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	492b      	ldr	r1, [pc, #172]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
 800313a:	e01a      	b.n	8003172 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800313c:	4b29      	ldr	r3, [pc, #164]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a28      	ldr	r2, [pc, #160]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003142:	f023 0301 	bic.w	r3, r3, #1
 8003146:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003148:	f7ff fa6a 	bl	8002620 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003150:	f7ff fa66 	bl	8002620 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e31a      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003162:	4b20      	ldr	r3, [pc, #128]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x1dc>
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003170:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d073      	beq.n	8003266 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b08      	cmp	r3, #8
 8003182:	d005      	beq.n	8003190 <HAL_RCC_OscConfig+0x21c>
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d10e      	bne.n	80031a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d10b      	bne.n	80031a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	4b14      	ldr	r3, [pc, #80]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d063      	beq.n	8003264 <HAL_RCC_OscConfig+0x2f0>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d15f      	bne.n	8003264 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e2f7      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b0:	d106      	bne.n	80031c0 <HAL_RCC_OscConfig+0x24c>
 80031b2:	4b0c      	ldr	r3, [pc, #48]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a0b      	ldr	r2, [pc, #44]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80031b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	e025      	b.n	800320c <HAL_RCC_OscConfig+0x298>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031c8:	d114      	bne.n	80031f4 <HAL_RCC_OscConfig+0x280>
 80031ca:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a05      	ldr	r2, [pc, #20]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80031d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	4b03      	ldr	r3, [pc, #12]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a02      	ldr	r2, [pc, #8]	@ (80031e4 <HAL_RCC_OscConfig+0x270>)
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	e013      	b.n	800320c <HAL_RCC_OscConfig+0x298>
 80031e4:	40021000 	.word	0x40021000
 80031e8:	08008624 	.word	0x08008624
 80031ec:	20040000 	.word	0x20040000
 80031f0:	20040004 	.word	0x20040004
 80031f4:	4ba0      	ldr	r3, [pc, #640]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a9f      	ldr	r2, [pc, #636]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80031fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b9d      	ldr	r3, [pc, #628]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a9c      	ldr	r2, [pc, #624]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800320a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7ff fa04 	bl	8002620 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800321c:	f7ff fa00 	bl	8002620 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	@ 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e2b4      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800322e:	4b92      	ldr	r3, [pc, #584]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x2a8>
 800323a:	e014      	b.n	8003266 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7ff f9f0 	bl	8002620 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003244:	f7ff f9ec 	bl	8002620 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	@ 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e2a0      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003256:	4b88      	ldr	r3, [pc, #544]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x2d0>
 8003262:	e000      	b.n	8003266 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d060      	beq.n	8003334 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d005      	beq.n	8003284 <HAL_RCC_OscConfig+0x310>
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2b0c      	cmp	r3, #12
 800327c:	d119      	bne.n	80032b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d116      	bne.n	80032b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003284:	4b7c      	ldr	r3, [pc, #496]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_OscConfig+0x328>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e27d      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329c:	4b76      	ldr	r3, [pc, #472]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	061b      	lsls	r3, r3, #24
 80032aa:	4973      	ldr	r1, [pc, #460]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032b0:	e040      	b.n	8003334 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d023      	beq.n	8003302 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6e      	ldr	r2, [pc, #440]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c6:	f7ff f9ab 	bl	8002620 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ce:	f7ff f9a7 	bl	8002620 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e25b      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e0:	4b65      	ldr	r3, [pc, #404]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ec:	4b62      	ldr	r3, [pc, #392]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	061b      	lsls	r3, r3, #24
 80032fa:	495f      	ldr	r1, [pc, #380]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
 8003300:	e018      	b.n	8003334 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003302:	4b5d      	ldr	r3, [pc, #372]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a5c      	ldr	r2, [pc, #368]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800330c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7ff f987 	bl	8002620 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003316:	f7ff f983 	bl	8002620 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e237      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003328:	4b53      	ldr	r3, [pc, #332]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f0      	bne.n	8003316 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d03c      	beq.n	80033ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01c      	beq.n	8003382 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003348:	4b4b      	ldr	r3, [pc, #300]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800334a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800334e:	4a4a      	ldr	r2, [pc, #296]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003358:	f7ff f962 	bl	8002620 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003360:	f7ff f95e 	bl	8002620 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e212      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003372:	4b41      	ldr	r3, [pc, #260]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0ef      	beq.n	8003360 <HAL_RCC_OscConfig+0x3ec>
 8003380:	e01b      	b.n	80033ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003382:	4b3d      	ldr	r3, [pc, #244]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003384:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003388:	4a3b      	ldr	r2, [pc, #236]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003392:	f7ff f945 	bl	8002620 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339a:	f7ff f941 	bl	8002620 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e1f5      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033ac:	4b32      	ldr	r3, [pc, #200]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80033ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1ef      	bne.n	800339a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 80a6 	beq.w	8003514 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033c8:	2300      	movs	r3, #0
 80033ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80033ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10d      	bne.n	80033f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d8:	4b27      	ldr	r3, [pc, #156]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80033da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033dc:	4a26      	ldr	r2, [pc, #152]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80033de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033e4:	4b24      	ldr	r3, [pc, #144]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 80033e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f0:	2301      	movs	r3, #1
 80033f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f4:	4b21      	ldr	r3, [pc, #132]	@ (800347c <HAL_RCC_OscConfig+0x508>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d118      	bne.n	8003432 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003400:	4b1e      	ldr	r3, [pc, #120]	@ (800347c <HAL_RCC_OscConfig+0x508>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1d      	ldr	r2, [pc, #116]	@ (800347c <HAL_RCC_OscConfig+0x508>)
 8003406:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800340a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340c:	f7ff f908 	bl	8002620 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003414:	f7ff f904 	bl	8002620 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e1b8      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003426:	4b15      	ldr	r3, [pc, #84]	@ (800347c <HAL_RCC_OscConfig+0x508>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d108      	bne.n	800344c <HAL_RCC_OscConfig+0x4d8>
 800343a:	4b0f      	ldr	r3, [pc, #60]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003440:	4a0d      	ldr	r2, [pc, #52]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800344a:	e029      	b.n	80034a0 <HAL_RCC_OscConfig+0x52c>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b05      	cmp	r3, #5
 8003452:	d115      	bne.n	8003480 <HAL_RCC_OscConfig+0x50c>
 8003454:	4b08      	ldr	r3, [pc, #32]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345a:	4a07      	ldr	r2, [pc, #28]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800345c:	f043 0304 	orr.w	r3, r3, #4
 8003460:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003464:	4b04      	ldr	r3, [pc, #16]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346a:	4a03      	ldr	r2, [pc, #12]	@ (8003478 <HAL_RCC_OscConfig+0x504>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003474:	e014      	b.n	80034a0 <HAL_RCC_OscConfig+0x52c>
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000
 800347c:	40007000 	.word	0x40007000
 8003480:	4b9d      	ldr	r3, [pc, #628]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003486:	4a9c      	ldr	r2, [pc, #624]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003490:	4b99      	ldr	r3, [pc, #612]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003496:	4a98      	ldr	r2, [pc, #608]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003498:	f023 0304 	bic.w	r3, r3, #4
 800349c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d016      	beq.n	80034d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a8:	f7ff f8ba 	bl	8002620 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b0:	f7ff f8b6 	bl	8002620 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e168      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c6:	4b8c      	ldr	r3, [pc, #560]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0ed      	beq.n	80034b0 <HAL_RCC_OscConfig+0x53c>
 80034d4:	e015      	b.n	8003502 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d6:	f7ff f8a3 	bl	8002620 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034de:	f7ff f89f 	bl	8002620 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e151      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034f4:	4b80      	ldr	r3, [pc, #512]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1ed      	bne.n	80034de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003502:	7ffb      	ldrb	r3, [r7, #31]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d105      	bne.n	8003514 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003508:	4b7b      	ldr	r3, [pc, #492]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350c:	4a7a      	ldr	r2, [pc, #488]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 800350e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003512:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d03c      	beq.n	800359a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01c      	beq.n	8003562 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003528:	4b73      	ldr	r3, [pc, #460]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 800352a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800352e:	4a72      	ldr	r2, [pc, #456]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7ff f872 	bl	8002620 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003540:	f7ff f86e 	bl	8002620 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e122      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003552:	4b69      	ldr	r3, [pc, #420]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003554:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0ef      	beq.n	8003540 <HAL_RCC_OscConfig+0x5cc>
 8003560:	e01b      	b.n	800359a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003562:	4b65      	ldr	r3, [pc, #404]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003564:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003568:	4a63      	ldr	r2, [pc, #396]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003572:	f7ff f855 	bl	8002620 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800357a:	f7ff f851 	bl	8002620 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e105      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800358c:	4b5a      	ldr	r3, [pc, #360]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 800358e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1ef      	bne.n	800357a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 80f9 	beq.w	8003796 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	f040 80cf 	bne.w	800374c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035ae:	4b52      	ldr	r3, [pc, #328]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f003 0203 	and.w	r2, r3, #3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035be:	429a      	cmp	r2, r3
 80035c0:	d12c      	bne.n	800361c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035cc:	3b01      	subs	r3, #1
 80035ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d123      	bne.n	800361c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d11b      	bne.n	800361c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d113      	bne.n	800361c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	3b01      	subs	r3, #1
 8003602:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d109      	bne.n	800361c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	085b      	lsrs	r3, r3, #1
 8003614:	3b01      	subs	r3, #1
 8003616:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003618:	429a      	cmp	r2, r3
 800361a:	d071      	beq.n	8003700 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d068      	beq.n	80036f4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003622:	4b35      	ldr	r3, [pc, #212]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d105      	bne.n	800363a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800362e:	4b32      	ldr	r3, [pc, #200]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e0ac      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800363e:	4b2e      	ldr	r3, [pc, #184]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a2d      	ldr	r2, [pc, #180]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003644:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003648:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800364a:	f7fe ffe9 	bl	8002620 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003652:	f7fe ffe5 	bl	8002620 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e099      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003664:	4b24      	ldr	r3, [pc, #144]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1f0      	bne.n	8003652 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003670:	4b21      	ldr	r3, [pc, #132]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	4b21      	ldr	r3, [pc, #132]	@ (80036fc <HAL_RCC_OscConfig+0x788>)
 8003676:	4013      	ands	r3, r2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003680:	3a01      	subs	r2, #1
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	4311      	orrs	r1, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800368a:	0212      	lsls	r2, r2, #8
 800368c:	4311      	orrs	r1, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003692:	0852      	lsrs	r2, r2, #1
 8003694:	3a01      	subs	r2, #1
 8003696:	0552      	lsls	r2, r2, #21
 8003698:	4311      	orrs	r1, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800369e:	0852      	lsrs	r2, r2, #1
 80036a0:	3a01      	subs	r2, #1
 80036a2:	0652      	lsls	r2, r2, #25
 80036a4:	4311      	orrs	r1, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036aa:	06d2      	lsls	r2, r2, #27
 80036ac:	430a      	orrs	r2, r1
 80036ae:	4912      	ldr	r1, [pc, #72]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036b4:	4b10      	ldr	r3, [pc, #64]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a0f      	ldr	r2, [pc, #60]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 80036ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036c0:	4b0d      	ldr	r3, [pc, #52]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4a0c      	ldr	r2, [pc, #48]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 80036c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036cc:	f7fe ffa8 	bl	8002620 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fe ffa4 	bl	8002620 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e058      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e6:	4b04      	ldr	r3, [pc, #16]	@ (80036f8 <HAL_RCC_OscConfig+0x784>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036f2:	e050      	b.n	8003796 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e04f      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
 80036f8:	40021000 	.word	0x40021000
 80036fc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003700:	4b27      	ldr	r3, [pc, #156]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d144      	bne.n	8003796 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800370c:	4b24      	ldr	r3, [pc, #144]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a23      	ldr	r2, [pc, #140]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 8003712:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003716:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003718:	4b21      	ldr	r3, [pc, #132]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4a20      	ldr	r2, [pc, #128]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 800371e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003722:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003724:	f7fe ff7c 	bl	8002620 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372c:	f7fe ff78 	bl	8002620 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e02c      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373e:	4b18      	ldr	r3, [pc, #96]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x7b8>
 800374a:	e024      	b.n	8003796 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d01f      	beq.n	8003792 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003752:	4b13      	ldr	r3, [pc, #76]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a12      	ldr	r2, [pc, #72]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 8003758:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800375c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375e:	f7fe ff5f 	bl	8002620 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003766:	f7fe ff5b 	bl	8002620 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e00f      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003778:	4b09      	ldr	r3, [pc, #36]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f0      	bne.n	8003766 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003784:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	4905      	ldr	r1, [pc, #20]	@ (80037a0 <HAL_RCC_OscConfig+0x82c>)
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <HAL_RCC_OscConfig+0x830>)
 800378c:	4013      	ands	r3, r2
 800378e:	60cb      	str	r3, [r1, #12]
 8003790:	e001      	b.n	8003796 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3720      	adds	r7, #32
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	feeefffc 	.word	0xfeeefffc

080037a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e11d      	b.n	80039fc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c0:	4b90      	ldr	r3, [pc, #576]	@ (8003a04 <HAL_RCC_ClockConfig+0x25c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d910      	bls.n	80037f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b8d      	ldr	r3, [pc, #564]	@ (8003a04 <HAL_RCC_ClockConfig+0x25c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 020f 	bic.w	r2, r3, #15
 80037d6:	498b      	ldr	r1, [pc, #556]	@ (8003a04 <HAL_RCC_ClockConfig+0x25c>)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	4313      	orrs	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037de:	4b89      	ldr	r3, [pc, #548]	@ (8003a04 <HAL_RCC_ClockConfig+0x25c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e105      	b.n	80039fc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d010      	beq.n	800381e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	4b81      	ldr	r3, [pc, #516]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003808:	429a      	cmp	r2, r3
 800380a:	d908      	bls.n	800381e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800380c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	497b      	ldr	r1, [pc, #492]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d079      	beq.n	800391e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d11e      	bne.n	8003870 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003832:	4b75      	ldr	r3, [pc, #468]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e0dc      	b.n	80039fc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003842:	f000 fa09 	bl	8003c58 <RCC_GetSysClockFreqFromPLLSource>
 8003846:	4603      	mov	r3, r0
 8003848:	4a70      	ldr	r2, [pc, #448]	@ (8003a0c <HAL_RCC_ClockConfig+0x264>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d946      	bls.n	80038dc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800384e:	4b6e      	ldr	r3, [pc, #440]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d140      	bne.n	80038dc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800385a:	4b6b      	ldr	r3, [pc, #428]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003862:	4a69      	ldr	r2, [pc, #420]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 8003864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003868:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800386a:	2380      	movs	r3, #128	@ 0x80
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	e035      	b.n	80038dc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d107      	bne.n	8003888 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003878:	4b63      	ldr	r3, [pc, #396]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d115      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0b9      	b.n	80039fc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003890:	4b5d      	ldr	r3, [pc, #372]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d109      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0ad      	b.n	80039fc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038a0:	4b59      	ldr	r3, [pc, #356]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0a5      	b.n	80039fc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80038b0:	f000 f8b4 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 80038b4:	4603      	mov	r3, r0
 80038b6:	4a55      	ldr	r2, [pc, #340]	@ (8003a0c <HAL_RCC_ClockConfig+0x264>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d90f      	bls.n	80038dc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80038bc:	4b52      	ldr	r3, [pc, #328]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d109      	bne.n	80038dc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 80038d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038d6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038d8:	2380      	movs	r3, #128	@ 0x80
 80038da:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038dc:	4b4a      	ldr	r3, [pc, #296]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f023 0203 	bic.w	r2, r3, #3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	4947      	ldr	r1, [pc, #284]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ee:	f7fe fe97 	bl	8002620 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f4:	e00a      	b.n	800390c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f6:	f7fe fe93 	bl	8002620 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003904:	4293      	cmp	r3, r2
 8003906:	d901      	bls.n	800390c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e077      	b.n	80039fc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390c:	4b3e      	ldr	r3, [pc, #248]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 020c 	and.w	r2, r3, #12
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	429a      	cmp	r2, r3
 800391c:	d1eb      	bne.n	80038f6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2b80      	cmp	r3, #128	@ 0x80
 8003922:	d105      	bne.n	8003930 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003924:	4b38      	ldr	r3, [pc, #224]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	4a37      	ldr	r2, [pc, #220]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 800392a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800392e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d010      	beq.n	800395e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	4b31      	ldr	r3, [pc, #196]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003948:	429a      	cmp	r2, r3
 800394a:	d208      	bcs.n	800395e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800394c:	4b2e      	ldr	r3, [pc, #184]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	492b      	ldr	r1, [pc, #172]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800395e:	4b29      	ldr	r3, [pc, #164]	@ (8003a04 <HAL_RCC_ClockConfig+0x25c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d210      	bcs.n	800398e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396c:	4b25      	ldr	r3, [pc, #148]	@ (8003a04 <HAL_RCC_ClockConfig+0x25c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f023 020f 	bic.w	r2, r3, #15
 8003974:	4923      	ldr	r1, [pc, #140]	@ (8003a04 <HAL_RCC_ClockConfig+0x25c>)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	4313      	orrs	r3, r2
 800397a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800397c:	4b21      	ldr	r3, [pc, #132]	@ (8003a04 <HAL_RCC_ClockConfig+0x25c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d001      	beq.n	800398e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e036      	b.n	80039fc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800399a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	4918      	ldr	r1, [pc, #96]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d009      	beq.n	80039cc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b8:	4b13      	ldr	r3, [pc, #76]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4910      	ldr	r1, [pc, #64]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039cc:	f000 f826 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 80039d0:	4602      	mov	r2, r0
 80039d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003a08 <HAL_RCC_ClockConfig+0x260>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	490c      	ldr	r1, [pc, #48]	@ (8003a10 <HAL_RCC_ClockConfig+0x268>)
 80039de:	5ccb      	ldrb	r3, [r1, r3]
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
 80039e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003a14 <HAL_RCC_ClockConfig+0x26c>)
 80039ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003a18 <HAL_RCC_ClockConfig+0x270>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fe fdc5 	bl	8002580 <HAL_InitTick>
 80039f6:	4603      	mov	r3, r0
 80039f8:	73fb      	strb	r3, [r7, #15]

  return status;
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40022000 	.word	0x40022000
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	04c4b400 	.word	0x04c4b400
 8003a10:	08008624 	.word	0x08008624
 8003a14:	20040000 	.word	0x20040000
 8003a18:	20040004 	.word	0x20040004

08003a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b089      	sub	sp, #36	@ 0x24
 8003a20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a34:	4b3b      	ldr	r3, [pc, #236]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0x34>
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b0c      	cmp	r3, #12
 8003a48:	d121      	bne.n	8003a8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d11e      	bne.n	8003a8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a50:	4b34      	ldr	r3, [pc, #208]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d107      	bne.n	8003a6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a5c:	4b31      	ldr	r3, [pc, #196]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a62:	0a1b      	lsrs	r3, r3, #8
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	61fb      	str	r3, [r7, #28]
 8003a6a:	e005      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a78:	4a2b      	ldr	r2, [pc, #172]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10d      	bne.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d102      	bne.n	8003a9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a94:	4b25      	ldr	r3, [pc, #148]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x110>)
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	e004      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003aa0:	4b23      	ldr	r3, [pc, #140]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x114>)
 8003aa2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b0c      	cmp	r3, #12
 8003aa8:	d134      	bne.n	8003b14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d003      	beq.n	8003ac2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d003      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0xac>
 8003ac0:	e005      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ac4:	617b      	str	r3, [r7, #20]
      break;
 8003ac6:	e005      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ac8:	4b19      	ldr	r3, [pc, #100]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x114>)
 8003aca:	617b      	str	r3, [r7, #20]
      break;
 8003acc:	e002      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	617b      	str	r3, [r7, #20]
      break;
 8003ad2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ad4:	4b13      	ldr	r3, [pc, #76]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	3301      	adds	r3, #1
 8003ae0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ae2:	4b10      	ldr	r3, [pc, #64]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	0a1b      	lsrs	r3, r3, #8
 8003ae8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	fb03 f202 	mul.w	r2, r3, r2
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003afa:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	0e5b      	lsrs	r3, r3, #25
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	3301      	adds	r3, #1
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b14:	69bb      	ldr	r3, [r7, #24]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3724      	adds	r7, #36	@ 0x24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	0800863c 	.word	0x0800863c
 8003b2c:	00f42400 	.word	0x00f42400
 8003b30:	007a1200 	.word	0x007a1200

08003b34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b38:	4b03      	ldr	r3, [pc, #12]	@ (8003b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	20040000 	.word	0x20040000

08003b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b50:	f7ff fff0 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b06      	ldr	r3, [pc, #24]	@ (8003b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	0a1b      	lsrs	r3, r3, #8
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4904      	ldr	r1, [pc, #16]	@ (8003b74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b62:	5ccb      	ldrb	r3, [r1, r3]
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40021000 	.word	0x40021000
 8003b74:	08008634 	.word	0x08008634

08003b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b7c:	f7ff ffda 	bl	8003b34 <HAL_RCC_GetHCLKFreq>
 8003b80:	4602      	mov	r2, r0
 8003b82:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	0adb      	lsrs	r3, r3, #11
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	4904      	ldr	r1, [pc, #16]	@ (8003ba0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b8e:	5ccb      	ldrb	r3, [r1, r3]
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	08008634 	.word	0x08008634

08003ba4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bac:	2300      	movs	r3, #0
 8003bae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bb0:	4b27      	ldr	r3, [pc, #156]	@ (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bbc:	f7ff f906 	bl	8002dcc <HAL_PWREx_GetVoltageRange>
 8003bc0:	6178      	str	r0, [r7, #20]
 8003bc2:	e014      	b.n	8003bee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bc4:	4b22      	ldr	r3, [pc, #136]	@ (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc8:	4a21      	ldr	r2, [pc, #132]	@ (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bce:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bdc:	f7ff f8f6 	bl	8002dcc <HAL_PWREx_GetVoltageRange>
 8003be0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003be2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be6:	4a1a      	ldr	r2, [pc, #104]	@ (8003c50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003be8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bf4:	d10b      	bne.n	8003c0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b80      	cmp	r3, #128	@ 0x80
 8003bfa:	d913      	bls.n	8003c24 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c00:	d902      	bls.n	8003c08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c02:	2302      	movs	r3, #2
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	e00d      	b.n	8003c24 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c08:	2301      	movs	r3, #1
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	e00a      	b.n	8003c24 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c12:	d902      	bls.n	8003c1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003c14:	2302      	movs	r3, #2
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	e004      	b.n	8003c24 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b70      	cmp	r3, #112	@ 0x70
 8003c1e:	d101      	bne.n	8003c24 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c20:	2301      	movs	r3, #1
 8003c22:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c24:	4b0b      	ldr	r3, [pc, #44]	@ (8003c54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f023 020f 	bic.w	r2, r3, #15
 8003c2c:	4909      	ldr	r1, [pc, #36]	@ (8003c54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c34:	4b07      	ldr	r3, [pc, #28]	@ (8003c54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d001      	beq.n	8003c46 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40022000 	.word	0x40022000

08003c58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8003d14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d00b      	beq.n	8003c86 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d825      	bhi.n	8003cc0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d008      	beq.n	8003c8c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d11f      	bne.n	8003cc0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003c80:	4b25      	ldr	r3, [pc, #148]	@ (8003d18 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c82:	613b      	str	r3, [r7, #16]
    break;
 8003c84:	e01f      	b.n	8003cc6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003c86:	4b25      	ldr	r3, [pc, #148]	@ (8003d1c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003c88:	613b      	str	r3, [r7, #16]
    break;
 8003c8a:	e01c      	b.n	8003cc6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c8c:	4b21      	ldr	r3, [pc, #132]	@ (8003d14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d107      	bne.n	8003ca8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c98:	4b1e      	ldr	r3, [pc, #120]	@ (8003d14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	e005      	b.n	8003cb4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8003d20 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cbc:	613b      	str	r3, [r7, #16]
    break;
 8003cbe:	e002      	b.n	8003cc6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	613b      	str	r3, [r7, #16]
    break;
 8003cc4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cc6:	4b13      	ldr	r3, [pc, #76]	@ (8003d14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	091b      	lsrs	r3, r3, #4
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	fb03 f202 	mul.w	r2, r3, r2
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cea:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cec:	4b09      	ldr	r3, [pc, #36]	@ (8003d14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	0e5b      	lsrs	r3, r3, #25
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d04:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003d06:	683b      	ldr	r3, [r7, #0]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	40021000 	.word	0x40021000
 8003d18:	00f42400 	.word	0x00f42400
 8003d1c:	007a1200 	.word	0x007a1200
 8003d20:	0800863c 	.word	0x0800863c

08003d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d30:	2300      	movs	r3, #0
 8003d32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d040      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d44:	2b80      	cmp	r3, #128	@ 0x80
 8003d46:	d02a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d48:	2b80      	cmp	r3, #128	@ 0x80
 8003d4a:	d825      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d4c:	2b60      	cmp	r3, #96	@ 0x60
 8003d4e:	d026      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d50:	2b60      	cmp	r3, #96	@ 0x60
 8003d52:	d821      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d54:	2b40      	cmp	r3, #64	@ 0x40
 8003d56:	d006      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003d58:	2b40      	cmp	r3, #64	@ 0x40
 8003d5a:	d81d      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d009      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d010      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003d64:	e018      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d66:	4b89      	ldr	r3, [pc, #548]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	4a88      	ldr	r2, [pc, #544]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d70:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d72:	e015      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fb02 	bl	8004384 <RCCEx_PLLSAI1_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d84:	e00c      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3320      	adds	r3, #32
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fbed 	bl	800456c <RCCEx_PLLSAI2_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d96:	e003      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	74fb      	strb	r3, [r7, #19]
      break;
 8003d9c:	e000      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da0:	7cfb      	ldrb	r3, [r7, #19]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10b      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003da6:	4b79      	ldr	r3, [pc, #484]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003da8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003dac:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003db4:	4975      	ldr	r1, [pc, #468]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003dbc:	e001      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbe:	7cfb      	ldrb	r3, [r7, #19]
 8003dc0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d047      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dd6:	d030      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003dd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ddc:	d82a      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003dde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003de2:	d02a      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003de4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003de8:	d824      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003dea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dee:	d008      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003df4:	d81e      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003dfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dfe:	d010      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e00:	e018      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e02:	4b62      	ldr	r3, [pc, #392]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	4a61      	ldr	r2, [pc, #388]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e0c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e0e:	e015      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	2100      	movs	r1, #0
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fab4 	bl	8004384 <RCCEx_PLLSAI1_Config>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e20:	e00c      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3320      	adds	r3, #32
 8003e26:	2100      	movs	r1, #0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fb9f 	bl	800456c <RCCEx_PLLSAI2_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e32:	e003      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	74fb      	strb	r3, [r7, #19]
      break;
 8003e38:	e000      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e3c:	7cfb      	ldrb	r3, [r7, #19]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10b      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e42:	4b52      	ldr	r3, [pc, #328]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e50:	494e      	ldr	r1, [pc, #312]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003e58:	e001      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5a:	7cfb      	ldrb	r3, [r7, #19]
 8003e5c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 809f 	beq.w	8003faa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e70:	4b46      	ldr	r3, [pc, #280]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003e80:	2300      	movs	r3, #0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e86:	4b41      	ldr	r3, [pc, #260]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8a:	4a40      	ldr	r2, [pc, #256]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e90:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e92:	4b3e      	ldr	r3, [pc, #248]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e9a:	60bb      	str	r3, [r7, #8]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a3a      	ldr	r2, [pc, #232]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eae:	f7fe fbb7 	bl	8002620 <HAL_GetTick>
 8003eb2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003eb4:	e009      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb6:	f7fe fbb3 	bl	8002620 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d902      	bls.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	74fb      	strb	r3, [r7, #19]
        break;
 8003ec8:	e005      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003eca:	4b31      	ldr	r3, [pc, #196]	@ (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0ef      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003ed6:	7cfb      	ldrb	r3, [r7, #19]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d15b      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003edc:	4b2b      	ldr	r3, [pc, #172]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ee6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d01f      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d019      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003efa:	4b24      	ldr	r3, [pc, #144]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f04:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f06:	4b21      	ldr	r3, [pc, #132]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f16:	4b1d      	ldr	r3, [pc, #116]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f26:	4a19      	ldr	r2, [pc, #100]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d016      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fe fb72 	bl	8002620 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f3e:	e00b      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f40:	f7fe fb6e 	bl	8002620 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d902      	bls.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	74fb      	strb	r3, [r7, #19]
            break;
 8003f56:	e006      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f58:	4b0c      	ldr	r3, [pc, #48]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0ec      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003f66:	7cfb      	ldrb	r3, [r7, #19]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10c      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f6c:	4b07      	ldr	r3, [pc, #28]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f72:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7c:	4903      	ldr	r1, [pc, #12]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f84:	e008      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f86:	7cfb      	ldrb	r3, [r7, #19]
 8003f88:	74bb      	strb	r3, [r7, #18]
 8003f8a:	e005      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f94:	7cfb      	ldrb	r3, [r7, #19]
 8003f96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f98:	7c7b      	ldrb	r3, [r7, #17]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d105      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9e:	4ba0      	ldr	r3, [pc, #640]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa2:	4a9f      	ldr	r2, [pc, #636]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fa8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fb6:	4b9a      	ldr	r3, [pc, #616]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbc:	f023 0203 	bic.w	r2, r3, #3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc4:	4996      	ldr	r1, [pc, #600]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fd8:	4b91      	ldr	r3, [pc, #580]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fde:	f023 020c 	bic.w	r2, r3, #12
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	498e      	ldr	r1, [pc, #568]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ffa:	4b89      	ldr	r3, [pc, #548]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004000:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004008:	4985      	ldr	r1, [pc, #532]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800401c:	4b80      	ldr	r3, [pc, #512]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004022:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800402a:	497d      	ldr	r1, [pc, #500]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800403e:	4b78      	ldr	r3, [pc, #480]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004044:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800404c:	4974      	ldr	r1, [pc, #464]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004060:	4b6f      	ldr	r3, [pc, #444]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004066:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800406e:	496c      	ldr	r1, [pc, #432]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004082:	4b67      	ldr	r3, [pc, #412]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004088:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004090:	4963      	ldr	r1, [pc, #396]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040a4:	4b5e      	ldr	r3, [pc, #376]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040b2:	495b      	ldr	r1, [pc, #364]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040c6:	4b56      	ldr	r3, [pc, #344]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d4:	4952      	ldr	r1, [pc, #328]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040e8:	4b4d      	ldr	r3, [pc, #308]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f6:	494a      	ldr	r1, [pc, #296]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800410a:	4b45      	ldr	r3, [pc, #276]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004110:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004118:	4941      	ldr	r1, [pc, #260]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800412c:	4b3c      	ldr	r3, [pc, #240]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800412e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004132:	f023 0203 	bic.w	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800413a:	4939      	ldr	r1, [pc, #228]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d028      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800414e:	4b34      	ldr	r3, [pc, #208]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004154:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415c:	4930      	ldr	r1, [pc, #192]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004168:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800416c:	d106      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800416e:	4b2c      	ldr	r3, [pc, #176]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	4a2b      	ldr	r2, [pc, #172]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004174:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004178:	60d3      	str	r3, [r2, #12]
 800417a:	e011      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004180:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004184:	d10c      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3304      	adds	r3, #4
 800418a:	2101      	movs	r1, #1
 800418c:	4618      	mov	r0, r3
 800418e:	f000 f8f9 	bl	8004384 <RCCEx_PLLSAI1_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004196:	7cfb      	ldrb	r3, [r7, #19]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d04d      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041b4:	d108      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80041b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041bc:	4a18      	ldr	r2, [pc, #96]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041c2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80041c6:	e012      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80041c8:	4b15      	ldr	r3, [pc, #84]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041ce:	4a14      	ldr	r2, [pc, #80]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041d4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80041d8:	4b11      	ldr	r3, [pc, #68]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041e6:	490e      	ldr	r1, [pc, #56]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041f6:	d106      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041f8:	4b09      	ldr	r3, [pc, #36]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4a08      	ldr	r2, [pc, #32]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004202:	60d3      	str	r3, [r2, #12]
 8004204:	e020      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800420a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800420e:	d109      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004210:	4b03      	ldr	r3, [pc, #12]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a02      	ldr	r2, [pc, #8]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004216:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800421a:	60d3      	str	r3, [r2, #12]
 800421c:	e014      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800421e:	bf00      	nop
 8004220:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004228:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800422c:	d10c      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3304      	adds	r3, #4
 8004232:	2101      	movs	r1, #1
 8004234:	4618      	mov	r0, r3
 8004236:	f000 f8a5 	bl	8004384 <RCCEx_PLLSAI1_Config>
 800423a:	4603      	mov	r3, r0
 800423c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800423e:	7cfb      	ldrb	r3, [r7, #19]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004244:	7cfb      	ldrb	r3, [r7, #19]
 8004246:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d028      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004254:	4b4a      	ldr	r3, [pc, #296]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004262:	4947      	ldr	r1, [pc, #284]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800426e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004272:	d106      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004274:	4b42      	ldr	r3, [pc, #264]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4a41      	ldr	r2, [pc, #260]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800427a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800427e:	60d3      	str	r3, [r2, #12]
 8004280:	e011      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004286:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800428a:	d10c      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3304      	adds	r3, #4
 8004290:	2101      	movs	r1, #1
 8004292:	4618      	mov	r0, r3
 8004294:	f000 f876 	bl	8004384 <RCCEx_PLLSAI1_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800429c:	7cfb      	ldrb	r3, [r7, #19]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80042a2:	7cfb      	ldrb	r3, [r7, #19]
 80042a4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d01e      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042b2:	4b33      	ldr	r3, [pc, #204]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042c2:	492f      	ldr	r1, [pc, #188]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042d4:	d10c      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3304      	adds	r3, #4
 80042da:	2102      	movs	r1, #2
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 f851 	bl	8004384 <RCCEx_PLLSAI1_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042e6:	7cfb      	ldrb	r3, [r7, #19]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80042ec:	7cfb      	ldrb	r3, [r7, #19]
 80042ee:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00b      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042fc:	4b20      	ldr	r3, [pc, #128]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004302:	f023 0204 	bic.w	r2, r3, #4
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800430c:	491c      	ldr	r1, [pc, #112]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00b      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004320:	4b17      	ldr	r3, [pc, #92]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004322:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004326:	f023 0218 	bic.w	r2, r3, #24
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004330:	4913      	ldr	r1, [pc, #76]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d017      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004344:	4b0e      	ldr	r3, [pc, #56]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004346:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800434a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004354:	490a      	ldr	r1, [pc, #40]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004362:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004366:	d105      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004368:	4b05      	ldr	r3, [pc, #20]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4a04      	ldr	r2, [pc, #16]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800436e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004372:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004374:	7cbb      	ldrb	r3, [r7, #18]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000

08004384 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004392:	4b72      	ldr	r3, [pc, #456]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00e      	beq.n	80043bc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800439e:	4b6f      	ldr	r3, [pc, #444]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f003 0203 	and.w	r2, r3, #3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d103      	bne.n	80043b6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
       ||
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d142      	bne.n	800443c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	73fb      	strb	r3, [r7, #15]
 80043ba:	e03f      	b.n	800443c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d018      	beq.n	80043f6 <RCCEx_PLLSAI1_Config+0x72>
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d825      	bhi.n	8004414 <RCCEx_PLLSAI1_Config+0x90>
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d002      	beq.n	80043d2 <RCCEx_PLLSAI1_Config+0x4e>
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d009      	beq.n	80043e4 <RCCEx_PLLSAI1_Config+0x60>
 80043d0:	e020      	b.n	8004414 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043d2:	4b62      	ldr	r3, [pc, #392]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d11d      	bne.n	800441a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e2:	e01a      	b.n	800441a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043e4:	4b5d      	ldr	r3, [pc, #372]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d116      	bne.n	800441e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043f4:	e013      	b.n	800441e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043f6:	4b59      	ldr	r3, [pc, #356]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10f      	bne.n	8004422 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004402:	4b56      	ldr	r3, [pc, #344]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004412:	e006      	b.n	8004422 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
      break;
 8004418:	e004      	b.n	8004424 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800441a:	bf00      	nop
 800441c:	e002      	b.n	8004424 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800441e:	bf00      	nop
 8004420:	e000      	b.n	8004424 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004422:	bf00      	nop
    }

    if(status == HAL_OK)
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d108      	bne.n	800443c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800442a:	4b4c      	ldr	r3, [pc, #304]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f023 0203 	bic.w	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4949      	ldr	r1, [pc, #292]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004438:	4313      	orrs	r3, r2
 800443a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f040 8086 	bne.w	8004550 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004444:	4b45      	ldr	r3, [pc, #276]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a44      	ldr	r2, [pc, #272]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 800444a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800444e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004450:	f7fe f8e6 	bl	8002620 <HAL_GetTick>
 8004454:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004456:	e009      	b.n	800446c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004458:	f7fe f8e2 	bl	8002620 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d902      	bls.n	800446c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	73fb      	strb	r3, [r7, #15]
        break;
 800446a:	e005      	b.n	8004478 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800446c:	4b3b      	ldr	r3, [pc, #236]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1ef      	bne.n	8004458 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d168      	bne.n	8004550 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d113      	bne.n	80044ac <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004484:	4b35      	ldr	r3, [pc, #212]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	4b35      	ldr	r3, [pc, #212]	@ (8004560 <RCCEx_PLLSAI1_Config+0x1dc>)
 800448a:	4013      	ands	r3, r2
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6892      	ldr	r2, [r2, #8]
 8004490:	0211      	lsls	r1, r2, #8
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68d2      	ldr	r2, [r2, #12]
 8004496:	06d2      	lsls	r2, r2, #27
 8004498:	4311      	orrs	r1, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6852      	ldr	r2, [r2, #4]
 800449e:	3a01      	subs	r2, #1
 80044a0:	0112      	lsls	r2, r2, #4
 80044a2:	430a      	orrs	r2, r1
 80044a4:	492d      	ldr	r1, [pc, #180]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	610b      	str	r3, [r1, #16]
 80044aa:	e02d      	b.n	8004508 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d115      	bne.n	80044de <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044b2:	4b2a      	ldr	r3, [pc, #168]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004564 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6892      	ldr	r2, [r2, #8]
 80044be:	0211      	lsls	r1, r2, #8
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6912      	ldr	r2, [r2, #16]
 80044c4:	0852      	lsrs	r2, r2, #1
 80044c6:	3a01      	subs	r2, #1
 80044c8:	0552      	lsls	r2, r2, #21
 80044ca:	4311      	orrs	r1, r2
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6852      	ldr	r2, [r2, #4]
 80044d0:	3a01      	subs	r2, #1
 80044d2:	0112      	lsls	r2, r2, #4
 80044d4:	430a      	orrs	r2, r1
 80044d6:	4921      	ldr	r1, [pc, #132]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	610b      	str	r3, [r1, #16]
 80044dc:	e014      	b.n	8004508 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044de:	4b1f      	ldr	r3, [pc, #124]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	4b21      	ldr	r3, [pc, #132]	@ (8004568 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6892      	ldr	r2, [r2, #8]
 80044ea:	0211      	lsls	r1, r2, #8
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6952      	ldr	r2, [r2, #20]
 80044f0:	0852      	lsrs	r2, r2, #1
 80044f2:	3a01      	subs	r2, #1
 80044f4:	0652      	lsls	r2, r2, #25
 80044f6:	4311      	orrs	r1, r2
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6852      	ldr	r2, [r2, #4]
 80044fc:	3a01      	subs	r2, #1
 80044fe:	0112      	lsls	r2, r2, #4
 8004500:	430a      	orrs	r2, r1
 8004502:	4916      	ldr	r1, [pc, #88]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004504:	4313      	orrs	r3, r2
 8004506:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004508:	4b14      	ldr	r3, [pc, #80]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a13      	ldr	r2, [pc, #76]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 800450e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004512:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004514:	f7fe f884 	bl	8002620 <HAL_GetTick>
 8004518:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800451a:	e009      	b.n	8004530 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800451c:	f7fe f880 	bl	8002620 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d902      	bls.n	8004530 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	73fb      	strb	r3, [r7, #15]
          break;
 800452e:	e005      	b.n	800453c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004530:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ef      	beq.n	800451c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004542:	4b06      	ldr	r3, [pc, #24]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	4904      	ldr	r1, [pc, #16]	@ (800455c <RCCEx_PLLSAI1_Config+0x1d8>)
 800454c:	4313      	orrs	r3, r2
 800454e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004550:	7bfb      	ldrb	r3, [r7, #15]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	07ff800f 	.word	0x07ff800f
 8004564:	ff9f800f 	.word	0xff9f800f
 8004568:	f9ff800f 	.word	0xf9ff800f

0800456c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800457a:	4b72      	ldr	r3, [pc, #456]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00e      	beq.n	80045a4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004586:	4b6f      	ldr	r3, [pc, #444]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f003 0203 	and.w	r2, r3, #3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d103      	bne.n	800459e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
       ||
 800459a:	2b00      	cmp	r3, #0
 800459c:	d142      	bne.n	8004624 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	73fb      	strb	r3, [r7, #15]
 80045a2:	e03f      	b.n	8004624 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d018      	beq.n	80045de <RCCEx_PLLSAI2_Config+0x72>
 80045ac:	2b03      	cmp	r3, #3
 80045ae:	d825      	bhi.n	80045fc <RCCEx_PLLSAI2_Config+0x90>
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d002      	beq.n	80045ba <RCCEx_PLLSAI2_Config+0x4e>
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d009      	beq.n	80045cc <RCCEx_PLLSAI2_Config+0x60>
 80045b8:	e020      	b.n	80045fc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045ba:	4b62      	ldr	r3, [pc, #392]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d11d      	bne.n	8004602 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ca:	e01a      	b.n	8004602 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045cc:	4b5d      	ldr	r3, [pc, #372]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d116      	bne.n	8004606 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045dc:	e013      	b.n	8004606 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045de:	4b59      	ldr	r3, [pc, #356]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10f      	bne.n	800460a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045ea:	4b56      	ldr	r3, [pc, #344]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d109      	bne.n	800460a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045fa:	e006      	b.n	800460a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004600:	e004      	b.n	800460c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004602:	bf00      	nop
 8004604:	e002      	b.n	800460c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004606:	bf00      	nop
 8004608:	e000      	b.n	800460c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800460a:	bf00      	nop
    }

    if(status == HAL_OK)
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d108      	bne.n	8004624 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004612:	4b4c      	ldr	r3, [pc, #304]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f023 0203 	bic.w	r2, r3, #3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4949      	ldr	r1, [pc, #292]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004620:	4313      	orrs	r3, r2
 8004622:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f040 8086 	bne.w	8004738 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800462c:	4b45      	ldr	r3, [pc, #276]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a44      	ldr	r2, [pc, #272]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004638:	f7fd fff2 	bl	8002620 <HAL_GetTick>
 800463c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800463e:	e009      	b.n	8004654 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004640:	f7fd ffee 	bl	8002620 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d902      	bls.n	8004654 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	73fb      	strb	r3, [r7, #15]
        break;
 8004652:	e005      	b.n	8004660 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004654:	4b3b      	ldr	r3, [pc, #236]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1ef      	bne.n	8004640 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d168      	bne.n	8004738 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d113      	bne.n	8004694 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800466c:	4b35      	ldr	r3, [pc, #212]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 800466e:	695a      	ldr	r2, [r3, #20]
 8004670:	4b35      	ldr	r3, [pc, #212]	@ (8004748 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004672:	4013      	ands	r3, r2
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6892      	ldr	r2, [r2, #8]
 8004678:	0211      	lsls	r1, r2, #8
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68d2      	ldr	r2, [r2, #12]
 800467e:	06d2      	lsls	r2, r2, #27
 8004680:	4311      	orrs	r1, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6852      	ldr	r2, [r2, #4]
 8004686:	3a01      	subs	r2, #1
 8004688:	0112      	lsls	r2, r2, #4
 800468a:	430a      	orrs	r2, r1
 800468c:	492d      	ldr	r1, [pc, #180]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 800468e:	4313      	orrs	r3, r2
 8004690:	614b      	str	r3, [r1, #20]
 8004692:	e02d      	b.n	80046f0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d115      	bne.n	80046c6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800469a:	4b2a      	ldr	r3, [pc, #168]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 800469c:	695a      	ldr	r2, [r3, #20]
 800469e:	4b2b      	ldr	r3, [pc, #172]	@ (800474c <RCCEx_PLLSAI2_Config+0x1e0>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6892      	ldr	r2, [r2, #8]
 80046a6:	0211      	lsls	r1, r2, #8
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6912      	ldr	r2, [r2, #16]
 80046ac:	0852      	lsrs	r2, r2, #1
 80046ae:	3a01      	subs	r2, #1
 80046b0:	0552      	lsls	r2, r2, #21
 80046b2:	4311      	orrs	r1, r2
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6852      	ldr	r2, [r2, #4]
 80046b8:	3a01      	subs	r2, #1
 80046ba:	0112      	lsls	r2, r2, #4
 80046bc:	430a      	orrs	r2, r1
 80046be:	4921      	ldr	r1, [pc, #132]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	614b      	str	r3, [r1, #20]
 80046c4:	e014      	b.n	80046f0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046c8:	695a      	ldr	r2, [r3, #20]
 80046ca:	4b21      	ldr	r3, [pc, #132]	@ (8004750 <RCCEx_PLLSAI2_Config+0x1e4>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6892      	ldr	r2, [r2, #8]
 80046d2:	0211      	lsls	r1, r2, #8
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6952      	ldr	r2, [r2, #20]
 80046d8:	0852      	lsrs	r2, r2, #1
 80046da:	3a01      	subs	r2, #1
 80046dc:	0652      	lsls	r2, r2, #25
 80046de:	4311      	orrs	r1, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6852      	ldr	r2, [r2, #4]
 80046e4:	3a01      	subs	r2, #1
 80046e6:	0112      	lsls	r2, r2, #4
 80046e8:	430a      	orrs	r2, r1
 80046ea:	4916      	ldr	r1, [pc, #88]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80046f0:	4b14      	ldr	r3, [pc, #80]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a13      	ldr	r2, [pc, #76]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fc:	f7fd ff90 	bl	8002620 <HAL_GetTick>
 8004700:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004702:	e009      	b.n	8004718 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004704:	f7fd ff8c 	bl	8002620 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d902      	bls.n	8004718 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	73fb      	strb	r3, [r7, #15]
          break;
 8004716:	e005      	b.n	8004724 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004718:	4b0a      	ldr	r3, [pc, #40]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0ef      	beq.n	8004704 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800472a:	4b06      	ldr	r3, [pc, #24]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	4904      	ldr	r1, [pc, #16]	@ (8004744 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004734:	4313      	orrs	r3, r2
 8004736:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004738:	7bfb      	ldrb	r3, [r7, #15]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40021000 	.word	0x40021000
 8004748:	07ff800f 	.word	0x07ff800f
 800474c:	ff9f800f 	.word	0xff9f800f
 8004750:	f9ff800f 	.word	0xf9ff800f

08004754 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e042      	b.n	80047ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476c:	2b00      	cmp	r3, #0
 800476e:	d106      	bne.n	800477e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7fd fcf9 	bl	8002170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2224      	movs	r2, #36	@ 0x24
 8004782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0201 	bic.w	r2, r2, #1
 8004794:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 ff14 	bl	80055cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 fc15 	bl	8004fd4 <UART_SetConfig>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e01b      	b.n	80047ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 ff93 	bl	8005710 <UART_CheckIdleState>
 80047ea:	4603      	mov	r3, r0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08a      	sub	sp, #40	@ 0x28
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	4613      	mov	r3, r2
 8004802:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480a:	2b20      	cmp	r3, #32
 800480c:	d17b      	bne.n	8004906 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HAL_UART_Transmit+0x26>
 8004814:	88fb      	ldrh	r3, [r7, #6]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e074      	b.n	8004908 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2221      	movs	r2, #33	@ 0x21
 800482a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800482e:	f7fd fef7 	bl	8002620 <HAL_GetTick>
 8004832:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	88fa      	ldrh	r2, [r7, #6]
 8004838:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	88fa      	ldrh	r2, [r7, #6]
 8004840:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800484c:	d108      	bne.n	8004860 <HAL_UART_Transmit+0x6c>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d104      	bne.n	8004860 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004856:	2300      	movs	r3, #0
 8004858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	61bb      	str	r3, [r7, #24]
 800485e:	e003      	b.n	8004868 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004864:	2300      	movs	r3, #0
 8004866:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004868:	e030      	b.n	80048cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2200      	movs	r2, #0
 8004872:	2180      	movs	r1, #128	@ 0x80
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 fff5 	bl	8005864 <UART_WaitOnFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2220      	movs	r2, #32
 8004884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e03d      	b.n	8004908 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10b      	bne.n	80048aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	881a      	ldrh	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800489e:	b292      	uxth	r2, r2
 80048a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	3302      	adds	r3, #2
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	e007      	b.n	80048ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	781a      	ldrb	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	3301      	adds	r3, #1
 80048b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1c8      	bne.n	800486a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2200      	movs	r2, #0
 80048e0:	2140      	movs	r1, #64	@ 0x40
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 ffbe 	bl	8005864 <UART_WaitOnFlagUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e006      	b.n	8004908 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	e000      	b.n	8004908 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004906:	2302      	movs	r3, #2
  }
}
 8004908:	4618      	mov	r0, r3
 800490a:	3720      	adds	r7, #32
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b0ba      	sub	sp, #232	@ 0xe8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004936:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800493a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800493e:	4013      	ands	r3, r2
 8004940:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004944:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d11b      	bne.n	8004984 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800494c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b00      	cmp	r3, #0
 8004956:	d015      	beq.n	8004984 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800495c:	f003 0320 	and.w	r3, r3, #32
 8004960:	2b00      	cmp	r3, #0
 8004962:	d105      	bne.n	8004970 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d009      	beq.n	8004984 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8300 	beq.w	8004f7a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	4798      	blx	r3
      }
      return;
 8004982:	e2fa      	b.n	8004f7a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8004984:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 8123 	beq.w	8004bd4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800498e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004992:	4b8d      	ldr	r3, [pc, #564]	@ (8004bc8 <HAL_UART_IRQHandler+0x2b8>)
 8004994:	4013      	ands	r3, r2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800499a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800499e:	4b8b      	ldr	r3, [pc, #556]	@ (8004bcc <HAL_UART_IRQHandler+0x2bc>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 8116 	beq.w	8004bd4 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d011      	beq.n	80049d8 <HAL_UART_IRQHandler+0xc8>
 80049b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00b      	beq.n	80049d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2201      	movs	r2, #1
 80049c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ce:	f043 0201 	orr.w	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d011      	beq.n	8004a08 <HAL_UART_IRQHandler+0xf8>
 80049e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00b      	beq.n	8004a08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2202      	movs	r2, #2
 80049f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fe:	f043 0204 	orr.w	r2, r3, #4
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d011      	beq.n	8004a38 <HAL_UART_IRQHandler+0x128>
 8004a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00b      	beq.n	8004a38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2204      	movs	r2, #4
 8004a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2e:	f043 0202 	orr.w	r2, r3, #2
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d017      	beq.n	8004a74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a48:	f003 0320 	and.w	r3, r3, #32
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004a50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004a54:	4b5c      	ldr	r3, [pc, #368]	@ (8004bc8 <HAL_UART_IRQHandler+0x2b8>)
 8004a56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00b      	beq.n	8004a74 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2208      	movs	r2, #8
 8004a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6a:	f043 0208 	orr.w	r2, r3, #8
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d012      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x196>
 8004a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00c      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a9c:	f043 0220 	orr.w	r2, r3, #32
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8266 	beq.w	8004f7e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d013      	beq.n	8004ae6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d105      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afa:	2b40      	cmp	r3, #64	@ 0x40
 8004afc:	d005      	beq.n	8004b0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004afe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b02:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d054      	beq.n	8004bb4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 ff17 	bl	800593e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b1a:	2b40      	cmp	r3, #64	@ 0x40
 8004b1c:	d146      	bne.n	8004bac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3308      	adds	r3, #8
 8004b24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b2c:	e853 3f00 	ldrex	r3, [r3]
 8004b30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3308      	adds	r3, #8
 8004b46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1d9      	bne.n	8004b1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d017      	beq.n	8004ba4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b7a:	4a15      	ldr	r2, [pc, #84]	@ (8004bd0 <HAL_UART_IRQHandler+0x2c0>)
 8004b7c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fd fee8 	bl	800295a <HAL_DMA_Abort_IT>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d019      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba2:	e00f      	b.n	8004bc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f9ff 	bl	8004fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004baa:	e00b      	b.n	8004bc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f9fb 	bl	8004fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb2:	e007      	b.n	8004bc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f9f7 	bl	8004fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004bc2:	e1dc      	b.n	8004f7e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc4:	bf00      	nop
    return;
 8004bc6:	e1da      	b.n	8004f7e <HAL_UART_IRQHandler+0x66e>
 8004bc8:	10000001 	.word	0x10000001
 8004bcc:	04000120 	.word	0x04000120
 8004bd0:	08005a0b 	.word	0x08005a0b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	f040 8170 	bne.w	8004ebe <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 8169 	beq.w	8004ebe <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 8162 	beq.w	8004ebe <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2210      	movs	r2, #16
 8004c00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0c:	2b40      	cmp	r3, #64	@ 0x40
 8004c0e:	f040 80d8 	bne.w	8004dc2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 80af 	beq.w	8004d88 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004c30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c34:	429a      	cmp	r2, r3
 8004c36:	f080 80a7 	bcs.w	8004d88 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f040 8087 	bne.w	8004d66 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1da      	bne.n	8004c58 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004cb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004cc6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004cca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004cd2:	e841 2300 	strex	r3, r2, [r1]
 8004cd6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004cd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e1      	bne.n	8004ca2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ce8:	e853 3f00 	ldrex	r3, [r3]
 8004cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004cee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3308      	adds	r3, #8
 8004cfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e3      	bne.n	8004cde <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d34:	f023 0310 	bic.w	r3, r3, #16
 8004d38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d4e:	e841 2300 	strex	r3, r2, [r1]
 8004d52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1e4      	bne.n	8004d24 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fd fd9e 	bl	80028a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2202      	movs	r2, #2
 8004d6a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f91b 	bl	8004fbc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004d86:	e0fc      	b.n	8004f82 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d92:	429a      	cmp	r2, r3
 8004d94:	f040 80f5 	bne.w	8004f82 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	f040 80eb 	bne.w	8004f82 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004db8:	4619      	mov	r1, r3
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f8fe 	bl	8004fbc <HAL_UARTEx_RxEventCallback>
      return;
 8004dc0:	e0df      	b.n	8004f82 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 80d1 	beq.w	8004f86 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004de4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80cc 	beq.w	8004f86 <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e4      	bne.n	8004dee <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3308      	adds	r3, #8
 8004e2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	e853 3f00 	ldrex	r3, [r3]
 8004e32:	623b      	str	r3, [r7, #32]
   return(result);
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3308      	adds	r3, #8
 8004e48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e4c:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e1      	bne.n	8004e24 <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f023 0310 	bic.w	r3, r3, #16
 8004e88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	461a      	mov	r2, r3
 8004e92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e96:	61fb      	str	r3, [r7, #28]
 8004e98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9a:	69b9      	ldr	r1, [r7, #24]
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	e841 2300 	strex	r3, r2, [r1]
 8004ea2:	617b      	str	r3, [r7, #20]
   return(result);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1e4      	bne.n	8004e74 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2202      	movs	r2, #2
 8004eae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f880 	bl	8004fbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ebc:	e063      	b.n	8004f86 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00e      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x5d8>
 8004eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d008      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004ede:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fdd3 	bl	8005a8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ee6:	e051      	b.n	8004f8c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d014      	beq.n	8004f1e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d105      	bne.n	8004f0c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d03a      	beq.n	8004f8a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	4798      	blx	r3
    }
    return;
 8004f1c:	e035      	b.n	8004f8a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d009      	beq.n	8004f3e <HAL_UART_IRQHandler+0x62e>
 8004f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fd7d 	bl	8005a36 <UART_EndTransmit_IT>
    return;
 8004f3c:	e026      	b.n	8004f8c <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d009      	beq.n	8004f5e <HAL_UART_IRQHandler+0x64e>
 8004f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f4e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fdac 	bl	8005ab4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f5c:	e016      	b.n	8004f8c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d010      	beq.n	8004f8c <HAL_UART_IRQHandler+0x67c>
 8004f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	da0c      	bge.n	8004f8c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fd94 	bl	8005aa0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f78:	e008      	b.n	8004f8c <HAL_UART_IRQHandler+0x67c>
      return;
 8004f7a:	bf00      	nop
 8004f7c:	e006      	b.n	8004f8c <HAL_UART_IRQHandler+0x67c>
    return;
 8004f7e:	bf00      	nop
 8004f80:	e004      	b.n	8004f8c <HAL_UART_IRQHandler+0x67c>
      return;
 8004f82:	bf00      	nop
 8004f84:	e002      	b.n	8004f8c <HAL_UART_IRQHandler+0x67c>
      return;
 8004f86:	bf00      	nop
 8004f88:	e000      	b.n	8004f8c <HAL_UART_IRQHandler+0x67c>
    return;
 8004f8a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8004f8c:	37e8      	adds	r7, #232	@ 0xe8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop

08004f94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fd8:	b08c      	sub	sp, #48	@ 0x30
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	431a      	orrs	r2, r3
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	4baa      	ldr	r3, [pc, #680]	@ (80052ac <UART_SetConfig+0x2d8>)
 8005004:	4013      	ands	r3, r2
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	6812      	ldr	r2, [r2, #0]
 800500a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800500c:	430b      	orrs	r3, r1
 800500e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a9f      	ldr	r2, [pc, #636]	@ (80052b0 <UART_SetConfig+0x2dc>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d004      	beq.n	8005040 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800503c:	4313      	orrs	r3, r2
 800503e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800504a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005054:	430b      	orrs	r3, r1
 8005056:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505e:	f023 010f 	bic.w	r1, r3, #15
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a90      	ldr	r2, [pc, #576]	@ (80052b4 <UART_SetConfig+0x2e0>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d125      	bne.n	80050c4 <UART_SetConfig+0xf0>
 8005078:	4b8f      	ldr	r3, [pc, #572]	@ (80052b8 <UART_SetConfig+0x2e4>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	2b03      	cmp	r3, #3
 8005084:	d81a      	bhi.n	80050bc <UART_SetConfig+0xe8>
 8005086:	a201      	add	r2, pc, #4	@ (adr r2, 800508c <UART_SetConfig+0xb8>)
 8005088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508c:	0800509d 	.word	0x0800509d
 8005090:	080050ad 	.word	0x080050ad
 8005094:	080050a5 	.word	0x080050a5
 8005098:	080050b5 	.word	0x080050b5
 800509c:	2301      	movs	r3, #1
 800509e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a2:	e116      	b.n	80052d2 <UART_SetConfig+0x2fe>
 80050a4:	2302      	movs	r3, #2
 80050a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050aa:	e112      	b.n	80052d2 <UART_SetConfig+0x2fe>
 80050ac:	2304      	movs	r3, #4
 80050ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050b2:	e10e      	b.n	80052d2 <UART_SetConfig+0x2fe>
 80050b4:	2308      	movs	r3, #8
 80050b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ba:	e10a      	b.n	80052d2 <UART_SetConfig+0x2fe>
 80050bc:	2310      	movs	r3, #16
 80050be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050c2:	e106      	b.n	80052d2 <UART_SetConfig+0x2fe>
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a7c      	ldr	r2, [pc, #496]	@ (80052bc <UART_SetConfig+0x2e8>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d138      	bne.n	8005140 <UART_SetConfig+0x16c>
 80050ce:	4b7a      	ldr	r3, [pc, #488]	@ (80052b8 <UART_SetConfig+0x2e4>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d4:	f003 030c 	and.w	r3, r3, #12
 80050d8:	2b0c      	cmp	r3, #12
 80050da:	d82d      	bhi.n	8005138 <UART_SetConfig+0x164>
 80050dc:	a201      	add	r2, pc, #4	@ (adr r2, 80050e4 <UART_SetConfig+0x110>)
 80050de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e2:	bf00      	nop
 80050e4:	08005119 	.word	0x08005119
 80050e8:	08005139 	.word	0x08005139
 80050ec:	08005139 	.word	0x08005139
 80050f0:	08005139 	.word	0x08005139
 80050f4:	08005129 	.word	0x08005129
 80050f8:	08005139 	.word	0x08005139
 80050fc:	08005139 	.word	0x08005139
 8005100:	08005139 	.word	0x08005139
 8005104:	08005121 	.word	0x08005121
 8005108:	08005139 	.word	0x08005139
 800510c:	08005139 	.word	0x08005139
 8005110:	08005139 	.word	0x08005139
 8005114:	08005131 	.word	0x08005131
 8005118:	2300      	movs	r3, #0
 800511a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800511e:	e0d8      	b.n	80052d2 <UART_SetConfig+0x2fe>
 8005120:	2302      	movs	r3, #2
 8005122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005126:	e0d4      	b.n	80052d2 <UART_SetConfig+0x2fe>
 8005128:	2304      	movs	r3, #4
 800512a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800512e:	e0d0      	b.n	80052d2 <UART_SetConfig+0x2fe>
 8005130:	2308      	movs	r3, #8
 8005132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005136:	e0cc      	b.n	80052d2 <UART_SetConfig+0x2fe>
 8005138:	2310      	movs	r3, #16
 800513a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800513e:	e0c8      	b.n	80052d2 <UART_SetConfig+0x2fe>
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a5e      	ldr	r2, [pc, #376]	@ (80052c0 <UART_SetConfig+0x2ec>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d125      	bne.n	8005196 <UART_SetConfig+0x1c2>
 800514a:	4b5b      	ldr	r3, [pc, #364]	@ (80052b8 <UART_SetConfig+0x2e4>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005150:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005154:	2b30      	cmp	r3, #48	@ 0x30
 8005156:	d016      	beq.n	8005186 <UART_SetConfig+0x1b2>
 8005158:	2b30      	cmp	r3, #48	@ 0x30
 800515a:	d818      	bhi.n	800518e <UART_SetConfig+0x1ba>
 800515c:	2b20      	cmp	r3, #32
 800515e:	d00a      	beq.n	8005176 <UART_SetConfig+0x1a2>
 8005160:	2b20      	cmp	r3, #32
 8005162:	d814      	bhi.n	800518e <UART_SetConfig+0x1ba>
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <UART_SetConfig+0x19a>
 8005168:	2b10      	cmp	r3, #16
 800516a:	d008      	beq.n	800517e <UART_SetConfig+0x1aa>
 800516c:	e00f      	b.n	800518e <UART_SetConfig+0x1ba>
 800516e:	2300      	movs	r3, #0
 8005170:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005174:	e0ad      	b.n	80052d2 <UART_SetConfig+0x2fe>
 8005176:	2302      	movs	r3, #2
 8005178:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800517c:	e0a9      	b.n	80052d2 <UART_SetConfig+0x2fe>
 800517e:	2304      	movs	r3, #4
 8005180:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005184:	e0a5      	b.n	80052d2 <UART_SetConfig+0x2fe>
 8005186:	2308      	movs	r3, #8
 8005188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800518c:	e0a1      	b.n	80052d2 <UART_SetConfig+0x2fe>
 800518e:	2310      	movs	r3, #16
 8005190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005194:	e09d      	b.n	80052d2 <UART_SetConfig+0x2fe>
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a4a      	ldr	r2, [pc, #296]	@ (80052c4 <UART_SetConfig+0x2f0>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d125      	bne.n	80051ec <UART_SetConfig+0x218>
 80051a0:	4b45      	ldr	r3, [pc, #276]	@ (80052b8 <UART_SetConfig+0x2e4>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80051aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80051ac:	d016      	beq.n	80051dc <UART_SetConfig+0x208>
 80051ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80051b0:	d818      	bhi.n	80051e4 <UART_SetConfig+0x210>
 80051b2:	2b80      	cmp	r3, #128	@ 0x80
 80051b4:	d00a      	beq.n	80051cc <UART_SetConfig+0x1f8>
 80051b6:	2b80      	cmp	r3, #128	@ 0x80
 80051b8:	d814      	bhi.n	80051e4 <UART_SetConfig+0x210>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <UART_SetConfig+0x1f0>
 80051be:	2b40      	cmp	r3, #64	@ 0x40
 80051c0:	d008      	beq.n	80051d4 <UART_SetConfig+0x200>
 80051c2:	e00f      	b.n	80051e4 <UART_SetConfig+0x210>
 80051c4:	2300      	movs	r3, #0
 80051c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ca:	e082      	b.n	80052d2 <UART_SetConfig+0x2fe>
 80051cc:	2302      	movs	r3, #2
 80051ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051d2:	e07e      	b.n	80052d2 <UART_SetConfig+0x2fe>
 80051d4:	2304      	movs	r3, #4
 80051d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051da:	e07a      	b.n	80052d2 <UART_SetConfig+0x2fe>
 80051dc:	2308      	movs	r3, #8
 80051de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051e2:	e076      	b.n	80052d2 <UART_SetConfig+0x2fe>
 80051e4:	2310      	movs	r3, #16
 80051e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ea:	e072      	b.n	80052d2 <UART_SetConfig+0x2fe>
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a35      	ldr	r2, [pc, #212]	@ (80052c8 <UART_SetConfig+0x2f4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d12a      	bne.n	800524c <UART_SetConfig+0x278>
 80051f6:	4b30      	ldr	r3, [pc, #192]	@ (80052b8 <UART_SetConfig+0x2e4>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005200:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005204:	d01a      	beq.n	800523c <UART_SetConfig+0x268>
 8005206:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800520a:	d81b      	bhi.n	8005244 <UART_SetConfig+0x270>
 800520c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005210:	d00c      	beq.n	800522c <UART_SetConfig+0x258>
 8005212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005216:	d815      	bhi.n	8005244 <UART_SetConfig+0x270>
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <UART_SetConfig+0x250>
 800521c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005220:	d008      	beq.n	8005234 <UART_SetConfig+0x260>
 8005222:	e00f      	b.n	8005244 <UART_SetConfig+0x270>
 8005224:	2300      	movs	r3, #0
 8005226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800522a:	e052      	b.n	80052d2 <UART_SetConfig+0x2fe>
 800522c:	2302      	movs	r3, #2
 800522e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005232:	e04e      	b.n	80052d2 <UART_SetConfig+0x2fe>
 8005234:	2304      	movs	r3, #4
 8005236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800523a:	e04a      	b.n	80052d2 <UART_SetConfig+0x2fe>
 800523c:	2308      	movs	r3, #8
 800523e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005242:	e046      	b.n	80052d2 <UART_SetConfig+0x2fe>
 8005244:	2310      	movs	r3, #16
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800524a:	e042      	b.n	80052d2 <UART_SetConfig+0x2fe>
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a17      	ldr	r2, [pc, #92]	@ (80052b0 <UART_SetConfig+0x2dc>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d13a      	bne.n	80052cc <UART_SetConfig+0x2f8>
 8005256:	4b18      	ldr	r3, [pc, #96]	@ (80052b8 <UART_SetConfig+0x2e4>)
 8005258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005260:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005264:	d01a      	beq.n	800529c <UART_SetConfig+0x2c8>
 8005266:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800526a:	d81b      	bhi.n	80052a4 <UART_SetConfig+0x2d0>
 800526c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005270:	d00c      	beq.n	800528c <UART_SetConfig+0x2b8>
 8005272:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005276:	d815      	bhi.n	80052a4 <UART_SetConfig+0x2d0>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <UART_SetConfig+0x2b0>
 800527c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005280:	d008      	beq.n	8005294 <UART_SetConfig+0x2c0>
 8005282:	e00f      	b.n	80052a4 <UART_SetConfig+0x2d0>
 8005284:	2300      	movs	r3, #0
 8005286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800528a:	e022      	b.n	80052d2 <UART_SetConfig+0x2fe>
 800528c:	2302      	movs	r3, #2
 800528e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005292:	e01e      	b.n	80052d2 <UART_SetConfig+0x2fe>
 8005294:	2304      	movs	r3, #4
 8005296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800529a:	e01a      	b.n	80052d2 <UART_SetConfig+0x2fe>
 800529c:	2308      	movs	r3, #8
 800529e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052a2:	e016      	b.n	80052d2 <UART_SetConfig+0x2fe>
 80052a4:	2310      	movs	r3, #16
 80052a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052aa:	e012      	b.n	80052d2 <UART_SetConfig+0x2fe>
 80052ac:	cfff69f3 	.word	0xcfff69f3
 80052b0:	40008000 	.word	0x40008000
 80052b4:	40013800 	.word	0x40013800
 80052b8:	40021000 	.word	0x40021000
 80052bc:	40004400 	.word	0x40004400
 80052c0:	40004800 	.word	0x40004800
 80052c4:	40004c00 	.word	0x40004c00
 80052c8:	40005000 	.word	0x40005000
 80052cc:	2310      	movs	r3, #16
 80052ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4aae      	ldr	r2, [pc, #696]	@ (8005590 <UART_SetConfig+0x5bc>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	f040 8097 	bne.w	800540c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052e2:	2b08      	cmp	r3, #8
 80052e4:	d823      	bhi.n	800532e <UART_SetConfig+0x35a>
 80052e6:	a201      	add	r2, pc, #4	@ (adr r2, 80052ec <UART_SetConfig+0x318>)
 80052e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ec:	08005311 	.word	0x08005311
 80052f0:	0800532f 	.word	0x0800532f
 80052f4:	08005319 	.word	0x08005319
 80052f8:	0800532f 	.word	0x0800532f
 80052fc:	0800531f 	.word	0x0800531f
 8005300:	0800532f 	.word	0x0800532f
 8005304:	0800532f 	.word	0x0800532f
 8005308:	0800532f 	.word	0x0800532f
 800530c:	08005327 	.word	0x08005327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005310:	f7fe fc1c 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 8005314:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005316:	e010      	b.n	800533a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005318:	4b9e      	ldr	r3, [pc, #632]	@ (8005594 <UART_SetConfig+0x5c0>)
 800531a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800531c:	e00d      	b.n	800533a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800531e:	f7fe fb7d 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 8005322:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005324:	e009      	b.n	800533a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800532a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800532c:	e005      	b.n	800533a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005338:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8130 	beq.w	80055a2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005346:	4a94      	ldr	r2, [pc, #592]	@ (8005598 <UART_SetConfig+0x5c4>)
 8005348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800534c:	461a      	mov	r2, r3
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	fbb3 f3f2 	udiv	r3, r3, r2
 8005354:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	4613      	mov	r3, r2
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	4413      	add	r3, r2
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	429a      	cmp	r2, r3
 8005364:	d305      	bcc.n	8005372 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	429a      	cmp	r2, r3
 8005370:	d903      	bls.n	800537a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005378:	e113      	b.n	80055a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537c:	2200      	movs	r2, #0
 800537e:	60bb      	str	r3, [r7, #8]
 8005380:	60fa      	str	r2, [r7, #12]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005386:	4a84      	ldr	r2, [pc, #528]	@ (8005598 <UART_SetConfig+0x5c4>)
 8005388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800538c:	b29b      	uxth	r3, r3
 800538e:	2200      	movs	r2, #0
 8005390:	603b      	str	r3, [r7, #0]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005398:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800539c:	f7fb fc1c 	bl	8000bd8 <__aeabi_uldivmod>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4610      	mov	r0, r2
 80053a6:	4619      	mov	r1, r3
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	020b      	lsls	r3, r1, #8
 80053b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053b6:	0202      	lsls	r2, r0, #8
 80053b8:	6979      	ldr	r1, [r7, #20]
 80053ba:	6849      	ldr	r1, [r1, #4]
 80053bc:	0849      	lsrs	r1, r1, #1
 80053be:	2000      	movs	r0, #0
 80053c0:	460c      	mov	r4, r1
 80053c2:	4605      	mov	r5, r0
 80053c4:	eb12 0804 	adds.w	r8, r2, r4
 80053c8:	eb43 0905 	adc.w	r9, r3, r5
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	469a      	mov	sl, r3
 80053d4:	4693      	mov	fp, r2
 80053d6:	4652      	mov	r2, sl
 80053d8:	465b      	mov	r3, fp
 80053da:	4640      	mov	r0, r8
 80053dc:	4649      	mov	r1, r9
 80053de:	f7fb fbfb 	bl	8000bd8 <__aeabi_uldivmod>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4613      	mov	r3, r2
 80053e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053f0:	d308      	bcc.n	8005404 <UART_SetConfig+0x430>
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053f8:	d204      	bcs.n	8005404 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6a3a      	ldr	r2, [r7, #32]
 8005400:	60da      	str	r2, [r3, #12]
 8005402:	e0ce      	b.n	80055a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800540a:	e0ca      	b.n	80055a2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005414:	d166      	bne.n	80054e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005416:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800541a:	2b08      	cmp	r3, #8
 800541c:	d827      	bhi.n	800546e <UART_SetConfig+0x49a>
 800541e:	a201      	add	r2, pc, #4	@ (adr r2, 8005424 <UART_SetConfig+0x450>)
 8005420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005424:	08005449 	.word	0x08005449
 8005428:	08005451 	.word	0x08005451
 800542c:	08005459 	.word	0x08005459
 8005430:	0800546f 	.word	0x0800546f
 8005434:	0800545f 	.word	0x0800545f
 8005438:	0800546f 	.word	0x0800546f
 800543c:	0800546f 	.word	0x0800546f
 8005440:	0800546f 	.word	0x0800546f
 8005444:	08005467 	.word	0x08005467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005448:	f7fe fb80 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 800544c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800544e:	e014      	b.n	800547a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005450:	f7fe fb92 	bl	8003b78 <HAL_RCC_GetPCLK2Freq>
 8005454:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005456:	e010      	b.n	800547a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005458:	4b4e      	ldr	r3, [pc, #312]	@ (8005594 <UART_SetConfig+0x5c0>)
 800545a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800545c:	e00d      	b.n	800547a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800545e:	f7fe fadd 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 8005462:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005464:	e009      	b.n	800547a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800546a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800546c:	e005      	b.n	800547a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005478:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 8090 	beq.w	80055a2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005486:	4a44      	ldr	r2, [pc, #272]	@ (8005598 <UART_SetConfig+0x5c4>)
 8005488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800548c:	461a      	mov	r2, r3
 800548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005490:	fbb3 f3f2 	udiv	r3, r3, r2
 8005494:	005a      	lsls	r2, r3, #1
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	085b      	lsrs	r3, r3, #1
 800549c:	441a      	add	r2, r3
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	2b0f      	cmp	r3, #15
 80054ac:	d916      	bls.n	80054dc <UART_SetConfig+0x508>
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054b4:	d212      	bcs.n	80054dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	f023 030f 	bic.w	r3, r3, #15
 80054be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	085b      	lsrs	r3, r3, #1
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	8bfb      	ldrh	r3, [r7, #30]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	8bfa      	ldrh	r2, [r7, #30]
 80054d8:	60da      	str	r2, [r3, #12]
 80054da:	e062      	b.n	80055a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80054e2:	e05e      	b.n	80055a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d828      	bhi.n	800553e <UART_SetConfig+0x56a>
 80054ec:	a201      	add	r2, pc, #4	@ (adr r2, 80054f4 <UART_SetConfig+0x520>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	08005519 	.word	0x08005519
 80054f8:	08005521 	.word	0x08005521
 80054fc:	08005529 	.word	0x08005529
 8005500:	0800553f 	.word	0x0800553f
 8005504:	0800552f 	.word	0x0800552f
 8005508:	0800553f 	.word	0x0800553f
 800550c:	0800553f 	.word	0x0800553f
 8005510:	0800553f 	.word	0x0800553f
 8005514:	08005537 	.word	0x08005537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005518:	f7fe fb18 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 800551c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800551e:	e014      	b.n	800554a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005520:	f7fe fb2a 	bl	8003b78 <HAL_RCC_GetPCLK2Freq>
 8005524:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005526:	e010      	b.n	800554a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005528:	4b1a      	ldr	r3, [pc, #104]	@ (8005594 <UART_SetConfig+0x5c0>)
 800552a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800552c:	e00d      	b.n	800554a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800552e:	f7fe fa75 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 8005532:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005534:	e009      	b.n	800554a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800553a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800553c:	e005      	b.n	800554a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005548:	bf00      	nop
    }

    if (pclk != 0U)
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554c:	2b00      	cmp	r3, #0
 800554e:	d028      	beq.n	80055a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005554:	4a10      	ldr	r2, [pc, #64]	@ (8005598 <UART_SetConfig+0x5c4>)
 8005556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800555a:	461a      	mov	r2, r3
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	085b      	lsrs	r3, r3, #1
 8005568:	441a      	add	r2, r3
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005572:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	2b0f      	cmp	r3, #15
 8005578:	d910      	bls.n	800559c <UART_SetConfig+0x5c8>
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005580:	d20c      	bcs.n	800559c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	b29a      	uxth	r2, r3
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60da      	str	r2, [r3, #12]
 800558c:	e009      	b.n	80055a2 <UART_SetConfig+0x5ce>
 800558e:	bf00      	nop
 8005590:	40008000 	.word	0x40008000
 8005594:	00f42400 	.word	0x00f42400
 8005598:	0800866c 	.word	0x0800866c
      }
      else
      {
        ret = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2200      	movs	r2, #0
 80055b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2200      	movs	r2, #0
 80055bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80055be:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3730      	adds	r7, #48	@ 0x30
 80055c6:	46bd      	mov	sp, r7
 80055c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080055cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d8:	f003 0308 	and.w	r3, r3, #8
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00a      	beq.n	80055f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00a      	beq.n	800563a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563e:	f003 0304 	and.w	r3, r3, #4
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005660:	f003 0310 	and.w	r3, r3, #16
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01a      	beq.n	80056e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056ca:	d10a      	bne.n	80056e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	605a      	str	r2, [r3, #4]
  }
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b098      	sub	sp, #96	@ 0x60
 8005714:	af02      	add	r7, sp, #8
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005720:	f7fc ff7e 	bl	8002620 <HAL_GetTick>
 8005724:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0308 	and.w	r3, r3, #8
 8005730:	2b08      	cmp	r3, #8
 8005732:	d12f      	bne.n	8005794 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005734:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800573c:	2200      	movs	r2, #0
 800573e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f88e 	bl	8005864 <UART_WaitOnFlagUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d022      	beq.n	8005794 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800575c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005762:	653b      	str	r3, [r7, #80]	@ 0x50
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	461a      	mov	r2, r3
 800576a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800576c:	647b      	str	r3, [r7, #68]	@ 0x44
 800576e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005772:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800577a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e6      	bne.n	800574e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e063      	b.n	800585c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0304 	and.w	r3, r3, #4
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d149      	bne.n	8005836 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057aa:	2200      	movs	r2, #0
 80057ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f857 	bl	8005864 <UART_WaitOnFlagUntilTimeout>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d03c      	beq.n	8005836 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	623b      	str	r3, [r7, #32]
   return(result);
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057da:	633b      	str	r3, [r7, #48]	@ 0x30
 80057dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e6      	bne.n	80057bc <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3308      	adds	r3, #8
 80057f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f023 0301 	bic.w	r3, r3, #1
 8005804:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3308      	adds	r3, #8
 800580c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800580e:	61fa      	str	r2, [r7, #28]
 8005810:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	69b9      	ldr	r1, [r7, #24]
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	617b      	str	r3, [r7, #20]
   return(result);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e5      	bne.n	80057ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2220      	movs	r2, #32
 8005826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e012      	b.n	800585c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2220      	movs	r2, #32
 8005842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3758      	adds	r7, #88	@ 0x58
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	4613      	mov	r3, r2
 8005872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005874:	e04f      	b.n	8005916 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800587c:	d04b      	beq.n	8005916 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587e:	f7fc fecf 	bl	8002620 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	429a      	cmp	r2, r3
 800588c:	d302      	bcc.n	8005894 <UART_WaitOnFlagUntilTimeout+0x30>
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e04e      	b.n	8005936 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d037      	beq.n	8005916 <UART_WaitOnFlagUntilTimeout+0xb2>
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2b80      	cmp	r3, #128	@ 0x80
 80058aa:	d034      	beq.n	8005916 <UART_WaitOnFlagUntilTimeout+0xb2>
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b40      	cmp	r3, #64	@ 0x40
 80058b0:	d031      	beq.n	8005916 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d110      	bne.n	80058e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2208      	movs	r2, #8
 80058c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f838 	bl	800593e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2208      	movs	r2, #8
 80058d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e029      	b.n	8005936 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058f0:	d111      	bne.n	8005916 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f81e 	bl	800593e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2220      	movs	r2, #32
 8005906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e00f      	b.n	8005936 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69da      	ldr	r2, [r3, #28]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4013      	ands	r3, r2
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	429a      	cmp	r2, r3
 8005924:	bf0c      	ite	eq
 8005926:	2301      	moveq	r3, #1
 8005928:	2300      	movne	r3, #0
 800592a:	b2db      	uxtb	r3, r3
 800592c:	461a      	mov	r2, r3
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	429a      	cmp	r2, r3
 8005932:	d0a0      	beq.n	8005876 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800593e:	b480      	push	{r7}
 8005940:	b095      	sub	sp, #84	@ 0x54
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005956:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800595a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005964:	643b      	str	r3, [r7, #64]	@ 0x40
 8005966:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800596a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e6      	bne.n	8005946 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3308      	adds	r3, #8
 800597e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	61fb      	str	r3, [r7, #28]
   return(result);
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800598e:	f023 0301 	bic.w	r3, r3, #1
 8005992:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3308      	adds	r3, #8
 800599a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800599c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800599e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059a4:	e841 2300 	strex	r3, r2, [r1]
 80059a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e3      	bne.n	8005978 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d118      	bne.n	80059ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f023 0310 	bic.w	r3, r3, #16
 80059cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	461a      	mov	r2, r3
 80059d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059d6:	61bb      	str	r3, [r7, #24]
 80059d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059da:	6979      	ldr	r1, [r7, #20]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	e841 2300 	strex	r3, r2, [r1]
 80059e2:	613b      	str	r3, [r7, #16]
   return(result);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1e6      	bne.n	80059b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80059fe:	bf00      	nop
 8005a00:	3754      	adds	r7, #84	@ 0x54
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b084      	sub	sp, #16
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7ff fabd 	bl	8004fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a2e:	bf00      	nop
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b088      	sub	sp, #32
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	e853 3f00 	ldrex	r3, [r3]
 8005a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a52:	61fb      	str	r3, [r7, #28]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a60:	6979      	ldr	r1, [r7, #20]
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	e841 2300 	strex	r3, r2, [r1]
 8005a68:	613b      	str	r3, [r7, #16]
   return(result);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e6      	bne.n	8005a3e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7ff fa88 	bl	8004f94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a84:	bf00      	nop
 8005a86:	3720      	adds	r7, #32
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_UARTEx_DisableFifoMode+0x16>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e027      	b.n	8005b2e <HAL_UARTEx_DisableFifoMode+0x66>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2224      	movs	r2, #36	@ 0x24
 8005aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0201 	bic.w	r2, r2, #1
 8005b04:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d101      	bne.n	8005b52 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e02d      	b.n	8005bae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2224      	movs	r2, #36	@ 0x24
 8005b5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0201 	bic.w	r2, r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f850 	bl	8005c34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b084      	sub	sp, #16
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e02d      	b.n	8005c2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2224      	movs	r2, #36	@ 0x24
 8005bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0201 	bic.w	r2, r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f812 	bl	8005c34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d108      	bne.n	8005c56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c54:	e031      	b.n	8005cba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c56:	2308      	movs	r3, #8
 8005c58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c5a:	2308      	movs	r3, #8
 8005c5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	0e5b      	lsrs	r3, r3, #25
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	f003 0307 	and.w	r3, r3, #7
 8005c6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	0f5b      	lsrs	r3, r3, #29
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c7e:	7bbb      	ldrb	r3, [r7, #14]
 8005c80:	7b3a      	ldrb	r2, [r7, #12]
 8005c82:	4911      	ldr	r1, [pc, #68]	@ (8005cc8 <UARTEx_SetNbDataToProcess+0x94>)
 8005c84:	5c8a      	ldrb	r2, [r1, r2]
 8005c86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c8a:	7b3a      	ldrb	r2, [r7, #12]
 8005c8c:	490f      	ldr	r1, [pc, #60]	@ (8005ccc <UARTEx_SetNbDataToProcess+0x98>)
 8005c8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c90:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
 8005c9e:	7b7a      	ldrb	r2, [r7, #13]
 8005ca0:	4909      	ldr	r1, [pc, #36]	@ (8005cc8 <UARTEx_SetNbDataToProcess+0x94>)
 8005ca2:	5c8a      	ldrb	r2, [r1, r2]
 8005ca4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ca8:	7b7a      	ldrb	r2, [r7, #13]
 8005caa:	4908      	ldr	r1, [pc, #32]	@ (8005ccc <UARTEx_SetNbDataToProcess+0x98>)
 8005cac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cae:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005cba:	bf00      	nop
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	08008684 	.word	0x08008684
 8005ccc:	0800868c 	.word	0x0800868c

08005cd0 <__cvt>:
 8005cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd4:	ec57 6b10 	vmov	r6, r7, d0
 8005cd8:	2f00      	cmp	r7, #0
 8005cda:	460c      	mov	r4, r1
 8005cdc:	4619      	mov	r1, r3
 8005cde:	463b      	mov	r3, r7
 8005ce0:	bfbb      	ittet	lt
 8005ce2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005ce6:	461f      	movlt	r7, r3
 8005ce8:	2300      	movge	r3, #0
 8005cea:	232d      	movlt	r3, #45	@ 0x2d
 8005cec:	700b      	strb	r3, [r1, #0]
 8005cee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cf0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005cf4:	4691      	mov	r9, r2
 8005cf6:	f023 0820 	bic.w	r8, r3, #32
 8005cfa:	bfbc      	itt	lt
 8005cfc:	4632      	movlt	r2, r6
 8005cfe:	4616      	movlt	r6, r2
 8005d00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d04:	d005      	beq.n	8005d12 <__cvt+0x42>
 8005d06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d0a:	d100      	bne.n	8005d0e <__cvt+0x3e>
 8005d0c:	3401      	adds	r4, #1
 8005d0e:	2102      	movs	r1, #2
 8005d10:	e000      	b.n	8005d14 <__cvt+0x44>
 8005d12:	2103      	movs	r1, #3
 8005d14:	ab03      	add	r3, sp, #12
 8005d16:	9301      	str	r3, [sp, #4]
 8005d18:	ab02      	add	r3, sp, #8
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	ec47 6b10 	vmov	d0, r6, r7
 8005d20:	4653      	mov	r3, sl
 8005d22:	4622      	mov	r2, r4
 8005d24:	f000 fdc0 	bl	80068a8 <_dtoa_r>
 8005d28:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	d119      	bne.n	8005d64 <__cvt+0x94>
 8005d30:	f019 0f01 	tst.w	r9, #1
 8005d34:	d00e      	beq.n	8005d54 <__cvt+0x84>
 8005d36:	eb00 0904 	add.w	r9, r0, r4
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	4630      	mov	r0, r6
 8005d40:	4639      	mov	r1, r7
 8005d42:	f7fa fed9 	bl	8000af8 <__aeabi_dcmpeq>
 8005d46:	b108      	cbz	r0, 8005d4c <__cvt+0x7c>
 8005d48:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d4c:	2230      	movs	r2, #48	@ 0x30
 8005d4e:	9b03      	ldr	r3, [sp, #12]
 8005d50:	454b      	cmp	r3, r9
 8005d52:	d31e      	bcc.n	8005d92 <__cvt+0xc2>
 8005d54:	9b03      	ldr	r3, [sp, #12]
 8005d56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d58:	1b5b      	subs	r3, r3, r5
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	b004      	add	sp, #16
 8005d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d68:	eb00 0904 	add.w	r9, r0, r4
 8005d6c:	d1e5      	bne.n	8005d3a <__cvt+0x6a>
 8005d6e:	7803      	ldrb	r3, [r0, #0]
 8005d70:	2b30      	cmp	r3, #48	@ 0x30
 8005d72:	d10a      	bne.n	8005d8a <__cvt+0xba>
 8005d74:	2200      	movs	r2, #0
 8005d76:	2300      	movs	r3, #0
 8005d78:	4630      	mov	r0, r6
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	f7fa febc 	bl	8000af8 <__aeabi_dcmpeq>
 8005d80:	b918      	cbnz	r0, 8005d8a <__cvt+0xba>
 8005d82:	f1c4 0401 	rsb	r4, r4, #1
 8005d86:	f8ca 4000 	str.w	r4, [sl]
 8005d8a:	f8da 3000 	ldr.w	r3, [sl]
 8005d8e:	4499      	add	r9, r3
 8005d90:	e7d3      	b.n	8005d3a <__cvt+0x6a>
 8005d92:	1c59      	adds	r1, r3, #1
 8005d94:	9103      	str	r1, [sp, #12]
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	e7d9      	b.n	8005d4e <__cvt+0x7e>

08005d9a <__exponent>:
 8005d9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d9c:	2900      	cmp	r1, #0
 8005d9e:	bfba      	itte	lt
 8005da0:	4249      	neglt	r1, r1
 8005da2:	232d      	movlt	r3, #45	@ 0x2d
 8005da4:	232b      	movge	r3, #43	@ 0x2b
 8005da6:	2909      	cmp	r1, #9
 8005da8:	7002      	strb	r2, [r0, #0]
 8005daa:	7043      	strb	r3, [r0, #1]
 8005dac:	dd29      	ble.n	8005e02 <__exponent+0x68>
 8005dae:	f10d 0307 	add.w	r3, sp, #7
 8005db2:	461d      	mov	r5, r3
 8005db4:	270a      	movs	r7, #10
 8005db6:	461a      	mov	r2, r3
 8005db8:	fbb1 f6f7 	udiv	r6, r1, r7
 8005dbc:	fb07 1416 	mls	r4, r7, r6, r1
 8005dc0:	3430      	adds	r4, #48	@ 0x30
 8005dc2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	2c63      	cmp	r4, #99	@ 0x63
 8005dca:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005dce:	4631      	mov	r1, r6
 8005dd0:	dcf1      	bgt.n	8005db6 <__exponent+0x1c>
 8005dd2:	3130      	adds	r1, #48	@ 0x30
 8005dd4:	1e94      	subs	r4, r2, #2
 8005dd6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005dda:	1c41      	adds	r1, r0, #1
 8005ddc:	4623      	mov	r3, r4
 8005dde:	42ab      	cmp	r3, r5
 8005de0:	d30a      	bcc.n	8005df8 <__exponent+0x5e>
 8005de2:	f10d 0309 	add.w	r3, sp, #9
 8005de6:	1a9b      	subs	r3, r3, r2
 8005de8:	42ac      	cmp	r4, r5
 8005dea:	bf88      	it	hi
 8005dec:	2300      	movhi	r3, #0
 8005dee:	3302      	adds	r3, #2
 8005df0:	4403      	add	r3, r0
 8005df2:	1a18      	subs	r0, r3, r0
 8005df4:	b003      	add	sp, #12
 8005df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005df8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005dfc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e00:	e7ed      	b.n	8005dde <__exponent+0x44>
 8005e02:	2330      	movs	r3, #48	@ 0x30
 8005e04:	3130      	adds	r1, #48	@ 0x30
 8005e06:	7083      	strb	r3, [r0, #2]
 8005e08:	70c1      	strb	r1, [r0, #3]
 8005e0a:	1d03      	adds	r3, r0, #4
 8005e0c:	e7f1      	b.n	8005df2 <__exponent+0x58>
	...

08005e10 <_printf_float>:
 8005e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e14:	b08d      	sub	sp, #52	@ 0x34
 8005e16:	460c      	mov	r4, r1
 8005e18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005e1c:	4616      	mov	r6, r2
 8005e1e:	461f      	mov	r7, r3
 8005e20:	4605      	mov	r5, r0
 8005e22:	f000 fcb5 	bl	8006790 <_localeconv_r>
 8005e26:	6803      	ldr	r3, [r0, #0]
 8005e28:	9304      	str	r3, [sp, #16]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fa fa38 	bl	80002a0 <strlen>
 8005e30:	2300      	movs	r3, #0
 8005e32:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e34:	f8d8 3000 	ldr.w	r3, [r8]
 8005e38:	9005      	str	r0, [sp, #20]
 8005e3a:	3307      	adds	r3, #7
 8005e3c:	f023 0307 	bic.w	r3, r3, #7
 8005e40:	f103 0208 	add.w	r2, r3, #8
 8005e44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005e48:	f8d4 b000 	ldr.w	fp, [r4]
 8005e4c:	f8c8 2000 	str.w	r2, [r8]
 8005e50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005e58:	9307      	str	r3, [sp, #28]
 8005e5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005e62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e66:	4b9c      	ldr	r3, [pc, #624]	@ (80060d8 <_printf_float+0x2c8>)
 8005e68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e6c:	f7fa fe76 	bl	8000b5c <__aeabi_dcmpun>
 8005e70:	bb70      	cbnz	r0, 8005ed0 <_printf_float+0xc0>
 8005e72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e76:	4b98      	ldr	r3, [pc, #608]	@ (80060d8 <_printf_float+0x2c8>)
 8005e78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e7c:	f7fa fe50 	bl	8000b20 <__aeabi_dcmple>
 8005e80:	bb30      	cbnz	r0, 8005ed0 <_printf_float+0xc0>
 8005e82:	2200      	movs	r2, #0
 8005e84:	2300      	movs	r3, #0
 8005e86:	4640      	mov	r0, r8
 8005e88:	4649      	mov	r1, r9
 8005e8a:	f7fa fe3f 	bl	8000b0c <__aeabi_dcmplt>
 8005e8e:	b110      	cbz	r0, 8005e96 <_printf_float+0x86>
 8005e90:	232d      	movs	r3, #45	@ 0x2d
 8005e92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e96:	4a91      	ldr	r2, [pc, #580]	@ (80060dc <_printf_float+0x2cc>)
 8005e98:	4b91      	ldr	r3, [pc, #580]	@ (80060e0 <_printf_float+0x2d0>)
 8005e9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005e9e:	bf8c      	ite	hi
 8005ea0:	4690      	movhi	r8, r2
 8005ea2:	4698      	movls	r8, r3
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	6123      	str	r3, [r4, #16]
 8005ea8:	f02b 0304 	bic.w	r3, fp, #4
 8005eac:	6023      	str	r3, [r4, #0]
 8005eae:	f04f 0900 	mov.w	r9, #0
 8005eb2:	9700      	str	r7, [sp, #0]
 8005eb4:	4633      	mov	r3, r6
 8005eb6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005eb8:	4621      	mov	r1, r4
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f000 f9d2 	bl	8006264 <_printf_common>
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	f040 808d 	bne.w	8005fe0 <_printf_float+0x1d0>
 8005ec6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005eca:	b00d      	add	sp, #52	@ 0x34
 8005ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed0:	4642      	mov	r2, r8
 8005ed2:	464b      	mov	r3, r9
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	f7fa fe40 	bl	8000b5c <__aeabi_dcmpun>
 8005edc:	b140      	cbz	r0, 8005ef0 <_printf_float+0xe0>
 8005ede:	464b      	mov	r3, r9
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	bfbc      	itt	lt
 8005ee4:	232d      	movlt	r3, #45	@ 0x2d
 8005ee6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005eea:	4a7e      	ldr	r2, [pc, #504]	@ (80060e4 <_printf_float+0x2d4>)
 8005eec:	4b7e      	ldr	r3, [pc, #504]	@ (80060e8 <_printf_float+0x2d8>)
 8005eee:	e7d4      	b.n	8005e9a <_printf_float+0x8a>
 8005ef0:	6863      	ldr	r3, [r4, #4]
 8005ef2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005ef6:	9206      	str	r2, [sp, #24]
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	d13b      	bne.n	8005f74 <_printf_float+0x164>
 8005efc:	2306      	movs	r3, #6
 8005efe:	6063      	str	r3, [r4, #4]
 8005f00:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005f04:	2300      	movs	r3, #0
 8005f06:	6022      	str	r2, [r4, #0]
 8005f08:	9303      	str	r3, [sp, #12]
 8005f0a:	ab0a      	add	r3, sp, #40	@ 0x28
 8005f0c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005f10:	ab09      	add	r3, sp, #36	@ 0x24
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	6861      	ldr	r1, [r4, #4]
 8005f16:	ec49 8b10 	vmov	d0, r8, r9
 8005f1a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005f1e:	4628      	mov	r0, r5
 8005f20:	f7ff fed6 	bl	8005cd0 <__cvt>
 8005f24:	9b06      	ldr	r3, [sp, #24]
 8005f26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f28:	2b47      	cmp	r3, #71	@ 0x47
 8005f2a:	4680      	mov	r8, r0
 8005f2c:	d129      	bne.n	8005f82 <_printf_float+0x172>
 8005f2e:	1cc8      	adds	r0, r1, #3
 8005f30:	db02      	blt.n	8005f38 <_printf_float+0x128>
 8005f32:	6863      	ldr	r3, [r4, #4]
 8005f34:	4299      	cmp	r1, r3
 8005f36:	dd41      	ble.n	8005fbc <_printf_float+0x1ac>
 8005f38:	f1aa 0a02 	sub.w	sl, sl, #2
 8005f3c:	fa5f fa8a 	uxtb.w	sl, sl
 8005f40:	3901      	subs	r1, #1
 8005f42:	4652      	mov	r2, sl
 8005f44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005f48:	9109      	str	r1, [sp, #36]	@ 0x24
 8005f4a:	f7ff ff26 	bl	8005d9a <__exponent>
 8005f4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f50:	1813      	adds	r3, r2, r0
 8005f52:	2a01      	cmp	r2, #1
 8005f54:	4681      	mov	r9, r0
 8005f56:	6123      	str	r3, [r4, #16]
 8005f58:	dc02      	bgt.n	8005f60 <_printf_float+0x150>
 8005f5a:	6822      	ldr	r2, [r4, #0]
 8005f5c:	07d2      	lsls	r2, r2, #31
 8005f5e:	d501      	bpl.n	8005f64 <_printf_float+0x154>
 8005f60:	3301      	adds	r3, #1
 8005f62:	6123      	str	r3, [r4, #16]
 8005f64:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0a2      	beq.n	8005eb2 <_printf_float+0xa2>
 8005f6c:	232d      	movs	r3, #45	@ 0x2d
 8005f6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f72:	e79e      	b.n	8005eb2 <_printf_float+0xa2>
 8005f74:	9a06      	ldr	r2, [sp, #24]
 8005f76:	2a47      	cmp	r2, #71	@ 0x47
 8005f78:	d1c2      	bne.n	8005f00 <_printf_float+0xf0>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1c0      	bne.n	8005f00 <_printf_float+0xf0>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e7bd      	b.n	8005efe <_printf_float+0xee>
 8005f82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f86:	d9db      	bls.n	8005f40 <_printf_float+0x130>
 8005f88:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005f8c:	d118      	bne.n	8005fc0 <_printf_float+0x1b0>
 8005f8e:	2900      	cmp	r1, #0
 8005f90:	6863      	ldr	r3, [r4, #4]
 8005f92:	dd0b      	ble.n	8005fac <_printf_float+0x19c>
 8005f94:	6121      	str	r1, [r4, #16]
 8005f96:	b913      	cbnz	r3, 8005f9e <_printf_float+0x18e>
 8005f98:	6822      	ldr	r2, [r4, #0]
 8005f9a:	07d0      	lsls	r0, r2, #31
 8005f9c:	d502      	bpl.n	8005fa4 <_printf_float+0x194>
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	440b      	add	r3, r1
 8005fa2:	6123      	str	r3, [r4, #16]
 8005fa4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005fa6:	f04f 0900 	mov.w	r9, #0
 8005faa:	e7db      	b.n	8005f64 <_printf_float+0x154>
 8005fac:	b913      	cbnz	r3, 8005fb4 <_printf_float+0x1a4>
 8005fae:	6822      	ldr	r2, [r4, #0]
 8005fb0:	07d2      	lsls	r2, r2, #31
 8005fb2:	d501      	bpl.n	8005fb8 <_printf_float+0x1a8>
 8005fb4:	3302      	adds	r3, #2
 8005fb6:	e7f4      	b.n	8005fa2 <_printf_float+0x192>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e7f2      	b.n	8005fa2 <_printf_float+0x192>
 8005fbc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fc2:	4299      	cmp	r1, r3
 8005fc4:	db05      	blt.n	8005fd2 <_printf_float+0x1c2>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	6121      	str	r1, [r4, #16]
 8005fca:	07d8      	lsls	r0, r3, #31
 8005fcc:	d5ea      	bpl.n	8005fa4 <_printf_float+0x194>
 8005fce:	1c4b      	adds	r3, r1, #1
 8005fd0:	e7e7      	b.n	8005fa2 <_printf_float+0x192>
 8005fd2:	2900      	cmp	r1, #0
 8005fd4:	bfd4      	ite	le
 8005fd6:	f1c1 0202 	rsble	r2, r1, #2
 8005fda:	2201      	movgt	r2, #1
 8005fdc:	4413      	add	r3, r2
 8005fde:	e7e0      	b.n	8005fa2 <_printf_float+0x192>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	055a      	lsls	r2, r3, #21
 8005fe4:	d407      	bmi.n	8005ff6 <_printf_float+0x1e6>
 8005fe6:	6923      	ldr	r3, [r4, #16]
 8005fe8:	4642      	mov	r2, r8
 8005fea:	4631      	mov	r1, r6
 8005fec:	4628      	mov	r0, r5
 8005fee:	47b8      	blx	r7
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	d12b      	bne.n	800604c <_printf_float+0x23c>
 8005ff4:	e767      	b.n	8005ec6 <_printf_float+0xb6>
 8005ff6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ffa:	f240 80dd 	bls.w	80061b8 <_printf_float+0x3a8>
 8005ffe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006002:	2200      	movs	r2, #0
 8006004:	2300      	movs	r3, #0
 8006006:	f7fa fd77 	bl	8000af8 <__aeabi_dcmpeq>
 800600a:	2800      	cmp	r0, #0
 800600c:	d033      	beq.n	8006076 <_printf_float+0x266>
 800600e:	4a37      	ldr	r2, [pc, #220]	@ (80060ec <_printf_float+0x2dc>)
 8006010:	2301      	movs	r3, #1
 8006012:	4631      	mov	r1, r6
 8006014:	4628      	mov	r0, r5
 8006016:	47b8      	blx	r7
 8006018:	3001      	adds	r0, #1
 800601a:	f43f af54 	beq.w	8005ec6 <_printf_float+0xb6>
 800601e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006022:	4543      	cmp	r3, r8
 8006024:	db02      	blt.n	800602c <_printf_float+0x21c>
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	07d8      	lsls	r0, r3, #31
 800602a:	d50f      	bpl.n	800604c <_printf_float+0x23c>
 800602c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006030:	4631      	mov	r1, r6
 8006032:	4628      	mov	r0, r5
 8006034:	47b8      	blx	r7
 8006036:	3001      	adds	r0, #1
 8006038:	f43f af45 	beq.w	8005ec6 <_printf_float+0xb6>
 800603c:	f04f 0900 	mov.w	r9, #0
 8006040:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006044:	f104 0a1a 	add.w	sl, r4, #26
 8006048:	45c8      	cmp	r8, r9
 800604a:	dc09      	bgt.n	8006060 <_printf_float+0x250>
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	079b      	lsls	r3, r3, #30
 8006050:	f100 8103 	bmi.w	800625a <_printf_float+0x44a>
 8006054:	68e0      	ldr	r0, [r4, #12]
 8006056:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006058:	4298      	cmp	r0, r3
 800605a:	bfb8      	it	lt
 800605c:	4618      	movlt	r0, r3
 800605e:	e734      	b.n	8005eca <_printf_float+0xba>
 8006060:	2301      	movs	r3, #1
 8006062:	4652      	mov	r2, sl
 8006064:	4631      	mov	r1, r6
 8006066:	4628      	mov	r0, r5
 8006068:	47b8      	blx	r7
 800606a:	3001      	adds	r0, #1
 800606c:	f43f af2b 	beq.w	8005ec6 <_printf_float+0xb6>
 8006070:	f109 0901 	add.w	r9, r9, #1
 8006074:	e7e8      	b.n	8006048 <_printf_float+0x238>
 8006076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006078:	2b00      	cmp	r3, #0
 800607a:	dc39      	bgt.n	80060f0 <_printf_float+0x2e0>
 800607c:	4a1b      	ldr	r2, [pc, #108]	@ (80060ec <_printf_float+0x2dc>)
 800607e:	2301      	movs	r3, #1
 8006080:	4631      	mov	r1, r6
 8006082:	4628      	mov	r0, r5
 8006084:	47b8      	blx	r7
 8006086:	3001      	adds	r0, #1
 8006088:	f43f af1d 	beq.w	8005ec6 <_printf_float+0xb6>
 800608c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006090:	ea59 0303 	orrs.w	r3, r9, r3
 8006094:	d102      	bne.n	800609c <_printf_float+0x28c>
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	07d9      	lsls	r1, r3, #31
 800609a:	d5d7      	bpl.n	800604c <_printf_float+0x23c>
 800609c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060a0:	4631      	mov	r1, r6
 80060a2:	4628      	mov	r0, r5
 80060a4:	47b8      	blx	r7
 80060a6:	3001      	adds	r0, #1
 80060a8:	f43f af0d 	beq.w	8005ec6 <_printf_float+0xb6>
 80060ac:	f04f 0a00 	mov.w	sl, #0
 80060b0:	f104 0b1a 	add.w	fp, r4, #26
 80060b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060b6:	425b      	negs	r3, r3
 80060b8:	4553      	cmp	r3, sl
 80060ba:	dc01      	bgt.n	80060c0 <_printf_float+0x2b0>
 80060bc:	464b      	mov	r3, r9
 80060be:	e793      	b.n	8005fe8 <_printf_float+0x1d8>
 80060c0:	2301      	movs	r3, #1
 80060c2:	465a      	mov	r2, fp
 80060c4:	4631      	mov	r1, r6
 80060c6:	4628      	mov	r0, r5
 80060c8:	47b8      	blx	r7
 80060ca:	3001      	adds	r0, #1
 80060cc:	f43f aefb 	beq.w	8005ec6 <_printf_float+0xb6>
 80060d0:	f10a 0a01 	add.w	sl, sl, #1
 80060d4:	e7ee      	b.n	80060b4 <_printf_float+0x2a4>
 80060d6:	bf00      	nop
 80060d8:	7fefffff 	.word	0x7fefffff
 80060dc:	08008698 	.word	0x08008698
 80060e0:	08008694 	.word	0x08008694
 80060e4:	080086a0 	.word	0x080086a0
 80060e8:	0800869c 	.word	0x0800869c
 80060ec:	080086a4 	.word	0x080086a4
 80060f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80060f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80060f6:	4553      	cmp	r3, sl
 80060f8:	bfa8      	it	ge
 80060fa:	4653      	movge	r3, sl
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	4699      	mov	r9, r3
 8006100:	dc36      	bgt.n	8006170 <_printf_float+0x360>
 8006102:	f04f 0b00 	mov.w	fp, #0
 8006106:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800610a:	f104 021a 	add.w	r2, r4, #26
 800610e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006110:	9306      	str	r3, [sp, #24]
 8006112:	eba3 0309 	sub.w	r3, r3, r9
 8006116:	455b      	cmp	r3, fp
 8006118:	dc31      	bgt.n	800617e <_printf_float+0x36e>
 800611a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800611c:	459a      	cmp	sl, r3
 800611e:	dc3a      	bgt.n	8006196 <_printf_float+0x386>
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	07da      	lsls	r2, r3, #31
 8006124:	d437      	bmi.n	8006196 <_printf_float+0x386>
 8006126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006128:	ebaa 0903 	sub.w	r9, sl, r3
 800612c:	9b06      	ldr	r3, [sp, #24]
 800612e:	ebaa 0303 	sub.w	r3, sl, r3
 8006132:	4599      	cmp	r9, r3
 8006134:	bfa8      	it	ge
 8006136:	4699      	movge	r9, r3
 8006138:	f1b9 0f00 	cmp.w	r9, #0
 800613c:	dc33      	bgt.n	80061a6 <_printf_float+0x396>
 800613e:	f04f 0800 	mov.w	r8, #0
 8006142:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006146:	f104 0b1a 	add.w	fp, r4, #26
 800614a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800614c:	ebaa 0303 	sub.w	r3, sl, r3
 8006150:	eba3 0309 	sub.w	r3, r3, r9
 8006154:	4543      	cmp	r3, r8
 8006156:	f77f af79 	ble.w	800604c <_printf_float+0x23c>
 800615a:	2301      	movs	r3, #1
 800615c:	465a      	mov	r2, fp
 800615e:	4631      	mov	r1, r6
 8006160:	4628      	mov	r0, r5
 8006162:	47b8      	blx	r7
 8006164:	3001      	adds	r0, #1
 8006166:	f43f aeae 	beq.w	8005ec6 <_printf_float+0xb6>
 800616a:	f108 0801 	add.w	r8, r8, #1
 800616e:	e7ec      	b.n	800614a <_printf_float+0x33a>
 8006170:	4642      	mov	r2, r8
 8006172:	4631      	mov	r1, r6
 8006174:	4628      	mov	r0, r5
 8006176:	47b8      	blx	r7
 8006178:	3001      	adds	r0, #1
 800617a:	d1c2      	bne.n	8006102 <_printf_float+0x2f2>
 800617c:	e6a3      	b.n	8005ec6 <_printf_float+0xb6>
 800617e:	2301      	movs	r3, #1
 8006180:	4631      	mov	r1, r6
 8006182:	4628      	mov	r0, r5
 8006184:	9206      	str	r2, [sp, #24]
 8006186:	47b8      	blx	r7
 8006188:	3001      	adds	r0, #1
 800618a:	f43f ae9c 	beq.w	8005ec6 <_printf_float+0xb6>
 800618e:	9a06      	ldr	r2, [sp, #24]
 8006190:	f10b 0b01 	add.w	fp, fp, #1
 8006194:	e7bb      	b.n	800610e <_printf_float+0x2fe>
 8006196:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800619a:	4631      	mov	r1, r6
 800619c:	4628      	mov	r0, r5
 800619e:	47b8      	blx	r7
 80061a0:	3001      	adds	r0, #1
 80061a2:	d1c0      	bne.n	8006126 <_printf_float+0x316>
 80061a4:	e68f      	b.n	8005ec6 <_printf_float+0xb6>
 80061a6:	9a06      	ldr	r2, [sp, #24]
 80061a8:	464b      	mov	r3, r9
 80061aa:	4442      	add	r2, r8
 80061ac:	4631      	mov	r1, r6
 80061ae:	4628      	mov	r0, r5
 80061b0:	47b8      	blx	r7
 80061b2:	3001      	adds	r0, #1
 80061b4:	d1c3      	bne.n	800613e <_printf_float+0x32e>
 80061b6:	e686      	b.n	8005ec6 <_printf_float+0xb6>
 80061b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80061bc:	f1ba 0f01 	cmp.w	sl, #1
 80061c0:	dc01      	bgt.n	80061c6 <_printf_float+0x3b6>
 80061c2:	07db      	lsls	r3, r3, #31
 80061c4:	d536      	bpl.n	8006234 <_printf_float+0x424>
 80061c6:	2301      	movs	r3, #1
 80061c8:	4642      	mov	r2, r8
 80061ca:	4631      	mov	r1, r6
 80061cc:	4628      	mov	r0, r5
 80061ce:	47b8      	blx	r7
 80061d0:	3001      	adds	r0, #1
 80061d2:	f43f ae78 	beq.w	8005ec6 <_printf_float+0xb6>
 80061d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061da:	4631      	mov	r1, r6
 80061dc:	4628      	mov	r0, r5
 80061de:	47b8      	blx	r7
 80061e0:	3001      	adds	r0, #1
 80061e2:	f43f ae70 	beq.w	8005ec6 <_printf_float+0xb6>
 80061e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80061ea:	2200      	movs	r2, #0
 80061ec:	2300      	movs	r3, #0
 80061ee:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80061f2:	f7fa fc81 	bl	8000af8 <__aeabi_dcmpeq>
 80061f6:	b9c0      	cbnz	r0, 800622a <_printf_float+0x41a>
 80061f8:	4653      	mov	r3, sl
 80061fa:	f108 0201 	add.w	r2, r8, #1
 80061fe:	4631      	mov	r1, r6
 8006200:	4628      	mov	r0, r5
 8006202:	47b8      	blx	r7
 8006204:	3001      	adds	r0, #1
 8006206:	d10c      	bne.n	8006222 <_printf_float+0x412>
 8006208:	e65d      	b.n	8005ec6 <_printf_float+0xb6>
 800620a:	2301      	movs	r3, #1
 800620c:	465a      	mov	r2, fp
 800620e:	4631      	mov	r1, r6
 8006210:	4628      	mov	r0, r5
 8006212:	47b8      	blx	r7
 8006214:	3001      	adds	r0, #1
 8006216:	f43f ae56 	beq.w	8005ec6 <_printf_float+0xb6>
 800621a:	f108 0801 	add.w	r8, r8, #1
 800621e:	45d0      	cmp	r8, sl
 8006220:	dbf3      	blt.n	800620a <_printf_float+0x3fa>
 8006222:	464b      	mov	r3, r9
 8006224:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006228:	e6df      	b.n	8005fea <_printf_float+0x1da>
 800622a:	f04f 0800 	mov.w	r8, #0
 800622e:	f104 0b1a 	add.w	fp, r4, #26
 8006232:	e7f4      	b.n	800621e <_printf_float+0x40e>
 8006234:	2301      	movs	r3, #1
 8006236:	4642      	mov	r2, r8
 8006238:	e7e1      	b.n	80061fe <_printf_float+0x3ee>
 800623a:	2301      	movs	r3, #1
 800623c:	464a      	mov	r2, r9
 800623e:	4631      	mov	r1, r6
 8006240:	4628      	mov	r0, r5
 8006242:	47b8      	blx	r7
 8006244:	3001      	adds	r0, #1
 8006246:	f43f ae3e 	beq.w	8005ec6 <_printf_float+0xb6>
 800624a:	f108 0801 	add.w	r8, r8, #1
 800624e:	68e3      	ldr	r3, [r4, #12]
 8006250:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006252:	1a5b      	subs	r3, r3, r1
 8006254:	4543      	cmp	r3, r8
 8006256:	dcf0      	bgt.n	800623a <_printf_float+0x42a>
 8006258:	e6fc      	b.n	8006054 <_printf_float+0x244>
 800625a:	f04f 0800 	mov.w	r8, #0
 800625e:	f104 0919 	add.w	r9, r4, #25
 8006262:	e7f4      	b.n	800624e <_printf_float+0x43e>

08006264 <_printf_common>:
 8006264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006268:	4616      	mov	r6, r2
 800626a:	4698      	mov	r8, r3
 800626c:	688a      	ldr	r2, [r1, #8]
 800626e:	690b      	ldr	r3, [r1, #16]
 8006270:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006274:	4293      	cmp	r3, r2
 8006276:	bfb8      	it	lt
 8006278:	4613      	movlt	r3, r2
 800627a:	6033      	str	r3, [r6, #0]
 800627c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006280:	4607      	mov	r7, r0
 8006282:	460c      	mov	r4, r1
 8006284:	b10a      	cbz	r2, 800628a <_printf_common+0x26>
 8006286:	3301      	adds	r3, #1
 8006288:	6033      	str	r3, [r6, #0]
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	0699      	lsls	r1, r3, #26
 800628e:	bf42      	ittt	mi
 8006290:	6833      	ldrmi	r3, [r6, #0]
 8006292:	3302      	addmi	r3, #2
 8006294:	6033      	strmi	r3, [r6, #0]
 8006296:	6825      	ldr	r5, [r4, #0]
 8006298:	f015 0506 	ands.w	r5, r5, #6
 800629c:	d106      	bne.n	80062ac <_printf_common+0x48>
 800629e:	f104 0a19 	add.w	sl, r4, #25
 80062a2:	68e3      	ldr	r3, [r4, #12]
 80062a4:	6832      	ldr	r2, [r6, #0]
 80062a6:	1a9b      	subs	r3, r3, r2
 80062a8:	42ab      	cmp	r3, r5
 80062aa:	dc26      	bgt.n	80062fa <_printf_common+0x96>
 80062ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062b0:	6822      	ldr	r2, [r4, #0]
 80062b2:	3b00      	subs	r3, #0
 80062b4:	bf18      	it	ne
 80062b6:	2301      	movne	r3, #1
 80062b8:	0692      	lsls	r2, r2, #26
 80062ba:	d42b      	bmi.n	8006314 <_printf_common+0xb0>
 80062bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062c0:	4641      	mov	r1, r8
 80062c2:	4638      	mov	r0, r7
 80062c4:	47c8      	blx	r9
 80062c6:	3001      	adds	r0, #1
 80062c8:	d01e      	beq.n	8006308 <_printf_common+0xa4>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	6922      	ldr	r2, [r4, #16]
 80062ce:	f003 0306 	and.w	r3, r3, #6
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	bf02      	ittt	eq
 80062d6:	68e5      	ldreq	r5, [r4, #12]
 80062d8:	6833      	ldreq	r3, [r6, #0]
 80062da:	1aed      	subeq	r5, r5, r3
 80062dc:	68a3      	ldr	r3, [r4, #8]
 80062de:	bf0c      	ite	eq
 80062e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062e4:	2500      	movne	r5, #0
 80062e6:	4293      	cmp	r3, r2
 80062e8:	bfc4      	itt	gt
 80062ea:	1a9b      	subgt	r3, r3, r2
 80062ec:	18ed      	addgt	r5, r5, r3
 80062ee:	2600      	movs	r6, #0
 80062f0:	341a      	adds	r4, #26
 80062f2:	42b5      	cmp	r5, r6
 80062f4:	d11a      	bne.n	800632c <_printf_common+0xc8>
 80062f6:	2000      	movs	r0, #0
 80062f8:	e008      	b.n	800630c <_printf_common+0xa8>
 80062fa:	2301      	movs	r3, #1
 80062fc:	4652      	mov	r2, sl
 80062fe:	4641      	mov	r1, r8
 8006300:	4638      	mov	r0, r7
 8006302:	47c8      	blx	r9
 8006304:	3001      	adds	r0, #1
 8006306:	d103      	bne.n	8006310 <_printf_common+0xac>
 8006308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800630c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006310:	3501      	adds	r5, #1
 8006312:	e7c6      	b.n	80062a2 <_printf_common+0x3e>
 8006314:	18e1      	adds	r1, r4, r3
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	2030      	movs	r0, #48	@ 0x30
 800631a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800631e:	4422      	add	r2, r4
 8006320:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006324:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006328:	3302      	adds	r3, #2
 800632a:	e7c7      	b.n	80062bc <_printf_common+0x58>
 800632c:	2301      	movs	r3, #1
 800632e:	4622      	mov	r2, r4
 8006330:	4641      	mov	r1, r8
 8006332:	4638      	mov	r0, r7
 8006334:	47c8      	blx	r9
 8006336:	3001      	adds	r0, #1
 8006338:	d0e6      	beq.n	8006308 <_printf_common+0xa4>
 800633a:	3601      	adds	r6, #1
 800633c:	e7d9      	b.n	80062f2 <_printf_common+0x8e>
	...

08006340 <_printf_i>:
 8006340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006344:	7e0f      	ldrb	r7, [r1, #24]
 8006346:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006348:	2f78      	cmp	r7, #120	@ 0x78
 800634a:	4691      	mov	r9, r2
 800634c:	4680      	mov	r8, r0
 800634e:	460c      	mov	r4, r1
 8006350:	469a      	mov	sl, r3
 8006352:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006356:	d807      	bhi.n	8006368 <_printf_i+0x28>
 8006358:	2f62      	cmp	r7, #98	@ 0x62
 800635a:	d80a      	bhi.n	8006372 <_printf_i+0x32>
 800635c:	2f00      	cmp	r7, #0
 800635e:	f000 80d1 	beq.w	8006504 <_printf_i+0x1c4>
 8006362:	2f58      	cmp	r7, #88	@ 0x58
 8006364:	f000 80b8 	beq.w	80064d8 <_printf_i+0x198>
 8006368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800636c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006370:	e03a      	b.n	80063e8 <_printf_i+0xa8>
 8006372:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006376:	2b15      	cmp	r3, #21
 8006378:	d8f6      	bhi.n	8006368 <_printf_i+0x28>
 800637a:	a101      	add	r1, pc, #4	@ (adr r1, 8006380 <_printf_i+0x40>)
 800637c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006380:	080063d9 	.word	0x080063d9
 8006384:	080063ed 	.word	0x080063ed
 8006388:	08006369 	.word	0x08006369
 800638c:	08006369 	.word	0x08006369
 8006390:	08006369 	.word	0x08006369
 8006394:	08006369 	.word	0x08006369
 8006398:	080063ed 	.word	0x080063ed
 800639c:	08006369 	.word	0x08006369
 80063a0:	08006369 	.word	0x08006369
 80063a4:	08006369 	.word	0x08006369
 80063a8:	08006369 	.word	0x08006369
 80063ac:	080064eb 	.word	0x080064eb
 80063b0:	08006417 	.word	0x08006417
 80063b4:	080064a5 	.word	0x080064a5
 80063b8:	08006369 	.word	0x08006369
 80063bc:	08006369 	.word	0x08006369
 80063c0:	0800650d 	.word	0x0800650d
 80063c4:	08006369 	.word	0x08006369
 80063c8:	08006417 	.word	0x08006417
 80063cc:	08006369 	.word	0x08006369
 80063d0:	08006369 	.word	0x08006369
 80063d4:	080064ad 	.word	0x080064ad
 80063d8:	6833      	ldr	r3, [r6, #0]
 80063da:	1d1a      	adds	r2, r3, #4
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6032      	str	r2, [r6, #0]
 80063e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063e8:	2301      	movs	r3, #1
 80063ea:	e09c      	b.n	8006526 <_printf_i+0x1e6>
 80063ec:	6833      	ldr	r3, [r6, #0]
 80063ee:	6820      	ldr	r0, [r4, #0]
 80063f0:	1d19      	adds	r1, r3, #4
 80063f2:	6031      	str	r1, [r6, #0]
 80063f4:	0606      	lsls	r6, r0, #24
 80063f6:	d501      	bpl.n	80063fc <_printf_i+0xbc>
 80063f8:	681d      	ldr	r5, [r3, #0]
 80063fa:	e003      	b.n	8006404 <_printf_i+0xc4>
 80063fc:	0645      	lsls	r5, r0, #25
 80063fe:	d5fb      	bpl.n	80063f8 <_printf_i+0xb8>
 8006400:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006404:	2d00      	cmp	r5, #0
 8006406:	da03      	bge.n	8006410 <_printf_i+0xd0>
 8006408:	232d      	movs	r3, #45	@ 0x2d
 800640a:	426d      	negs	r5, r5
 800640c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006410:	4858      	ldr	r0, [pc, #352]	@ (8006574 <_printf_i+0x234>)
 8006412:	230a      	movs	r3, #10
 8006414:	e011      	b.n	800643a <_printf_i+0xfa>
 8006416:	6821      	ldr	r1, [r4, #0]
 8006418:	6833      	ldr	r3, [r6, #0]
 800641a:	0608      	lsls	r0, r1, #24
 800641c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006420:	d402      	bmi.n	8006428 <_printf_i+0xe8>
 8006422:	0649      	lsls	r1, r1, #25
 8006424:	bf48      	it	mi
 8006426:	b2ad      	uxthmi	r5, r5
 8006428:	2f6f      	cmp	r7, #111	@ 0x6f
 800642a:	4852      	ldr	r0, [pc, #328]	@ (8006574 <_printf_i+0x234>)
 800642c:	6033      	str	r3, [r6, #0]
 800642e:	bf14      	ite	ne
 8006430:	230a      	movne	r3, #10
 8006432:	2308      	moveq	r3, #8
 8006434:	2100      	movs	r1, #0
 8006436:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800643a:	6866      	ldr	r6, [r4, #4]
 800643c:	60a6      	str	r6, [r4, #8]
 800643e:	2e00      	cmp	r6, #0
 8006440:	db05      	blt.n	800644e <_printf_i+0x10e>
 8006442:	6821      	ldr	r1, [r4, #0]
 8006444:	432e      	orrs	r6, r5
 8006446:	f021 0104 	bic.w	r1, r1, #4
 800644a:	6021      	str	r1, [r4, #0]
 800644c:	d04b      	beq.n	80064e6 <_printf_i+0x1a6>
 800644e:	4616      	mov	r6, r2
 8006450:	fbb5 f1f3 	udiv	r1, r5, r3
 8006454:	fb03 5711 	mls	r7, r3, r1, r5
 8006458:	5dc7      	ldrb	r7, [r0, r7]
 800645a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800645e:	462f      	mov	r7, r5
 8006460:	42bb      	cmp	r3, r7
 8006462:	460d      	mov	r5, r1
 8006464:	d9f4      	bls.n	8006450 <_printf_i+0x110>
 8006466:	2b08      	cmp	r3, #8
 8006468:	d10b      	bne.n	8006482 <_printf_i+0x142>
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	07df      	lsls	r7, r3, #31
 800646e:	d508      	bpl.n	8006482 <_printf_i+0x142>
 8006470:	6923      	ldr	r3, [r4, #16]
 8006472:	6861      	ldr	r1, [r4, #4]
 8006474:	4299      	cmp	r1, r3
 8006476:	bfde      	ittt	le
 8006478:	2330      	movle	r3, #48	@ 0x30
 800647a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800647e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006482:	1b92      	subs	r2, r2, r6
 8006484:	6122      	str	r2, [r4, #16]
 8006486:	f8cd a000 	str.w	sl, [sp]
 800648a:	464b      	mov	r3, r9
 800648c:	aa03      	add	r2, sp, #12
 800648e:	4621      	mov	r1, r4
 8006490:	4640      	mov	r0, r8
 8006492:	f7ff fee7 	bl	8006264 <_printf_common>
 8006496:	3001      	adds	r0, #1
 8006498:	d14a      	bne.n	8006530 <_printf_i+0x1f0>
 800649a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800649e:	b004      	add	sp, #16
 80064a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	f043 0320 	orr.w	r3, r3, #32
 80064aa:	6023      	str	r3, [r4, #0]
 80064ac:	4832      	ldr	r0, [pc, #200]	@ (8006578 <_printf_i+0x238>)
 80064ae:	2778      	movs	r7, #120	@ 0x78
 80064b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	6831      	ldr	r1, [r6, #0]
 80064b8:	061f      	lsls	r7, r3, #24
 80064ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80064be:	d402      	bmi.n	80064c6 <_printf_i+0x186>
 80064c0:	065f      	lsls	r7, r3, #25
 80064c2:	bf48      	it	mi
 80064c4:	b2ad      	uxthmi	r5, r5
 80064c6:	6031      	str	r1, [r6, #0]
 80064c8:	07d9      	lsls	r1, r3, #31
 80064ca:	bf44      	itt	mi
 80064cc:	f043 0320 	orrmi.w	r3, r3, #32
 80064d0:	6023      	strmi	r3, [r4, #0]
 80064d2:	b11d      	cbz	r5, 80064dc <_printf_i+0x19c>
 80064d4:	2310      	movs	r3, #16
 80064d6:	e7ad      	b.n	8006434 <_printf_i+0xf4>
 80064d8:	4826      	ldr	r0, [pc, #152]	@ (8006574 <_printf_i+0x234>)
 80064da:	e7e9      	b.n	80064b0 <_printf_i+0x170>
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	f023 0320 	bic.w	r3, r3, #32
 80064e2:	6023      	str	r3, [r4, #0]
 80064e4:	e7f6      	b.n	80064d4 <_printf_i+0x194>
 80064e6:	4616      	mov	r6, r2
 80064e8:	e7bd      	b.n	8006466 <_printf_i+0x126>
 80064ea:	6833      	ldr	r3, [r6, #0]
 80064ec:	6825      	ldr	r5, [r4, #0]
 80064ee:	6961      	ldr	r1, [r4, #20]
 80064f0:	1d18      	adds	r0, r3, #4
 80064f2:	6030      	str	r0, [r6, #0]
 80064f4:	062e      	lsls	r6, r5, #24
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	d501      	bpl.n	80064fe <_printf_i+0x1be>
 80064fa:	6019      	str	r1, [r3, #0]
 80064fc:	e002      	b.n	8006504 <_printf_i+0x1c4>
 80064fe:	0668      	lsls	r0, r5, #25
 8006500:	d5fb      	bpl.n	80064fa <_printf_i+0x1ba>
 8006502:	8019      	strh	r1, [r3, #0]
 8006504:	2300      	movs	r3, #0
 8006506:	6123      	str	r3, [r4, #16]
 8006508:	4616      	mov	r6, r2
 800650a:	e7bc      	b.n	8006486 <_printf_i+0x146>
 800650c:	6833      	ldr	r3, [r6, #0]
 800650e:	1d1a      	adds	r2, r3, #4
 8006510:	6032      	str	r2, [r6, #0]
 8006512:	681e      	ldr	r6, [r3, #0]
 8006514:	6862      	ldr	r2, [r4, #4]
 8006516:	2100      	movs	r1, #0
 8006518:	4630      	mov	r0, r6
 800651a:	f7f9 fe71 	bl	8000200 <memchr>
 800651e:	b108      	cbz	r0, 8006524 <_printf_i+0x1e4>
 8006520:	1b80      	subs	r0, r0, r6
 8006522:	6060      	str	r0, [r4, #4]
 8006524:	6863      	ldr	r3, [r4, #4]
 8006526:	6123      	str	r3, [r4, #16]
 8006528:	2300      	movs	r3, #0
 800652a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800652e:	e7aa      	b.n	8006486 <_printf_i+0x146>
 8006530:	6923      	ldr	r3, [r4, #16]
 8006532:	4632      	mov	r2, r6
 8006534:	4649      	mov	r1, r9
 8006536:	4640      	mov	r0, r8
 8006538:	47d0      	blx	sl
 800653a:	3001      	adds	r0, #1
 800653c:	d0ad      	beq.n	800649a <_printf_i+0x15a>
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	079b      	lsls	r3, r3, #30
 8006542:	d413      	bmi.n	800656c <_printf_i+0x22c>
 8006544:	68e0      	ldr	r0, [r4, #12]
 8006546:	9b03      	ldr	r3, [sp, #12]
 8006548:	4298      	cmp	r0, r3
 800654a:	bfb8      	it	lt
 800654c:	4618      	movlt	r0, r3
 800654e:	e7a6      	b.n	800649e <_printf_i+0x15e>
 8006550:	2301      	movs	r3, #1
 8006552:	4632      	mov	r2, r6
 8006554:	4649      	mov	r1, r9
 8006556:	4640      	mov	r0, r8
 8006558:	47d0      	blx	sl
 800655a:	3001      	adds	r0, #1
 800655c:	d09d      	beq.n	800649a <_printf_i+0x15a>
 800655e:	3501      	adds	r5, #1
 8006560:	68e3      	ldr	r3, [r4, #12]
 8006562:	9903      	ldr	r1, [sp, #12]
 8006564:	1a5b      	subs	r3, r3, r1
 8006566:	42ab      	cmp	r3, r5
 8006568:	dcf2      	bgt.n	8006550 <_printf_i+0x210>
 800656a:	e7eb      	b.n	8006544 <_printf_i+0x204>
 800656c:	2500      	movs	r5, #0
 800656e:	f104 0619 	add.w	r6, r4, #25
 8006572:	e7f5      	b.n	8006560 <_printf_i+0x220>
 8006574:	080086a6 	.word	0x080086a6
 8006578:	080086b7 	.word	0x080086b7

0800657c <std>:
 800657c:	2300      	movs	r3, #0
 800657e:	b510      	push	{r4, lr}
 8006580:	4604      	mov	r4, r0
 8006582:	e9c0 3300 	strd	r3, r3, [r0]
 8006586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800658a:	6083      	str	r3, [r0, #8]
 800658c:	8181      	strh	r1, [r0, #12]
 800658e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006590:	81c2      	strh	r2, [r0, #14]
 8006592:	6183      	str	r3, [r0, #24]
 8006594:	4619      	mov	r1, r3
 8006596:	2208      	movs	r2, #8
 8006598:	305c      	adds	r0, #92	@ 0x5c
 800659a:	f000 f8c3 	bl	8006724 <memset>
 800659e:	4b0d      	ldr	r3, [pc, #52]	@ (80065d4 <std+0x58>)
 80065a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80065a2:	4b0d      	ldr	r3, [pc, #52]	@ (80065d8 <std+0x5c>)
 80065a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80065a6:	4b0d      	ldr	r3, [pc, #52]	@ (80065dc <std+0x60>)
 80065a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80065aa:	4b0d      	ldr	r3, [pc, #52]	@ (80065e0 <std+0x64>)
 80065ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80065ae:	4b0d      	ldr	r3, [pc, #52]	@ (80065e4 <std+0x68>)
 80065b0:	6224      	str	r4, [r4, #32]
 80065b2:	429c      	cmp	r4, r3
 80065b4:	d006      	beq.n	80065c4 <std+0x48>
 80065b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80065ba:	4294      	cmp	r4, r2
 80065bc:	d002      	beq.n	80065c4 <std+0x48>
 80065be:	33d0      	adds	r3, #208	@ 0xd0
 80065c0:	429c      	cmp	r4, r3
 80065c2:	d105      	bne.n	80065d0 <std+0x54>
 80065c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065cc:	f000 b8dc 	b.w	8006788 <__retarget_lock_init_recursive>
 80065d0:	bd10      	pop	{r4, pc}
 80065d2:	bf00      	nop
 80065d4:	08008085 	.word	0x08008085
 80065d8:	080080a7 	.word	0x080080a7
 80065dc:	080080df 	.word	0x080080df
 80065e0:	08008103 	.word	0x08008103
 80065e4:	200403c0 	.word	0x200403c0

080065e8 <stdio_exit_handler>:
 80065e8:	4a02      	ldr	r2, [pc, #8]	@ (80065f4 <stdio_exit_handler+0xc>)
 80065ea:	4903      	ldr	r1, [pc, #12]	@ (80065f8 <stdio_exit_handler+0x10>)
 80065ec:	4803      	ldr	r0, [pc, #12]	@ (80065fc <stdio_exit_handler+0x14>)
 80065ee:	f000 b869 	b.w	80066c4 <_fwalk_sglue>
 80065f2:	bf00      	nop
 80065f4:	2004000c 	.word	0x2004000c
 80065f8:	08007929 	.word	0x08007929
 80065fc:	2004001c 	.word	0x2004001c

08006600 <cleanup_stdio>:
 8006600:	6841      	ldr	r1, [r0, #4]
 8006602:	4b0c      	ldr	r3, [pc, #48]	@ (8006634 <cleanup_stdio+0x34>)
 8006604:	4299      	cmp	r1, r3
 8006606:	b510      	push	{r4, lr}
 8006608:	4604      	mov	r4, r0
 800660a:	d001      	beq.n	8006610 <cleanup_stdio+0x10>
 800660c:	f001 f98c 	bl	8007928 <_fflush_r>
 8006610:	68a1      	ldr	r1, [r4, #8]
 8006612:	4b09      	ldr	r3, [pc, #36]	@ (8006638 <cleanup_stdio+0x38>)
 8006614:	4299      	cmp	r1, r3
 8006616:	d002      	beq.n	800661e <cleanup_stdio+0x1e>
 8006618:	4620      	mov	r0, r4
 800661a:	f001 f985 	bl	8007928 <_fflush_r>
 800661e:	68e1      	ldr	r1, [r4, #12]
 8006620:	4b06      	ldr	r3, [pc, #24]	@ (800663c <cleanup_stdio+0x3c>)
 8006622:	4299      	cmp	r1, r3
 8006624:	d004      	beq.n	8006630 <cleanup_stdio+0x30>
 8006626:	4620      	mov	r0, r4
 8006628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800662c:	f001 b97c 	b.w	8007928 <_fflush_r>
 8006630:	bd10      	pop	{r4, pc}
 8006632:	bf00      	nop
 8006634:	200403c0 	.word	0x200403c0
 8006638:	20040428 	.word	0x20040428
 800663c:	20040490 	.word	0x20040490

08006640 <global_stdio_init.part.0>:
 8006640:	b510      	push	{r4, lr}
 8006642:	4b0b      	ldr	r3, [pc, #44]	@ (8006670 <global_stdio_init.part.0+0x30>)
 8006644:	4c0b      	ldr	r4, [pc, #44]	@ (8006674 <global_stdio_init.part.0+0x34>)
 8006646:	4a0c      	ldr	r2, [pc, #48]	@ (8006678 <global_stdio_init.part.0+0x38>)
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	4620      	mov	r0, r4
 800664c:	2200      	movs	r2, #0
 800664e:	2104      	movs	r1, #4
 8006650:	f7ff ff94 	bl	800657c <std>
 8006654:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006658:	2201      	movs	r2, #1
 800665a:	2109      	movs	r1, #9
 800665c:	f7ff ff8e 	bl	800657c <std>
 8006660:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006664:	2202      	movs	r2, #2
 8006666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800666a:	2112      	movs	r1, #18
 800666c:	f7ff bf86 	b.w	800657c <std>
 8006670:	200404f8 	.word	0x200404f8
 8006674:	200403c0 	.word	0x200403c0
 8006678:	080065e9 	.word	0x080065e9

0800667c <__sfp_lock_acquire>:
 800667c:	4801      	ldr	r0, [pc, #4]	@ (8006684 <__sfp_lock_acquire+0x8>)
 800667e:	f000 b884 	b.w	800678a <__retarget_lock_acquire_recursive>
 8006682:	bf00      	nop
 8006684:	200404fd 	.word	0x200404fd

08006688 <__sfp_lock_release>:
 8006688:	4801      	ldr	r0, [pc, #4]	@ (8006690 <__sfp_lock_release+0x8>)
 800668a:	f000 b87f 	b.w	800678c <__retarget_lock_release_recursive>
 800668e:	bf00      	nop
 8006690:	200404fd 	.word	0x200404fd

08006694 <__sinit>:
 8006694:	b510      	push	{r4, lr}
 8006696:	4604      	mov	r4, r0
 8006698:	f7ff fff0 	bl	800667c <__sfp_lock_acquire>
 800669c:	6a23      	ldr	r3, [r4, #32]
 800669e:	b11b      	cbz	r3, 80066a8 <__sinit+0x14>
 80066a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066a4:	f7ff bff0 	b.w	8006688 <__sfp_lock_release>
 80066a8:	4b04      	ldr	r3, [pc, #16]	@ (80066bc <__sinit+0x28>)
 80066aa:	6223      	str	r3, [r4, #32]
 80066ac:	4b04      	ldr	r3, [pc, #16]	@ (80066c0 <__sinit+0x2c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1f5      	bne.n	80066a0 <__sinit+0xc>
 80066b4:	f7ff ffc4 	bl	8006640 <global_stdio_init.part.0>
 80066b8:	e7f2      	b.n	80066a0 <__sinit+0xc>
 80066ba:	bf00      	nop
 80066bc:	08006601 	.word	0x08006601
 80066c0:	200404f8 	.word	0x200404f8

080066c4 <_fwalk_sglue>:
 80066c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c8:	4607      	mov	r7, r0
 80066ca:	4688      	mov	r8, r1
 80066cc:	4614      	mov	r4, r2
 80066ce:	2600      	movs	r6, #0
 80066d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066d4:	f1b9 0901 	subs.w	r9, r9, #1
 80066d8:	d505      	bpl.n	80066e6 <_fwalk_sglue+0x22>
 80066da:	6824      	ldr	r4, [r4, #0]
 80066dc:	2c00      	cmp	r4, #0
 80066de:	d1f7      	bne.n	80066d0 <_fwalk_sglue+0xc>
 80066e0:	4630      	mov	r0, r6
 80066e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e6:	89ab      	ldrh	r3, [r5, #12]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d907      	bls.n	80066fc <_fwalk_sglue+0x38>
 80066ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066f0:	3301      	adds	r3, #1
 80066f2:	d003      	beq.n	80066fc <_fwalk_sglue+0x38>
 80066f4:	4629      	mov	r1, r5
 80066f6:	4638      	mov	r0, r7
 80066f8:	47c0      	blx	r8
 80066fa:	4306      	orrs	r6, r0
 80066fc:	3568      	adds	r5, #104	@ 0x68
 80066fe:	e7e9      	b.n	80066d4 <_fwalk_sglue+0x10>

08006700 <iprintf>:
 8006700:	b40f      	push	{r0, r1, r2, r3}
 8006702:	b507      	push	{r0, r1, r2, lr}
 8006704:	4906      	ldr	r1, [pc, #24]	@ (8006720 <iprintf+0x20>)
 8006706:	ab04      	add	r3, sp, #16
 8006708:	6808      	ldr	r0, [r1, #0]
 800670a:	f853 2b04 	ldr.w	r2, [r3], #4
 800670e:	6881      	ldr	r1, [r0, #8]
 8006710:	9301      	str	r3, [sp, #4]
 8006712:	f000 fec3 	bl	800749c <_vfiprintf_r>
 8006716:	b003      	add	sp, #12
 8006718:	f85d eb04 	ldr.w	lr, [sp], #4
 800671c:	b004      	add	sp, #16
 800671e:	4770      	bx	lr
 8006720:	20040018 	.word	0x20040018

08006724 <memset>:
 8006724:	4402      	add	r2, r0
 8006726:	4603      	mov	r3, r0
 8006728:	4293      	cmp	r3, r2
 800672a:	d100      	bne.n	800672e <memset+0xa>
 800672c:	4770      	bx	lr
 800672e:	f803 1b01 	strb.w	r1, [r3], #1
 8006732:	e7f9      	b.n	8006728 <memset+0x4>

08006734 <__errno>:
 8006734:	4b01      	ldr	r3, [pc, #4]	@ (800673c <__errno+0x8>)
 8006736:	6818      	ldr	r0, [r3, #0]
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	20040018 	.word	0x20040018

08006740 <__libc_init_array>:
 8006740:	b570      	push	{r4, r5, r6, lr}
 8006742:	4d0d      	ldr	r5, [pc, #52]	@ (8006778 <__libc_init_array+0x38>)
 8006744:	4c0d      	ldr	r4, [pc, #52]	@ (800677c <__libc_init_array+0x3c>)
 8006746:	1b64      	subs	r4, r4, r5
 8006748:	10a4      	asrs	r4, r4, #2
 800674a:	2600      	movs	r6, #0
 800674c:	42a6      	cmp	r6, r4
 800674e:	d109      	bne.n	8006764 <__libc_init_array+0x24>
 8006750:	4d0b      	ldr	r5, [pc, #44]	@ (8006780 <__libc_init_array+0x40>)
 8006752:	4c0c      	ldr	r4, [pc, #48]	@ (8006784 <__libc_init_array+0x44>)
 8006754:	f001 ff4e 	bl	80085f4 <_init>
 8006758:	1b64      	subs	r4, r4, r5
 800675a:	10a4      	asrs	r4, r4, #2
 800675c:	2600      	movs	r6, #0
 800675e:	42a6      	cmp	r6, r4
 8006760:	d105      	bne.n	800676e <__libc_init_array+0x2e>
 8006762:	bd70      	pop	{r4, r5, r6, pc}
 8006764:	f855 3b04 	ldr.w	r3, [r5], #4
 8006768:	4798      	blx	r3
 800676a:	3601      	adds	r6, #1
 800676c:	e7ee      	b.n	800674c <__libc_init_array+0xc>
 800676e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006772:	4798      	blx	r3
 8006774:	3601      	adds	r6, #1
 8006776:	e7f2      	b.n	800675e <__libc_init_array+0x1e>
 8006778:	08008a14 	.word	0x08008a14
 800677c:	08008a14 	.word	0x08008a14
 8006780:	08008a14 	.word	0x08008a14
 8006784:	08008a18 	.word	0x08008a18

08006788 <__retarget_lock_init_recursive>:
 8006788:	4770      	bx	lr

0800678a <__retarget_lock_acquire_recursive>:
 800678a:	4770      	bx	lr

0800678c <__retarget_lock_release_recursive>:
 800678c:	4770      	bx	lr
	...

08006790 <_localeconv_r>:
 8006790:	4800      	ldr	r0, [pc, #0]	@ (8006794 <_localeconv_r+0x4>)
 8006792:	4770      	bx	lr
 8006794:	20040158 	.word	0x20040158

08006798 <quorem>:
 8006798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679c:	6903      	ldr	r3, [r0, #16]
 800679e:	690c      	ldr	r4, [r1, #16]
 80067a0:	42a3      	cmp	r3, r4
 80067a2:	4607      	mov	r7, r0
 80067a4:	db7e      	blt.n	80068a4 <quorem+0x10c>
 80067a6:	3c01      	subs	r4, #1
 80067a8:	f101 0814 	add.w	r8, r1, #20
 80067ac:	00a3      	lsls	r3, r4, #2
 80067ae:	f100 0514 	add.w	r5, r0, #20
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067b8:	9301      	str	r3, [sp, #4]
 80067ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80067be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067c2:	3301      	adds	r3, #1
 80067c4:	429a      	cmp	r2, r3
 80067c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80067ce:	d32e      	bcc.n	800682e <quorem+0x96>
 80067d0:	f04f 0a00 	mov.w	sl, #0
 80067d4:	46c4      	mov	ip, r8
 80067d6:	46ae      	mov	lr, r5
 80067d8:	46d3      	mov	fp, sl
 80067da:	f85c 3b04 	ldr.w	r3, [ip], #4
 80067de:	b298      	uxth	r0, r3
 80067e0:	fb06 a000 	mla	r0, r6, r0, sl
 80067e4:	0c02      	lsrs	r2, r0, #16
 80067e6:	0c1b      	lsrs	r3, r3, #16
 80067e8:	fb06 2303 	mla	r3, r6, r3, r2
 80067ec:	f8de 2000 	ldr.w	r2, [lr]
 80067f0:	b280      	uxth	r0, r0
 80067f2:	b292      	uxth	r2, r2
 80067f4:	1a12      	subs	r2, r2, r0
 80067f6:	445a      	add	r2, fp
 80067f8:	f8de 0000 	ldr.w	r0, [lr]
 80067fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006800:	b29b      	uxth	r3, r3
 8006802:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006806:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800680a:	b292      	uxth	r2, r2
 800680c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006810:	45e1      	cmp	r9, ip
 8006812:	f84e 2b04 	str.w	r2, [lr], #4
 8006816:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800681a:	d2de      	bcs.n	80067da <quorem+0x42>
 800681c:	9b00      	ldr	r3, [sp, #0]
 800681e:	58eb      	ldr	r3, [r5, r3]
 8006820:	b92b      	cbnz	r3, 800682e <quorem+0x96>
 8006822:	9b01      	ldr	r3, [sp, #4]
 8006824:	3b04      	subs	r3, #4
 8006826:	429d      	cmp	r5, r3
 8006828:	461a      	mov	r2, r3
 800682a:	d32f      	bcc.n	800688c <quorem+0xf4>
 800682c:	613c      	str	r4, [r7, #16]
 800682e:	4638      	mov	r0, r7
 8006830:	f001 fb20 	bl	8007e74 <__mcmp>
 8006834:	2800      	cmp	r0, #0
 8006836:	db25      	blt.n	8006884 <quorem+0xec>
 8006838:	4629      	mov	r1, r5
 800683a:	2000      	movs	r0, #0
 800683c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006840:	f8d1 c000 	ldr.w	ip, [r1]
 8006844:	fa1f fe82 	uxth.w	lr, r2
 8006848:	fa1f f38c 	uxth.w	r3, ip
 800684c:	eba3 030e 	sub.w	r3, r3, lr
 8006850:	4403      	add	r3, r0
 8006852:	0c12      	lsrs	r2, r2, #16
 8006854:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006858:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800685c:	b29b      	uxth	r3, r3
 800685e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006862:	45c1      	cmp	r9, r8
 8006864:	f841 3b04 	str.w	r3, [r1], #4
 8006868:	ea4f 4022 	mov.w	r0, r2, asr #16
 800686c:	d2e6      	bcs.n	800683c <quorem+0xa4>
 800686e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006872:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006876:	b922      	cbnz	r2, 8006882 <quorem+0xea>
 8006878:	3b04      	subs	r3, #4
 800687a:	429d      	cmp	r5, r3
 800687c:	461a      	mov	r2, r3
 800687e:	d30b      	bcc.n	8006898 <quorem+0x100>
 8006880:	613c      	str	r4, [r7, #16]
 8006882:	3601      	adds	r6, #1
 8006884:	4630      	mov	r0, r6
 8006886:	b003      	add	sp, #12
 8006888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688c:	6812      	ldr	r2, [r2, #0]
 800688e:	3b04      	subs	r3, #4
 8006890:	2a00      	cmp	r2, #0
 8006892:	d1cb      	bne.n	800682c <quorem+0x94>
 8006894:	3c01      	subs	r4, #1
 8006896:	e7c6      	b.n	8006826 <quorem+0x8e>
 8006898:	6812      	ldr	r2, [r2, #0]
 800689a:	3b04      	subs	r3, #4
 800689c:	2a00      	cmp	r2, #0
 800689e:	d1ef      	bne.n	8006880 <quorem+0xe8>
 80068a0:	3c01      	subs	r4, #1
 80068a2:	e7ea      	b.n	800687a <quorem+0xe2>
 80068a4:	2000      	movs	r0, #0
 80068a6:	e7ee      	b.n	8006886 <quorem+0xee>

080068a8 <_dtoa_r>:
 80068a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ac:	69c7      	ldr	r7, [r0, #28]
 80068ae:	b097      	sub	sp, #92	@ 0x5c
 80068b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80068b4:	ec55 4b10 	vmov	r4, r5, d0
 80068b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80068ba:	9107      	str	r1, [sp, #28]
 80068bc:	4681      	mov	r9, r0
 80068be:	920c      	str	r2, [sp, #48]	@ 0x30
 80068c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80068c2:	b97f      	cbnz	r7, 80068e4 <_dtoa_r+0x3c>
 80068c4:	2010      	movs	r0, #16
 80068c6:	f000 ff01 	bl	80076cc <malloc>
 80068ca:	4602      	mov	r2, r0
 80068cc:	f8c9 001c 	str.w	r0, [r9, #28]
 80068d0:	b920      	cbnz	r0, 80068dc <_dtoa_r+0x34>
 80068d2:	4ba9      	ldr	r3, [pc, #676]	@ (8006b78 <_dtoa_r+0x2d0>)
 80068d4:	21ef      	movs	r1, #239	@ 0xef
 80068d6:	48a9      	ldr	r0, [pc, #676]	@ (8006b7c <_dtoa_r+0x2d4>)
 80068d8:	f001 fd94 	bl	8008404 <__assert_func>
 80068dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80068e0:	6007      	str	r7, [r0, #0]
 80068e2:	60c7      	str	r7, [r0, #12]
 80068e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80068e8:	6819      	ldr	r1, [r3, #0]
 80068ea:	b159      	cbz	r1, 8006904 <_dtoa_r+0x5c>
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	604a      	str	r2, [r1, #4]
 80068f0:	2301      	movs	r3, #1
 80068f2:	4093      	lsls	r3, r2
 80068f4:	608b      	str	r3, [r1, #8]
 80068f6:	4648      	mov	r0, r9
 80068f8:	f001 f88a 	bl	8007a10 <_Bfree>
 80068fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006900:	2200      	movs	r2, #0
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	1e2b      	subs	r3, r5, #0
 8006906:	bfb9      	ittee	lt
 8006908:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800690c:	9305      	strlt	r3, [sp, #20]
 800690e:	2300      	movge	r3, #0
 8006910:	6033      	strge	r3, [r6, #0]
 8006912:	9f05      	ldr	r7, [sp, #20]
 8006914:	4b9a      	ldr	r3, [pc, #616]	@ (8006b80 <_dtoa_r+0x2d8>)
 8006916:	bfbc      	itt	lt
 8006918:	2201      	movlt	r2, #1
 800691a:	6032      	strlt	r2, [r6, #0]
 800691c:	43bb      	bics	r3, r7
 800691e:	d112      	bne.n	8006946 <_dtoa_r+0x9e>
 8006920:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006922:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800692c:	4323      	orrs	r3, r4
 800692e:	f000 855a 	beq.w	80073e6 <_dtoa_r+0xb3e>
 8006932:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006934:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006b94 <_dtoa_r+0x2ec>
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 855c 	beq.w	80073f6 <_dtoa_r+0xb4e>
 800693e:	f10a 0303 	add.w	r3, sl, #3
 8006942:	f000 bd56 	b.w	80073f2 <_dtoa_r+0xb4a>
 8006946:	ed9d 7b04 	vldr	d7, [sp, #16]
 800694a:	2200      	movs	r2, #0
 800694c:	ec51 0b17 	vmov	r0, r1, d7
 8006950:	2300      	movs	r3, #0
 8006952:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006956:	f7fa f8cf 	bl	8000af8 <__aeabi_dcmpeq>
 800695a:	4680      	mov	r8, r0
 800695c:	b158      	cbz	r0, 8006976 <_dtoa_r+0xce>
 800695e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006960:	2301      	movs	r3, #1
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006966:	b113      	cbz	r3, 800696e <_dtoa_r+0xc6>
 8006968:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800696a:	4b86      	ldr	r3, [pc, #536]	@ (8006b84 <_dtoa_r+0x2dc>)
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006b98 <_dtoa_r+0x2f0>
 8006972:	f000 bd40 	b.w	80073f6 <_dtoa_r+0xb4e>
 8006976:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800697a:	aa14      	add	r2, sp, #80	@ 0x50
 800697c:	a915      	add	r1, sp, #84	@ 0x54
 800697e:	4648      	mov	r0, r9
 8006980:	f001 fb28 	bl	8007fd4 <__d2b>
 8006984:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006988:	9002      	str	r0, [sp, #8]
 800698a:	2e00      	cmp	r6, #0
 800698c:	d078      	beq.n	8006a80 <_dtoa_r+0x1d8>
 800698e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006990:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006998:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800699c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80069a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80069a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80069a8:	4619      	mov	r1, r3
 80069aa:	2200      	movs	r2, #0
 80069ac:	4b76      	ldr	r3, [pc, #472]	@ (8006b88 <_dtoa_r+0x2e0>)
 80069ae:	f7f9 fc83 	bl	80002b8 <__aeabi_dsub>
 80069b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8006b60 <_dtoa_r+0x2b8>)
 80069b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b8:	f7f9 fe36 	bl	8000628 <__aeabi_dmul>
 80069bc:	a36a      	add	r3, pc, #424	@ (adr r3, 8006b68 <_dtoa_r+0x2c0>)
 80069be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c2:	f7f9 fc7b 	bl	80002bc <__adddf3>
 80069c6:	4604      	mov	r4, r0
 80069c8:	4630      	mov	r0, r6
 80069ca:	460d      	mov	r5, r1
 80069cc:	f7f9 fdc2 	bl	8000554 <__aeabi_i2d>
 80069d0:	a367      	add	r3, pc, #412	@ (adr r3, 8006b70 <_dtoa_r+0x2c8>)
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	f7f9 fe27 	bl	8000628 <__aeabi_dmul>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	4620      	mov	r0, r4
 80069e0:	4629      	mov	r1, r5
 80069e2:	f7f9 fc6b 	bl	80002bc <__adddf3>
 80069e6:	4604      	mov	r4, r0
 80069e8:	460d      	mov	r5, r1
 80069ea:	f7fa f8cd 	bl	8000b88 <__aeabi_d2iz>
 80069ee:	2200      	movs	r2, #0
 80069f0:	4607      	mov	r7, r0
 80069f2:	2300      	movs	r3, #0
 80069f4:	4620      	mov	r0, r4
 80069f6:	4629      	mov	r1, r5
 80069f8:	f7fa f888 	bl	8000b0c <__aeabi_dcmplt>
 80069fc:	b140      	cbz	r0, 8006a10 <_dtoa_r+0x168>
 80069fe:	4638      	mov	r0, r7
 8006a00:	f7f9 fda8 	bl	8000554 <__aeabi_i2d>
 8006a04:	4622      	mov	r2, r4
 8006a06:	462b      	mov	r3, r5
 8006a08:	f7fa f876 	bl	8000af8 <__aeabi_dcmpeq>
 8006a0c:	b900      	cbnz	r0, 8006a10 <_dtoa_r+0x168>
 8006a0e:	3f01      	subs	r7, #1
 8006a10:	2f16      	cmp	r7, #22
 8006a12:	d852      	bhi.n	8006aba <_dtoa_r+0x212>
 8006a14:	4b5d      	ldr	r3, [pc, #372]	@ (8006b8c <_dtoa_r+0x2e4>)
 8006a16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a22:	f7fa f873 	bl	8000b0c <__aeabi_dcmplt>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d049      	beq.n	8006abe <_dtoa_r+0x216>
 8006a2a:	3f01      	subs	r7, #1
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a32:	1b9b      	subs	r3, r3, r6
 8006a34:	1e5a      	subs	r2, r3, #1
 8006a36:	bf45      	ittet	mi
 8006a38:	f1c3 0301 	rsbmi	r3, r3, #1
 8006a3c:	9300      	strmi	r3, [sp, #0]
 8006a3e:	2300      	movpl	r3, #0
 8006a40:	2300      	movmi	r3, #0
 8006a42:	9206      	str	r2, [sp, #24]
 8006a44:	bf54      	ite	pl
 8006a46:	9300      	strpl	r3, [sp, #0]
 8006a48:	9306      	strmi	r3, [sp, #24]
 8006a4a:	2f00      	cmp	r7, #0
 8006a4c:	db39      	blt.n	8006ac2 <_dtoa_r+0x21a>
 8006a4e:	9b06      	ldr	r3, [sp, #24]
 8006a50:	970d      	str	r7, [sp, #52]	@ 0x34
 8006a52:	443b      	add	r3, r7
 8006a54:	9306      	str	r3, [sp, #24]
 8006a56:	2300      	movs	r3, #0
 8006a58:	9308      	str	r3, [sp, #32]
 8006a5a:	9b07      	ldr	r3, [sp, #28]
 8006a5c:	2b09      	cmp	r3, #9
 8006a5e:	d863      	bhi.n	8006b28 <_dtoa_r+0x280>
 8006a60:	2b05      	cmp	r3, #5
 8006a62:	bfc4      	itt	gt
 8006a64:	3b04      	subgt	r3, #4
 8006a66:	9307      	strgt	r3, [sp, #28]
 8006a68:	9b07      	ldr	r3, [sp, #28]
 8006a6a:	f1a3 0302 	sub.w	r3, r3, #2
 8006a6e:	bfcc      	ite	gt
 8006a70:	2400      	movgt	r4, #0
 8006a72:	2401      	movle	r4, #1
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d863      	bhi.n	8006b40 <_dtoa_r+0x298>
 8006a78:	e8df f003 	tbb	[pc, r3]
 8006a7c:	2b375452 	.word	0x2b375452
 8006a80:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006a84:	441e      	add	r6, r3
 8006a86:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	bfc1      	itttt	gt
 8006a8e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006a92:	409f      	lslgt	r7, r3
 8006a94:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006a98:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006a9c:	bfd6      	itet	le
 8006a9e:	f1c3 0320 	rsble	r3, r3, #32
 8006aa2:	ea47 0003 	orrgt.w	r0, r7, r3
 8006aa6:	fa04 f003 	lslle.w	r0, r4, r3
 8006aaa:	f7f9 fd43 	bl	8000534 <__aeabi_ui2d>
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ab4:	3e01      	subs	r6, #1
 8006ab6:	9212      	str	r2, [sp, #72]	@ 0x48
 8006ab8:	e776      	b.n	80069a8 <_dtoa_r+0x100>
 8006aba:	2301      	movs	r3, #1
 8006abc:	e7b7      	b.n	8006a2e <_dtoa_r+0x186>
 8006abe:	9010      	str	r0, [sp, #64]	@ 0x40
 8006ac0:	e7b6      	b.n	8006a30 <_dtoa_r+0x188>
 8006ac2:	9b00      	ldr	r3, [sp, #0]
 8006ac4:	1bdb      	subs	r3, r3, r7
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	427b      	negs	r3, r7
 8006aca:	9308      	str	r3, [sp, #32]
 8006acc:	2300      	movs	r3, #0
 8006ace:	930d      	str	r3, [sp, #52]	@ 0x34
 8006ad0:	e7c3      	b.n	8006a5a <_dtoa_r+0x1b2>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ad6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ad8:	eb07 0b03 	add.w	fp, r7, r3
 8006adc:	f10b 0301 	add.w	r3, fp, #1
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	9303      	str	r3, [sp, #12]
 8006ae4:	bfb8      	it	lt
 8006ae6:	2301      	movlt	r3, #1
 8006ae8:	e006      	b.n	8006af8 <_dtoa_r+0x250>
 8006aea:	2301      	movs	r3, #1
 8006aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006aee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	dd28      	ble.n	8006b46 <_dtoa_r+0x29e>
 8006af4:	469b      	mov	fp, r3
 8006af6:	9303      	str	r3, [sp, #12]
 8006af8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006afc:	2100      	movs	r1, #0
 8006afe:	2204      	movs	r2, #4
 8006b00:	f102 0514 	add.w	r5, r2, #20
 8006b04:	429d      	cmp	r5, r3
 8006b06:	d926      	bls.n	8006b56 <_dtoa_r+0x2ae>
 8006b08:	6041      	str	r1, [r0, #4]
 8006b0a:	4648      	mov	r0, r9
 8006b0c:	f000 ff40 	bl	8007990 <_Balloc>
 8006b10:	4682      	mov	sl, r0
 8006b12:	2800      	cmp	r0, #0
 8006b14:	d142      	bne.n	8006b9c <_dtoa_r+0x2f4>
 8006b16:	4b1e      	ldr	r3, [pc, #120]	@ (8006b90 <_dtoa_r+0x2e8>)
 8006b18:	4602      	mov	r2, r0
 8006b1a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006b1e:	e6da      	b.n	80068d6 <_dtoa_r+0x2e>
 8006b20:	2300      	movs	r3, #0
 8006b22:	e7e3      	b.n	8006aec <_dtoa_r+0x244>
 8006b24:	2300      	movs	r3, #0
 8006b26:	e7d5      	b.n	8006ad4 <_dtoa_r+0x22c>
 8006b28:	2401      	movs	r4, #1
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	9307      	str	r3, [sp, #28]
 8006b2e:	9409      	str	r4, [sp, #36]	@ 0x24
 8006b30:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006b34:	2200      	movs	r2, #0
 8006b36:	f8cd b00c 	str.w	fp, [sp, #12]
 8006b3a:	2312      	movs	r3, #18
 8006b3c:	920c      	str	r2, [sp, #48]	@ 0x30
 8006b3e:	e7db      	b.n	8006af8 <_dtoa_r+0x250>
 8006b40:	2301      	movs	r3, #1
 8006b42:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b44:	e7f4      	b.n	8006b30 <_dtoa_r+0x288>
 8006b46:	f04f 0b01 	mov.w	fp, #1
 8006b4a:	f8cd b00c 	str.w	fp, [sp, #12]
 8006b4e:	465b      	mov	r3, fp
 8006b50:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006b54:	e7d0      	b.n	8006af8 <_dtoa_r+0x250>
 8006b56:	3101      	adds	r1, #1
 8006b58:	0052      	lsls	r2, r2, #1
 8006b5a:	e7d1      	b.n	8006b00 <_dtoa_r+0x258>
 8006b5c:	f3af 8000 	nop.w
 8006b60:	636f4361 	.word	0x636f4361
 8006b64:	3fd287a7 	.word	0x3fd287a7
 8006b68:	8b60c8b3 	.word	0x8b60c8b3
 8006b6c:	3fc68a28 	.word	0x3fc68a28
 8006b70:	509f79fb 	.word	0x509f79fb
 8006b74:	3fd34413 	.word	0x3fd34413
 8006b78:	080086d5 	.word	0x080086d5
 8006b7c:	080086ec 	.word	0x080086ec
 8006b80:	7ff00000 	.word	0x7ff00000
 8006b84:	080086a5 	.word	0x080086a5
 8006b88:	3ff80000 	.word	0x3ff80000
 8006b8c:	08008840 	.word	0x08008840
 8006b90:	08008744 	.word	0x08008744
 8006b94:	080086d1 	.word	0x080086d1
 8006b98:	080086a4 	.word	0x080086a4
 8006b9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ba0:	6018      	str	r0, [r3, #0]
 8006ba2:	9b03      	ldr	r3, [sp, #12]
 8006ba4:	2b0e      	cmp	r3, #14
 8006ba6:	f200 80a1 	bhi.w	8006cec <_dtoa_r+0x444>
 8006baa:	2c00      	cmp	r4, #0
 8006bac:	f000 809e 	beq.w	8006cec <_dtoa_r+0x444>
 8006bb0:	2f00      	cmp	r7, #0
 8006bb2:	dd33      	ble.n	8006c1c <_dtoa_r+0x374>
 8006bb4:	4b9c      	ldr	r3, [pc, #624]	@ (8006e28 <_dtoa_r+0x580>)
 8006bb6:	f007 020f 	and.w	r2, r7, #15
 8006bba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bbe:	ed93 7b00 	vldr	d7, [r3]
 8006bc2:	05f8      	lsls	r0, r7, #23
 8006bc4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006bc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006bcc:	d516      	bpl.n	8006bfc <_dtoa_r+0x354>
 8006bce:	4b97      	ldr	r3, [pc, #604]	@ (8006e2c <_dtoa_r+0x584>)
 8006bd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006bd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bd8:	f7f9 fe50 	bl	800087c <__aeabi_ddiv>
 8006bdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006be0:	f004 040f 	and.w	r4, r4, #15
 8006be4:	2603      	movs	r6, #3
 8006be6:	4d91      	ldr	r5, [pc, #580]	@ (8006e2c <_dtoa_r+0x584>)
 8006be8:	b954      	cbnz	r4, 8006c00 <_dtoa_r+0x358>
 8006bea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006bee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bf2:	f7f9 fe43 	bl	800087c <__aeabi_ddiv>
 8006bf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bfa:	e028      	b.n	8006c4e <_dtoa_r+0x3a6>
 8006bfc:	2602      	movs	r6, #2
 8006bfe:	e7f2      	b.n	8006be6 <_dtoa_r+0x33e>
 8006c00:	07e1      	lsls	r1, r4, #31
 8006c02:	d508      	bpl.n	8006c16 <_dtoa_r+0x36e>
 8006c04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006c08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c0c:	f7f9 fd0c 	bl	8000628 <__aeabi_dmul>
 8006c10:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006c14:	3601      	adds	r6, #1
 8006c16:	1064      	asrs	r4, r4, #1
 8006c18:	3508      	adds	r5, #8
 8006c1a:	e7e5      	b.n	8006be8 <_dtoa_r+0x340>
 8006c1c:	f000 80af 	beq.w	8006d7e <_dtoa_r+0x4d6>
 8006c20:	427c      	negs	r4, r7
 8006c22:	4b81      	ldr	r3, [pc, #516]	@ (8006e28 <_dtoa_r+0x580>)
 8006c24:	4d81      	ldr	r5, [pc, #516]	@ (8006e2c <_dtoa_r+0x584>)
 8006c26:	f004 020f 	and.w	r2, r4, #15
 8006c2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c36:	f7f9 fcf7 	bl	8000628 <__aeabi_dmul>
 8006c3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c3e:	1124      	asrs	r4, r4, #4
 8006c40:	2300      	movs	r3, #0
 8006c42:	2602      	movs	r6, #2
 8006c44:	2c00      	cmp	r4, #0
 8006c46:	f040 808f 	bne.w	8006d68 <_dtoa_r+0x4c0>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1d3      	bne.n	8006bf6 <_dtoa_r+0x34e>
 8006c4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006c50:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 8094 	beq.w	8006d82 <_dtoa_r+0x4da>
 8006c5a:	4b75      	ldr	r3, [pc, #468]	@ (8006e30 <_dtoa_r+0x588>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	4620      	mov	r0, r4
 8006c60:	4629      	mov	r1, r5
 8006c62:	f7f9 ff53 	bl	8000b0c <__aeabi_dcmplt>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	f000 808b 	beq.w	8006d82 <_dtoa_r+0x4da>
 8006c6c:	9b03      	ldr	r3, [sp, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 8087 	beq.w	8006d82 <_dtoa_r+0x4da>
 8006c74:	f1bb 0f00 	cmp.w	fp, #0
 8006c78:	dd34      	ble.n	8006ce4 <_dtoa_r+0x43c>
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	4b6d      	ldr	r3, [pc, #436]	@ (8006e34 <_dtoa_r+0x58c>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	4629      	mov	r1, r5
 8006c82:	f7f9 fcd1 	bl	8000628 <__aeabi_dmul>
 8006c86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c8a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006c8e:	3601      	adds	r6, #1
 8006c90:	465c      	mov	r4, fp
 8006c92:	4630      	mov	r0, r6
 8006c94:	f7f9 fc5e 	bl	8000554 <__aeabi_i2d>
 8006c98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c9c:	f7f9 fcc4 	bl	8000628 <__aeabi_dmul>
 8006ca0:	4b65      	ldr	r3, [pc, #404]	@ (8006e38 <_dtoa_r+0x590>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f7f9 fb0a 	bl	80002bc <__adddf3>
 8006ca8:	4605      	mov	r5, r0
 8006caa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006cae:	2c00      	cmp	r4, #0
 8006cb0:	d16a      	bne.n	8006d88 <_dtoa_r+0x4e0>
 8006cb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cb6:	4b61      	ldr	r3, [pc, #388]	@ (8006e3c <_dtoa_r+0x594>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f7f9 fafd 	bl	80002b8 <__aeabi_dsub>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006cc6:	462a      	mov	r2, r5
 8006cc8:	4633      	mov	r3, r6
 8006cca:	f7f9 ff3d 	bl	8000b48 <__aeabi_dcmpgt>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f040 8298 	bne.w	8007204 <_dtoa_r+0x95c>
 8006cd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cd8:	462a      	mov	r2, r5
 8006cda:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006cde:	f7f9 ff15 	bl	8000b0c <__aeabi_dcmplt>
 8006ce2:	bb38      	cbnz	r0, 8006d34 <_dtoa_r+0x48c>
 8006ce4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006ce8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006cec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f2c0 8157 	blt.w	8006fa2 <_dtoa_r+0x6fa>
 8006cf4:	2f0e      	cmp	r7, #14
 8006cf6:	f300 8154 	bgt.w	8006fa2 <_dtoa_r+0x6fa>
 8006cfa:	4b4b      	ldr	r3, [pc, #300]	@ (8006e28 <_dtoa_r+0x580>)
 8006cfc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d00:	ed93 7b00 	vldr	d7, [r3]
 8006d04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	ed8d 7b00 	vstr	d7, [sp]
 8006d0c:	f280 80e5 	bge.w	8006eda <_dtoa_r+0x632>
 8006d10:	9b03      	ldr	r3, [sp, #12]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f300 80e1 	bgt.w	8006eda <_dtoa_r+0x632>
 8006d18:	d10c      	bne.n	8006d34 <_dtoa_r+0x48c>
 8006d1a:	4b48      	ldr	r3, [pc, #288]	@ (8006e3c <_dtoa_r+0x594>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	ec51 0b17 	vmov	r0, r1, d7
 8006d22:	f7f9 fc81 	bl	8000628 <__aeabi_dmul>
 8006d26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d2a:	f7f9 ff03 	bl	8000b34 <__aeabi_dcmpge>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	f000 8266 	beq.w	8007200 <_dtoa_r+0x958>
 8006d34:	2400      	movs	r4, #0
 8006d36:	4625      	mov	r5, r4
 8006d38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d3a:	4656      	mov	r6, sl
 8006d3c:	ea6f 0803 	mvn.w	r8, r3
 8006d40:	2700      	movs	r7, #0
 8006d42:	4621      	mov	r1, r4
 8006d44:	4648      	mov	r0, r9
 8006d46:	f000 fe63 	bl	8007a10 <_Bfree>
 8006d4a:	2d00      	cmp	r5, #0
 8006d4c:	f000 80bd 	beq.w	8006eca <_dtoa_r+0x622>
 8006d50:	b12f      	cbz	r7, 8006d5e <_dtoa_r+0x4b6>
 8006d52:	42af      	cmp	r7, r5
 8006d54:	d003      	beq.n	8006d5e <_dtoa_r+0x4b6>
 8006d56:	4639      	mov	r1, r7
 8006d58:	4648      	mov	r0, r9
 8006d5a:	f000 fe59 	bl	8007a10 <_Bfree>
 8006d5e:	4629      	mov	r1, r5
 8006d60:	4648      	mov	r0, r9
 8006d62:	f000 fe55 	bl	8007a10 <_Bfree>
 8006d66:	e0b0      	b.n	8006eca <_dtoa_r+0x622>
 8006d68:	07e2      	lsls	r2, r4, #31
 8006d6a:	d505      	bpl.n	8006d78 <_dtoa_r+0x4d0>
 8006d6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d70:	f7f9 fc5a 	bl	8000628 <__aeabi_dmul>
 8006d74:	3601      	adds	r6, #1
 8006d76:	2301      	movs	r3, #1
 8006d78:	1064      	asrs	r4, r4, #1
 8006d7a:	3508      	adds	r5, #8
 8006d7c:	e762      	b.n	8006c44 <_dtoa_r+0x39c>
 8006d7e:	2602      	movs	r6, #2
 8006d80:	e765      	b.n	8006c4e <_dtoa_r+0x3a6>
 8006d82:	9c03      	ldr	r4, [sp, #12]
 8006d84:	46b8      	mov	r8, r7
 8006d86:	e784      	b.n	8006c92 <_dtoa_r+0x3ea>
 8006d88:	4b27      	ldr	r3, [pc, #156]	@ (8006e28 <_dtoa_r+0x580>)
 8006d8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d94:	4454      	add	r4, sl
 8006d96:	2900      	cmp	r1, #0
 8006d98:	d054      	beq.n	8006e44 <_dtoa_r+0x59c>
 8006d9a:	4929      	ldr	r1, [pc, #164]	@ (8006e40 <_dtoa_r+0x598>)
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	f7f9 fd6d 	bl	800087c <__aeabi_ddiv>
 8006da2:	4633      	mov	r3, r6
 8006da4:	462a      	mov	r2, r5
 8006da6:	f7f9 fa87 	bl	80002b8 <__aeabi_dsub>
 8006daa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006dae:	4656      	mov	r6, sl
 8006db0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006db4:	f7f9 fee8 	bl	8000b88 <__aeabi_d2iz>
 8006db8:	4605      	mov	r5, r0
 8006dba:	f7f9 fbcb 	bl	8000554 <__aeabi_i2d>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dc6:	f7f9 fa77 	bl	80002b8 <__aeabi_dsub>
 8006dca:	3530      	adds	r5, #48	@ 0x30
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006dd4:	f806 5b01 	strb.w	r5, [r6], #1
 8006dd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006ddc:	f7f9 fe96 	bl	8000b0c <__aeabi_dcmplt>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d172      	bne.n	8006eca <_dtoa_r+0x622>
 8006de4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006de8:	4911      	ldr	r1, [pc, #68]	@ (8006e30 <_dtoa_r+0x588>)
 8006dea:	2000      	movs	r0, #0
 8006dec:	f7f9 fa64 	bl	80002b8 <__aeabi_dsub>
 8006df0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006df4:	f7f9 fe8a 	bl	8000b0c <__aeabi_dcmplt>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	f040 80b4 	bne.w	8006f66 <_dtoa_r+0x6be>
 8006dfe:	42a6      	cmp	r6, r4
 8006e00:	f43f af70 	beq.w	8006ce4 <_dtoa_r+0x43c>
 8006e04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006e08:	4b0a      	ldr	r3, [pc, #40]	@ (8006e34 <_dtoa_r+0x58c>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f7f9 fc0c 	bl	8000628 <__aeabi_dmul>
 8006e10:	4b08      	ldr	r3, [pc, #32]	@ (8006e34 <_dtoa_r+0x58c>)
 8006e12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006e16:	2200      	movs	r2, #0
 8006e18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e1c:	f7f9 fc04 	bl	8000628 <__aeabi_dmul>
 8006e20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e24:	e7c4      	b.n	8006db0 <_dtoa_r+0x508>
 8006e26:	bf00      	nop
 8006e28:	08008840 	.word	0x08008840
 8006e2c:	08008818 	.word	0x08008818
 8006e30:	3ff00000 	.word	0x3ff00000
 8006e34:	40240000 	.word	0x40240000
 8006e38:	401c0000 	.word	0x401c0000
 8006e3c:	40140000 	.word	0x40140000
 8006e40:	3fe00000 	.word	0x3fe00000
 8006e44:	4631      	mov	r1, r6
 8006e46:	4628      	mov	r0, r5
 8006e48:	f7f9 fbee 	bl	8000628 <__aeabi_dmul>
 8006e4c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006e50:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006e52:	4656      	mov	r6, sl
 8006e54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e58:	f7f9 fe96 	bl	8000b88 <__aeabi_d2iz>
 8006e5c:	4605      	mov	r5, r0
 8006e5e:	f7f9 fb79 	bl	8000554 <__aeabi_i2d>
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e6a:	f7f9 fa25 	bl	80002b8 <__aeabi_dsub>
 8006e6e:	3530      	adds	r5, #48	@ 0x30
 8006e70:	f806 5b01 	strb.w	r5, [r6], #1
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	42a6      	cmp	r6, r4
 8006e7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e7e:	f04f 0200 	mov.w	r2, #0
 8006e82:	d124      	bne.n	8006ece <_dtoa_r+0x626>
 8006e84:	4baf      	ldr	r3, [pc, #700]	@ (8007144 <_dtoa_r+0x89c>)
 8006e86:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006e8a:	f7f9 fa17 	bl	80002bc <__adddf3>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e96:	f7f9 fe57 	bl	8000b48 <__aeabi_dcmpgt>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d163      	bne.n	8006f66 <_dtoa_r+0x6be>
 8006e9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006ea2:	49a8      	ldr	r1, [pc, #672]	@ (8007144 <_dtoa_r+0x89c>)
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	f7f9 fa07 	bl	80002b8 <__aeabi_dsub>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006eb2:	f7f9 fe2b 	bl	8000b0c <__aeabi_dcmplt>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	f43f af14 	beq.w	8006ce4 <_dtoa_r+0x43c>
 8006ebc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006ebe:	1e73      	subs	r3, r6, #1
 8006ec0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ec2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ec6:	2b30      	cmp	r3, #48	@ 0x30
 8006ec8:	d0f8      	beq.n	8006ebc <_dtoa_r+0x614>
 8006eca:	4647      	mov	r7, r8
 8006ecc:	e03b      	b.n	8006f46 <_dtoa_r+0x69e>
 8006ece:	4b9e      	ldr	r3, [pc, #632]	@ (8007148 <_dtoa_r+0x8a0>)
 8006ed0:	f7f9 fbaa 	bl	8000628 <__aeabi_dmul>
 8006ed4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ed8:	e7bc      	b.n	8006e54 <_dtoa_r+0x5ac>
 8006eda:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006ede:	4656      	mov	r6, sl
 8006ee0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	f7f9 fcc8 	bl	800087c <__aeabi_ddiv>
 8006eec:	f7f9 fe4c 	bl	8000b88 <__aeabi_d2iz>
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	f7f9 fb2f 	bl	8000554 <__aeabi_i2d>
 8006ef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006efa:	f7f9 fb95 	bl	8000628 <__aeabi_dmul>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4620      	mov	r0, r4
 8006f04:	4629      	mov	r1, r5
 8006f06:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006f0a:	f7f9 f9d5 	bl	80002b8 <__aeabi_dsub>
 8006f0e:	f806 4b01 	strb.w	r4, [r6], #1
 8006f12:	9d03      	ldr	r5, [sp, #12]
 8006f14:	eba6 040a 	sub.w	r4, r6, sl
 8006f18:	42a5      	cmp	r5, r4
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	d133      	bne.n	8006f88 <_dtoa_r+0x6e0>
 8006f20:	f7f9 f9cc 	bl	80002bc <__adddf3>
 8006f24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f28:	4604      	mov	r4, r0
 8006f2a:	460d      	mov	r5, r1
 8006f2c:	f7f9 fe0c 	bl	8000b48 <__aeabi_dcmpgt>
 8006f30:	b9c0      	cbnz	r0, 8006f64 <_dtoa_r+0x6bc>
 8006f32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f36:	4620      	mov	r0, r4
 8006f38:	4629      	mov	r1, r5
 8006f3a:	f7f9 fddd 	bl	8000af8 <__aeabi_dcmpeq>
 8006f3e:	b110      	cbz	r0, 8006f46 <_dtoa_r+0x69e>
 8006f40:	f018 0f01 	tst.w	r8, #1
 8006f44:	d10e      	bne.n	8006f64 <_dtoa_r+0x6bc>
 8006f46:	9902      	ldr	r1, [sp, #8]
 8006f48:	4648      	mov	r0, r9
 8006f4a:	f000 fd61 	bl	8007a10 <_Bfree>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	7033      	strb	r3, [r6, #0]
 8006f52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006f54:	3701      	adds	r7, #1
 8006f56:	601f      	str	r7, [r3, #0]
 8006f58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 824b 	beq.w	80073f6 <_dtoa_r+0xb4e>
 8006f60:	601e      	str	r6, [r3, #0]
 8006f62:	e248      	b.n	80073f6 <_dtoa_r+0xb4e>
 8006f64:	46b8      	mov	r8, r7
 8006f66:	4633      	mov	r3, r6
 8006f68:	461e      	mov	r6, r3
 8006f6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f6e:	2a39      	cmp	r2, #57	@ 0x39
 8006f70:	d106      	bne.n	8006f80 <_dtoa_r+0x6d8>
 8006f72:	459a      	cmp	sl, r3
 8006f74:	d1f8      	bne.n	8006f68 <_dtoa_r+0x6c0>
 8006f76:	2230      	movs	r2, #48	@ 0x30
 8006f78:	f108 0801 	add.w	r8, r8, #1
 8006f7c:	f88a 2000 	strb.w	r2, [sl]
 8006f80:	781a      	ldrb	r2, [r3, #0]
 8006f82:	3201      	adds	r2, #1
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	e7a0      	b.n	8006eca <_dtoa_r+0x622>
 8006f88:	4b6f      	ldr	r3, [pc, #444]	@ (8007148 <_dtoa_r+0x8a0>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f7f9 fb4c 	bl	8000628 <__aeabi_dmul>
 8006f90:	2200      	movs	r2, #0
 8006f92:	2300      	movs	r3, #0
 8006f94:	4604      	mov	r4, r0
 8006f96:	460d      	mov	r5, r1
 8006f98:	f7f9 fdae 	bl	8000af8 <__aeabi_dcmpeq>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d09f      	beq.n	8006ee0 <_dtoa_r+0x638>
 8006fa0:	e7d1      	b.n	8006f46 <_dtoa_r+0x69e>
 8006fa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fa4:	2a00      	cmp	r2, #0
 8006fa6:	f000 80ea 	beq.w	800717e <_dtoa_r+0x8d6>
 8006faa:	9a07      	ldr	r2, [sp, #28]
 8006fac:	2a01      	cmp	r2, #1
 8006fae:	f300 80cd 	bgt.w	800714c <_dtoa_r+0x8a4>
 8006fb2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006fb4:	2a00      	cmp	r2, #0
 8006fb6:	f000 80c1 	beq.w	800713c <_dtoa_r+0x894>
 8006fba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006fbe:	9c08      	ldr	r4, [sp, #32]
 8006fc0:	9e00      	ldr	r6, [sp, #0]
 8006fc2:	9a00      	ldr	r2, [sp, #0]
 8006fc4:	441a      	add	r2, r3
 8006fc6:	9200      	str	r2, [sp, #0]
 8006fc8:	9a06      	ldr	r2, [sp, #24]
 8006fca:	2101      	movs	r1, #1
 8006fcc:	441a      	add	r2, r3
 8006fce:	4648      	mov	r0, r9
 8006fd0:	9206      	str	r2, [sp, #24]
 8006fd2:	f000 fdd1 	bl	8007b78 <__i2b>
 8006fd6:	4605      	mov	r5, r0
 8006fd8:	b166      	cbz	r6, 8006ff4 <_dtoa_r+0x74c>
 8006fda:	9b06      	ldr	r3, [sp, #24]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	dd09      	ble.n	8006ff4 <_dtoa_r+0x74c>
 8006fe0:	42b3      	cmp	r3, r6
 8006fe2:	9a00      	ldr	r2, [sp, #0]
 8006fe4:	bfa8      	it	ge
 8006fe6:	4633      	movge	r3, r6
 8006fe8:	1ad2      	subs	r2, r2, r3
 8006fea:	9200      	str	r2, [sp, #0]
 8006fec:	9a06      	ldr	r2, [sp, #24]
 8006fee:	1af6      	subs	r6, r6, r3
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	9306      	str	r3, [sp, #24]
 8006ff4:	9b08      	ldr	r3, [sp, #32]
 8006ff6:	b30b      	cbz	r3, 800703c <_dtoa_r+0x794>
 8006ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 80c6 	beq.w	800718c <_dtoa_r+0x8e4>
 8007000:	2c00      	cmp	r4, #0
 8007002:	f000 80c0 	beq.w	8007186 <_dtoa_r+0x8de>
 8007006:	4629      	mov	r1, r5
 8007008:	4622      	mov	r2, r4
 800700a:	4648      	mov	r0, r9
 800700c:	f000 fe6c 	bl	8007ce8 <__pow5mult>
 8007010:	9a02      	ldr	r2, [sp, #8]
 8007012:	4601      	mov	r1, r0
 8007014:	4605      	mov	r5, r0
 8007016:	4648      	mov	r0, r9
 8007018:	f000 fdc4 	bl	8007ba4 <__multiply>
 800701c:	9902      	ldr	r1, [sp, #8]
 800701e:	4680      	mov	r8, r0
 8007020:	4648      	mov	r0, r9
 8007022:	f000 fcf5 	bl	8007a10 <_Bfree>
 8007026:	9b08      	ldr	r3, [sp, #32]
 8007028:	1b1b      	subs	r3, r3, r4
 800702a:	9308      	str	r3, [sp, #32]
 800702c:	f000 80b1 	beq.w	8007192 <_dtoa_r+0x8ea>
 8007030:	9a08      	ldr	r2, [sp, #32]
 8007032:	4641      	mov	r1, r8
 8007034:	4648      	mov	r0, r9
 8007036:	f000 fe57 	bl	8007ce8 <__pow5mult>
 800703a:	9002      	str	r0, [sp, #8]
 800703c:	2101      	movs	r1, #1
 800703e:	4648      	mov	r0, r9
 8007040:	f000 fd9a 	bl	8007b78 <__i2b>
 8007044:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007046:	4604      	mov	r4, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 81d8 	beq.w	80073fe <_dtoa_r+0xb56>
 800704e:	461a      	mov	r2, r3
 8007050:	4601      	mov	r1, r0
 8007052:	4648      	mov	r0, r9
 8007054:	f000 fe48 	bl	8007ce8 <__pow5mult>
 8007058:	9b07      	ldr	r3, [sp, #28]
 800705a:	2b01      	cmp	r3, #1
 800705c:	4604      	mov	r4, r0
 800705e:	f300 809f 	bgt.w	80071a0 <_dtoa_r+0x8f8>
 8007062:	9b04      	ldr	r3, [sp, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	f040 8097 	bne.w	8007198 <_dtoa_r+0x8f0>
 800706a:	9b05      	ldr	r3, [sp, #20]
 800706c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007070:	2b00      	cmp	r3, #0
 8007072:	f040 8093 	bne.w	800719c <_dtoa_r+0x8f4>
 8007076:	9b05      	ldr	r3, [sp, #20]
 8007078:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800707c:	0d1b      	lsrs	r3, r3, #20
 800707e:	051b      	lsls	r3, r3, #20
 8007080:	b133      	cbz	r3, 8007090 <_dtoa_r+0x7e8>
 8007082:	9b00      	ldr	r3, [sp, #0]
 8007084:	3301      	adds	r3, #1
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	9b06      	ldr	r3, [sp, #24]
 800708a:	3301      	adds	r3, #1
 800708c:	9306      	str	r3, [sp, #24]
 800708e:	2301      	movs	r3, #1
 8007090:	9308      	str	r3, [sp, #32]
 8007092:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 81b8 	beq.w	800740a <_dtoa_r+0xb62>
 800709a:	6923      	ldr	r3, [r4, #16]
 800709c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070a0:	6918      	ldr	r0, [r3, #16]
 80070a2:	f000 fd1d 	bl	8007ae0 <__hi0bits>
 80070a6:	f1c0 0020 	rsb	r0, r0, #32
 80070aa:	9b06      	ldr	r3, [sp, #24]
 80070ac:	4418      	add	r0, r3
 80070ae:	f010 001f 	ands.w	r0, r0, #31
 80070b2:	f000 8082 	beq.w	80071ba <_dtoa_r+0x912>
 80070b6:	f1c0 0320 	rsb	r3, r0, #32
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	dd73      	ble.n	80071a6 <_dtoa_r+0x8fe>
 80070be:	9b00      	ldr	r3, [sp, #0]
 80070c0:	f1c0 001c 	rsb	r0, r0, #28
 80070c4:	4403      	add	r3, r0
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	9b06      	ldr	r3, [sp, #24]
 80070ca:	4403      	add	r3, r0
 80070cc:	4406      	add	r6, r0
 80070ce:	9306      	str	r3, [sp, #24]
 80070d0:	9b00      	ldr	r3, [sp, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	dd05      	ble.n	80070e2 <_dtoa_r+0x83a>
 80070d6:	9902      	ldr	r1, [sp, #8]
 80070d8:	461a      	mov	r2, r3
 80070da:	4648      	mov	r0, r9
 80070dc:	f000 fe5e 	bl	8007d9c <__lshift>
 80070e0:	9002      	str	r0, [sp, #8]
 80070e2:	9b06      	ldr	r3, [sp, #24]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	dd05      	ble.n	80070f4 <_dtoa_r+0x84c>
 80070e8:	4621      	mov	r1, r4
 80070ea:	461a      	mov	r2, r3
 80070ec:	4648      	mov	r0, r9
 80070ee:	f000 fe55 	bl	8007d9c <__lshift>
 80070f2:	4604      	mov	r4, r0
 80070f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d061      	beq.n	80071be <_dtoa_r+0x916>
 80070fa:	9802      	ldr	r0, [sp, #8]
 80070fc:	4621      	mov	r1, r4
 80070fe:	f000 feb9 	bl	8007e74 <__mcmp>
 8007102:	2800      	cmp	r0, #0
 8007104:	da5b      	bge.n	80071be <_dtoa_r+0x916>
 8007106:	2300      	movs	r3, #0
 8007108:	9902      	ldr	r1, [sp, #8]
 800710a:	220a      	movs	r2, #10
 800710c:	4648      	mov	r0, r9
 800710e:	f000 fca1 	bl	8007a54 <__multadd>
 8007112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007114:	9002      	str	r0, [sp, #8]
 8007116:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 8177 	beq.w	800740e <_dtoa_r+0xb66>
 8007120:	4629      	mov	r1, r5
 8007122:	2300      	movs	r3, #0
 8007124:	220a      	movs	r2, #10
 8007126:	4648      	mov	r0, r9
 8007128:	f000 fc94 	bl	8007a54 <__multadd>
 800712c:	f1bb 0f00 	cmp.w	fp, #0
 8007130:	4605      	mov	r5, r0
 8007132:	dc6f      	bgt.n	8007214 <_dtoa_r+0x96c>
 8007134:	9b07      	ldr	r3, [sp, #28]
 8007136:	2b02      	cmp	r3, #2
 8007138:	dc49      	bgt.n	80071ce <_dtoa_r+0x926>
 800713a:	e06b      	b.n	8007214 <_dtoa_r+0x96c>
 800713c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800713e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007142:	e73c      	b.n	8006fbe <_dtoa_r+0x716>
 8007144:	3fe00000 	.word	0x3fe00000
 8007148:	40240000 	.word	0x40240000
 800714c:	9b03      	ldr	r3, [sp, #12]
 800714e:	1e5c      	subs	r4, r3, #1
 8007150:	9b08      	ldr	r3, [sp, #32]
 8007152:	42a3      	cmp	r3, r4
 8007154:	db09      	blt.n	800716a <_dtoa_r+0x8c2>
 8007156:	1b1c      	subs	r4, r3, r4
 8007158:	9b03      	ldr	r3, [sp, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	f6bf af30 	bge.w	8006fc0 <_dtoa_r+0x718>
 8007160:	9b00      	ldr	r3, [sp, #0]
 8007162:	9a03      	ldr	r2, [sp, #12]
 8007164:	1a9e      	subs	r6, r3, r2
 8007166:	2300      	movs	r3, #0
 8007168:	e72b      	b.n	8006fc2 <_dtoa_r+0x71a>
 800716a:	9b08      	ldr	r3, [sp, #32]
 800716c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800716e:	9408      	str	r4, [sp, #32]
 8007170:	1ae3      	subs	r3, r4, r3
 8007172:	441a      	add	r2, r3
 8007174:	9e00      	ldr	r6, [sp, #0]
 8007176:	9b03      	ldr	r3, [sp, #12]
 8007178:	920d      	str	r2, [sp, #52]	@ 0x34
 800717a:	2400      	movs	r4, #0
 800717c:	e721      	b.n	8006fc2 <_dtoa_r+0x71a>
 800717e:	9c08      	ldr	r4, [sp, #32]
 8007180:	9e00      	ldr	r6, [sp, #0]
 8007182:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007184:	e728      	b.n	8006fd8 <_dtoa_r+0x730>
 8007186:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800718a:	e751      	b.n	8007030 <_dtoa_r+0x788>
 800718c:	9a08      	ldr	r2, [sp, #32]
 800718e:	9902      	ldr	r1, [sp, #8]
 8007190:	e750      	b.n	8007034 <_dtoa_r+0x78c>
 8007192:	f8cd 8008 	str.w	r8, [sp, #8]
 8007196:	e751      	b.n	800703c <_dtoa_r+0x794>
 8007198:	2300      	movs	r3, #0
 800719a:	e779      	b.n	8007090 <_dtoa_r+0x7e8>
 800719c:	9b04      	ldr	r3, [sp, #16]
 800719e:	e777      	b.n	8007090 <_dtoa_r+0x7e8>
 80071a0:	2300      	movs	r3, #0
 80071a2:	9308      	str	r3, [sp, #32]
 80071a4:	e779      	b.n	800709a <_dtoa_r+0x7f2>
 80071a6:	d093      	beq.n	80070d0 <_dtoa_r+0x828>
 80071a8:	9a00      	ldr	r2, [sp, #0]
 80071aa:	331c      	adds	r3, #28
 80071ac:	441a      	add	r2, r3
 80071ae:	9200      	str	r2, [sp, #0]
 80071b0:	9a06      	ldr	r2, [sp, #24]
 80071b2:	441a      	add	r2, r3
 80071b4:	441e      	add	r6, r3
 80071b6:	9206      	str	r2, [sp, #24]
 80071b8:	e78a      	b.n	80070d0 <_dtoa_r+0x828>
 80071ba:	4603      	mov	r3, r0
 80071bc:	e7f4      	b.n	80071a8 <_dtoa_r+0x900>
 80071be:	9b03      	ldr	r3, [sp, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	46b8      	mov	r8, r7
 80071c4:	dc20      	bgt.n	8007208 <_dtoa_r+0x960>
 80071c6:	469b      	mov	fp, r3
 80071c8:	9b07      	ldr	r3, [sp, #28]
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	dd1e      	ble.n	800720c <_dtoa_r+0x964>
 80071ce:	f1bb 0f00 	cmp.w	fp, #0
 80071d2:	f47f adb1 	bne.w	8006d38 <_dtoa_r+0x490>
 80071d6:	4621      	mov	r1, r4
 80071d8:	465b      	mov	r3, fp
 80071da:	2205      	movs	r2, #5
 80071dc:	4648      	mov	r0, r9
 80071de:	f000 fc39 	bl	8007a54 <__multadd>
 80071e2:	4601      	mov	r1, r0
 80071e4:	4604      	mov	r4, r0
 80071e6:	9802      	ldr	r0, [sp, #8]
 80071e8:	f000 fe44 	bl	8007e74 <__mcmp>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	f77f ada3 	ble.w	8006d38 <_dtoa_r+0x490>
 80071f2:	4656      	mov	r6, sl
 80071f4:	2331      	movs	r3, #49	@ 0x31
 80071f6:	f806 3b01 	strb.w	r3, [r6], #1
 80071fa:	f108 0801 	add.w	r8, r8, #1
 80071fe:	e59f      	b.n	8006d40 <_dtoa_r+0x498>
 8007200:	9c03      	ldr	r4, [sp, #12]
 8007202:	46b8      	mov	r8, r7
 8007204:	4625      	mov	r5, r4
 8007206:	e7f4      	b.n	80071f2 <_dtoa_r+0x94a>
 8007208:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800720c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 8101 	beq.w	8007416 <_dtoa_r+0xb6e>
 8007214:	2e00      	cmp	r6, #0
 8007216:	dd05      	ble.n	8007224 <_dtoa_r+0x97c>
 8007218:	4629      	mov	r1, r5
 800721a:	4632      	mov	r2, r6
 800721c:	4648      	mov	r0, r9
 800721e:	f000 fdbd 	bl	8007d9c <__lshift>
 8007222:	4605      	mov	r5, r0
 8007224:	9b08      	ldr	r3, [sp, #32]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d05c      	beq.n	80072e4 <_dtoa_r+0xa3c>
 800722a:	6869      	ldr	r1, [r5, #4]
 800722c:	4648      	mov	r0, r9
 800722e:	f000 fbaf 	bl	8007990 <_Balloc>
 8007232:	4606      	mov	r6, r0
 8007234:	b928      	cbnz	r0, 8007242 <_dtoa_r+0x99a>
 8007236:	4b82      	ldr	r3, [pc, #520]	@ (8007440 <_dtoa_r+0xb98>)
 8007238:	4602      	mov	r2, r0
 800723a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800723e:	f7ff bb4a 	b.w	80068d6 <_dtoa_r+0x2e>
 8007242:	692a      	ldr	r2, [r5, #16]
 8007244:	3202      	adds	r2, #2
 8007246:	0092      	lsls	r2, r2, #2
 8007248:	f105 010c 	add.w	r1, r5, #12
 800724c:	300c      	adds	r0, #12
 800724e:	f001 f8cb 	bl	80083e8 <memcpy>
 8007252:	2201      	movs	r2, #1
 8007254:	4631      	mov	r1, r6
 8007256:	4648      	mov	r0, r9
 8007258:	f000 fda0 	bl	8007d9c <__lshift>
 800725c:	f10a 0301 	add.w	r3, sl, #1
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	eb0a 030b 	add.w	r3, sl, fp
 8007266:	9308      	str	r3, [sp, #32]
 8007268:	9b04      	ldr	r3, [sp, #16]
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	462f      	mov	r7, r5
 8007270:	9306      	str	r3, [sp, #24]
 8007272:	4605      	mov	r5, r0
 8007274:	9b00      	ldr	r3, [sp, #0]
 8007276:	9802      	ldr	r0, [sp, #8]
 8007278:	4621      	mov	r1, r4
 800727a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800727e:	f7ff fa8b 	bl	8006798 <quorem>
 8007282:	4603      	mov	r3, r0
 8007284:	3330      	adds	r3, #48	@ 0x30
 8007286:	9003      	str	r0, [sp, #12]
 8007288:	4639      	mov	r1, r7
 800728a:	9802      	ldr	r0, [sp, #8]
 800728c:	9309      	str	r3, [sp, #36]	@ 0x24
 800728e:	f000 fdf1 	bl	8007e74 <__mcmp>
 8007292:	462a      	mov	r2, r5
 8007294:	9004      	str	r0, [sp, #16]
 8007296:	4621      	mov	r1, r4
 8007298:	4648      	mov	r0, r9
 800729a:	f000 fe07 	bl	8007eac <__mdiff>
 800729e:	68c2      	ldr	r2, [r0, #12]
 80072a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072a2:	4606      	mov	r6, r0
 80072a4:	bb02      	cbnz	r2, 80072e8 <_dtoa_r+0xa40>
 80072a6:	4601      	mov	r1, r0
 80072a8:	9802      	ldr	r0, [sp, #8]
 80072aa:	f000 fde3 	bl	8007e74 <__mcmp>
 80072ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072b0:	4602      	mov	r2, r0
 80072b2:	4631      	mov	r1, r6
 80072b4:	4648      	mov	r0, r9
 80072b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80072b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80072ba:	f000 fba9 	bl	8007a10 <_Bfree>
 80072be:	9b07      	ldr	r3, [sp, #28]
 80072c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80072c2:	9e00      	ldr	r6, [sp, #0]
 80072c4:	ea42 0103 	orr.w	r1, r2, r3
 80072c8:	9b06      	ldr	r3, [sp, #24]
 80072ca:	4319      	orrs	r1, r3
 80072cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ce:	d10d      	bne.n	80072ec <_dtoa_r+0xa44>
 80072d0:	2b39      	cmp	r3, #57	@ 0x39
 80072d2:	d027      	beq.n	8007324 <_dtoa_r+0xa7c>
 80072d4:	9a04      	ldr	r2, [sp, #16]
 80072d6:	2a00      	cmp	r2, #0
 80072d8:	dd01      	ble.n	80072de <_dtoa_r+0xa36>
 80072da:	9b03      	ldr	r3, [sp, #12]
 80072dc:	3331      	adds	r3, #49	@ 0x31
 80072de:	f88b 3000 	strb.w	r3, [fp]
 80072e2:	e52e      	b.n	8006d42 <_dtoa_r+0x49a>
 80072e4:	4628      	mov	r0, r5
 80072e6:	e7b9      	b.n	800725c <_dtoa_r+0x9b4>
 80072e8:	2201      	movs	r2, #1
 80072ea:	e7e2      	b.n	80072b2 <_dtoa_r+0xa0a>
 80072ec:	9904      	ldr	r1, [sp, #16]
 80072ee:	2900      	cmp	r1, #0
 80072f0:	db04      	blt.n	80072fc <_dtoa_r+0xa54>
 80072f2:	9807      	ldr	r0, [sp, #28]
 80072f4:	4301      	orrs	r1, r0
 80072f6:	9806      	ldr	r0, [sp, #24]
 80072f8:	4301      	orrs	r1, r0
 80072fa:	d120      	bne.n	800733e <_dtoa_r+0xa96>
 80072fc:	2a00      	cmp	r2, #0
 80072fe:	ddee      	ble.n	80072de <_dtoa_r+0xa36>
 8007300:	9902      	ldr	r1, [sp, #8]
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	2201      	movs	r2, #1
 8007306:	4648      	mov	r0, r9
 8007308:	f000 fd48 	bl	8007d9c <__lshift>
 800730c:	4621      	mov	r1, r4
 800730e:	9002      	str	r0, [sp, #8]
 8007310:	f000 fdb0 	bl	8007e74 <__mcmp>
 8007314:	2800      	cmp	r0, #0
 8007316:	9b00      	ldr	r3, [sp, #0]
 8007318:	dc02      	bgt.n	8007320 <_dtoa_r+0xa78>
 800731a:	d1e0      	bne.n	80072de <_dtoa_r+0xa36>
 800731c:	07da      	lsls	r2, r3, #31
 800731e:	d5de      	bpl.n	80072de <_dtoa_r+0xa36>
 8007320:	2b39      	cmp	r3, #57	@ 0x39
 8007322:	d1da      	bne.n	80072da <_dtoa_r+0xa32>
 8007324:	2339      	movs	r3, #57	@ 0x39
 8007326:	f88b 3000 	strb.w	r3, [fp]
 800732a:	4633      	mov	r3, r6
 800732c:	461e      	mov	r6, r3
 800732e:	3b01      	subs	r3, #1
 8007330:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007334:	2a39      	cmp	r2, #57	@ 0x39
 8007336:	d04e      	beq.n	80073d6 <_dtoa_r+0xb2e>
 8007338:	3201      	adds	r2, #1
 800733a:	701a      	strb	r2, [r3, #0]
 800733c:	e501      	b.n	8006d42 <_dtoa_r+0x49a>
 800733e:	2a00      	cmp	r2, #0
 8007340:	dd03      	ble.n	800734a <_dtoa_r+0xaa2>
 8007342:	2b39      	cmp	r3, #57	@ 0x39
 8007344:	d0ee      	beq.n	8007324 <_dtoa_r+0xa7c>
 8007346:	3301      	adds	r3, #1
 8007348:	e7c9      	b.n	80072de <_dtoa_r+0xa36>
 800734a:	9a00      	ldr	r2, [sp, #0]
 800734c:	9908      	ldr	r1, [sp, #32]
 800734e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007352:	428a      	cmp	r2, r1
 8007354:	d028      	beq.n	80073a8 <_dtoa_r+0xb00>
 8007356:	9902      	ldr	r1, [sp, #8]
 8007358:	2300      	movs	r3, #0
 800735a:	220a      	movs	r2, #10
 800735c:	4648      	mov	r0, r9
 800735e:	f000 fb79 	bl	8007a54 <__multadd>
 8007362:	42af      	cmp	r7, r5
 8007364:	9002      	str	r0, [sp, #8]
 8007366:	f04f 0300 	mov.w	r3, #0
 800736a:	f04f 020a 	mov.w	r2, #10
 800736e:	4639      	mov	r1, r7
 8007370:	4648      	mov	r0, r9
 8007372:	d107      	bne.n	8007384 <_dtoa_r+0xadc>
 8007374:	f000 fb6e 	bl	8007a54 <__multadd>
 8007378:	4607      	mov	r7, r0
 800737a:	4605      	mov	r5, r0
 800737c:	9b00      	ldr	r3, [sp, #0]
 800737e:	3301      	adds	r3, #1
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	e777      	b.n	8007274 <_dtoa_r+0x9cc>
 8007384:	f000 fb66 	bl	8007a54 <__multadd>
 8007388:	4629      	mov	r1, r5
 800738a:	4607      	mov	r7, r0
 800738c:	2300      	movs	r3, #0
 800738e:	220a      	movs	r2, #10
 8007390:	4648      	mov	r0, r9
 8007392:	f000 fb5f 	bl	8007a54 <__multadd>
 8007396:	4605      	mov	r5, r0
 8007398:	e7f0      	b.n	800737c <_dtoa_r+0xad4>
 800739a:	f1bb 0f00 	cmp.w	fp, #0
 800739e:	bfcc      	ite	gt
 80073a0:	465e      	movgt	r6, fp
 80073a2:	2601      	movle	r6, #1
 80073a4:	4456      	add	r6, sl
 80073a6:	2700      	movs	r7, #0
 80073a8:	9902      	ldr	r1, [sp, #8]
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	2201      	movs	r2, #1
 80073ae:	4648      	mov	r0, r9
 80073b0:	f000 fcf4 	bl	8007d9c <__lshift>
 80073b4:	4621      	mov	r1, r4
 80073b6:	9002      	str	r0, [sp, #8]
 80073b8:	f000 fd5c 	bl	8007e74 <__mcmp>
 80073bc:	2800      	cmp	r0, #0
 80073be:	dcb4      	bgt.n	800732a <_dtoa_r+0xa82>
 80073c0:	d102      	bne.n	80073c8 <_dtoa_r+0xb20>
 80073c2:	9b00      	ldr	r3, [sp, #0]
 80073c4:	07db      	lsls	r3, r3, #31
 80073c6:	d4b0      	bmi.n	800732a <_dtoa_r+0xa82>
 80073c8:	4633      	mov	r3, r6
 80073ca:	461e      	mov	r6, r3
 80073cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073d0:	2a30      	cmp	r2, #48	@ 0x30
 80073d2:	d0fa      	beq.n	80073ca <_dtoa_r+0xb22>
 80073d4:	e4b5      	b.n	8006d42 <_dtoa_r+0x49a>
 80073d6:	459a      	cmp	sl, r3
 80073d8:	d1a8      	bne.n	800732c <_dtoa_r+0xa84>
 80073da:	2331      	movs	r3, #49	@ 0x31
 80073dc:	f108 0801 	add.w	r8, r8, #1
 80073e0:	f88a 3000 	strb.w	r3, [sl]
 80073e4:	e4ad      	b.n	8006d42 <_dtoa_r+0x49a>
 80073e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80073e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007444 <_dtoa_r+0xb9c>
 80073ec:	b11b      	cbz	r3, 80073f6 <_dtoa_r+0xb4e>
 80073ee:	f10a 0308 	add.w	r3, sl, #8
 80073f2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80073f4:	6013      	str	r3, [r2, #0]
 80073f6:	4650      	mov	r0, sl
 80073f8:	b017      	add	sp, #92	@ 0x5c
 80073fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fe:	9b07      	ldr	r3, [sp, #28]
 8007400:	2b01      	cmp	r3, #1
 8007402:	f77f ae2e 	ble.w	8007062 <_dtoa_r+0x7ba>
 8007406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007408:	9308      	str	r3, [sp, #32]
 800740a:	2001      	movs	r0, #1
 800740c:	e64d      	b.n	80070aa <_dtoa_r+0x802>
 800740e:	f1bb 0f00 	cmp.w	fp, #0
 8007412:	f77f aed9 	ble.w	80071c8 <_dtoa_r+0x920>
 8007416:	4656      	mov	r6, sl
 8007418:	9802      	ldr	r0, [sp, #8]
 800741a:	4621      	mov	r1, r4
 800741c:	f7ff f9bc 	bl	8006798 <quorem>
 8007420:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007424:	f806 3b01 	strb.w	r3, [r6], #1
 8007428:	eba6 020a 	sub.w	r2, r6, sl
 800742c:	4593      	cmp	fp, r2
 800742e:	ddb4      	ble.n	800739a <_dtoa_r+0xaf2>
 8007430:	9902      	ldr	r1, [sp, #8]
 8007432:	2300      	movs	r3, #0
 8007434:	220a      	movs	r2, #10
 8007436:	4648      	mov	r0, r9
 8007438:	f000 fb0c 	bl	8007a54 <__multadd>
 800743c:	9002      	str	r0, [sp, #8]
 800743e:	e7eb      	b.n	8007418 <_dtoa_r+0xb70>
 8007440:	08008744 	.word	0x08008744
 8007444:	080086c8 	.word	0x080086c8

08007448 <__sfputc_r>:
 8007448:	6893      	ldr	r3, [r2, #8]
 800744a:	3b01      	subs	r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	b410      	push	{r4}
 8007450:	6093      	str	r3, [r2, #8]
 8007452:	da08      	bge.n	8007466 <__sfputc_r+0x1e>
 8007454:	6994      	ldr	r4, [r2, #24]
 8007456:	42a3      	cmp	r3, r4
 8007458:	db01      	blt.n	800745e <__sfputc_r+0x16>
 800745a:	290a      	cmp	r1, #10
 800745c:	d103      	bne.n	8007466 <__sfputc_r+0x1e>
 800745e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007462:	f000 be52 	b.w	800810a <__swbuf_r>
 8007466:	6813      	ldr	r3, [r2, #0]
 8007468:	1c58      	adds	r0, r3, #1
 800746a:	6010      	str	r0, [r2, #0]
 800746c:	7019      	strb	r1, [r3, #0]
 800746e:	4608      	mov	r0, r1
 8007470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007474:	4770      	bx	lr

08007476 <__sfputs_r>:
 8007476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007478:	4606      	mov	r6, r0
 800747a:	460f      	mov	r7, r1
 800747c:	4614      	mov	r4, r2
 800747e:	18d5      	adds	r5, r2, r3
 8007480:	42ac      	cmp	r4, r5
 8007482:	d101      	bne.n	8007488 <__sfputs_r+0x12>
 8007484:	2000      	movs	r0, #0
 8007486:	e007      	b.n	8007498 <__sfputs_r+0x22>
 8007488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800748c:	463a      	mov	r2, r7
 800748e:	4630      	mov	r0, r6
 8007490:	f7ff ffda 	bl	8007448 <__sfputc_r>
 8007494:	1c43      	adds	r3, r0, #1
 8007496:	d1f3      	bne.n	8007480 <__sfputs_r+0xa>
 8007498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800749c <_vfiprintf_r>:
 800749c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a0:	460d      	mov	r5, r1
 80074a2:	b09d      	sub	sp, #116	@ 0x74
 80074a4:	4614      	mov	r4, r2
 80074a6:	4698      	mov	r8, r3
 80074a8:	4606      	mov	r6, r0
 80074aa:	b118      	cbz	r0, 80074b4 <_vfiprintf_r+0x18>
 80074ac:	6a03      	ldr	r3, [r0, #32]
 80074ae:	b90b      	cbnz	r3, 80074b4 <_vfiprintf_r+0x18>
 80074b0:	f7ff f8f0 	bl	8006694 <__sinit>
 80074b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074b6:	07d9      	lsls	r1, r3, #31
 80074b8:	d405      	bmi.n	80074c6 <_vfiprintf_r+0x2a>
 80074ba:	89ab      	ldrh	r3, [r5, #12]
 80074bc:	059a      	lsls	r2, r3, #22
 80074be:	d402      	bmi.n	80074c6 <_vfiprintf_r+0x2a>
 80074c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074c2:	f7ff f962 	bl	800678a <__retarget_lock_acquire_recursive>
 80074c6:	89ab      	ldrh	r3, [r5, #12]
 80074c8:	071b      	lsls	r3, r3, #28
 80074ca:	d501      	bpl.n	80074d0 <_vfiprintf_r+0x34>
 80074cc:	692b      	ldr	r3, [r5, #16]
 80074ce:	b99b      	cbnz	r3, 80074f8 <_vfiprintf_r+0x5c>
 80074d0:	4629      	mov	r1, r5
 80074d2:	4630      	mov	r0, r6
 80074d4:	f000 fe58 	bl	8008188 <__swsetup_r>
 80074d8:	b170      	cbz	r0, 80074f8 <_vfiprintf_r+0x5c>
 80074da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074dc:	07dc      	lsls	r4, r3, #31
 80074de:	d504      	bpl.n	80074ea <_vfiprintf_r+0x4e>
 80074e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074e4:	b01d      	add	sp, #116	@ 0x74
 80074e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ea:	89ab      	ldrh	r3, [r5, #12]
 80074ec:	0598      	lsls	r0, r3, #22
 80074ee:	d4f7      	bmi.n	80074e0 <_vfiprintf_r+0x44>
 80074f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074f2:	f7ff f94b 	bl	800678c <__retarget_lock_release_recursive>
 80074f6:	e7f3      	b.n	80074e0 <_vfiprintf_r+0x44>
 80074f8:	2300      	movs	r3, #0
 80074fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80074fc:	2320      	movs	r3, #32
 80074fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007502:	f8cd 800c 	str.w	r8, [sp, #12]
 8007506:	2330      	movs	r3, #48	@ 0x30
 8007508:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80076b8 <_vfiprintf_r+0x21c>
 800750c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007510:	f04f 0901 	mov.w	r9, #1
 8007514:	4623      	mov	r3, r4
 8007516:	469a      	mov	sl, r3
 8007518:	f813 2b01 	ldrb.w	r2, [r3], #1
 800751c:	b10a      	cbz	r2, 8007522 <_vfiprintf_r+0x86>
 800751e:	2a25      	cmp	r2, #37	@ 0x25
 8007520:	d1f9      	bne.n	8007516 <_vfiprintf_r+0x7a>
 8007522:	ebba 0b04 	subs.w	fp, sl, r4
 8007526:	d00b      	beq.n	8007540 <_vfiprintf_r+0xa4>
 8007528:	465b      	mov	r3, fp
 800752a:	4622      	mov	r2, r4
 800752c:	4629      	mov	r1, r5
 800752e:	4630      	mov	r0, r6
 8007530:	f7ff ffa1 	bl	8007476 <__sfputs_r>
 8007534:	3001      	adds	r0, #1
 8007536:	f000 80a7 	beq.w	8007688 <_vfiprintf_r+0x1ec>
 800753a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800753c:	445a      	add	r2, fp
 800753e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007540:	f89a 3000 	ldrb.w	r3, [sl]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 809f 	beq.w	8007688 <_vfiprintf_r+0x1ec>
 800754a:	2300      	movs	r3, #0
 800754c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007554:	f10a 0a01 	add.w	sl, sl, #1
 8007558:	9304      	str	r3, [sp, #16]
 800755a:	9307      	str	r3, [sp, #28]
 800755c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007560:	931a      	str	r3, [sp, #104]	@ 0x68
 8007562:	4654      	mov	r4, sl
 8007564:	2205      	movs	r2, #5
 8007566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800756a:	4853      	ldr	r0, [pc, #332]	@ (80076b8 <_vfiprintf_r+0x21c>)
 800756c:	f7f8 fe48 	bl	8000200 <memchr>
 8007570:	9a04      	ldr	r2, [sp, #16]
 8007572:	b9d8      	cbnz	r0, 80075ac <_vfiprintf_r+0x110>
 8007574:	06d1      	lsls	r1, r2, #27
 8007576:	bf44      	itt	mi
 8007578:	2320      	movmi	r3, #32
 800757a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800757e:	0713      	lsls	r3, r2, #28
 8007580:	bf44      	itt	mi
 8007582:	232b      	movmi	r3, #43	@ 0x2b
 8007584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007588:	f89a 3000 	ldrb.w	r3, [sl]
 800758c:	2b2a      	cmp	r3, #42	@ 0x2a
 800758e:	d015      	beq.n	80075bc <_vfiprintf_r+0x120>
 8007590:	9a07      	ldr	r2, [sp, #28]
 8007592:	4654      	mov	r4, sl
 8007594:	2000      	movs	r0, #0
 8007596:	f04f 0c0a 	mov.w	ip, #10
 800759a:	4621      	mov	r1, r4
 800759c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075a0:	3b30      	subs	r3, #48	@ 0x30
 80075a2:	2b09      	cmp	r3, #9
 80075a4:	d94b      	bls.n	800763e <_vfiprintf_r+0x1a2>
 80075a6:	b1b0      	cbz	r0, 80075d6 <_vfiprintf_r+0x13a>
 80075a8:	9207      	str	r2, [sp, #28]
 80075aa:	e014      	b.n	80075d6 <_vfiprintf_r+0x13a>
 80075ac:	eba0 0308 	sub.w	r3, r0, r8
 80075b0:	fa09 f303 	lsl.w	r3, r9, r3
 80075b4:	4313      	orrs	r3, r2
 80075b6:	9304      	str	r3, [sp, #16]
 80075b8:	46a2      	mov	sl, r4
 80075ba:	e7d2      	b.n	8007562 <_vfiprintf_r+0xc6>
 80075bc:	9b03      	ldr	r3, [sp, #12]
 80075be:	1d19      	adds	r1, r3, #4
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	9103      	str	r1, [sp, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	bfbb      	ittet	lt
 80075c8:	425b      	neglt	r3, r3
 80075ca:	f042 0202 	orrlt.w	r2, r2, #2
 80075ce:	9307      	strge	r3, [sp, #28]
 80075d0:	9307      	strlt	r3, [sp, #28]
 80075d2:	bfb8      	it	lt
 80075d4:	9204      	strlt	r2, [sp, #16]
 80075d6:	7823      	ldrb	r3, [r4, #0]
 80075d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80075da:	d10a      	bne.n	80075f2 <_vfiprintf_r+0x156>
 80075dc:	7863      	ldrb	r3, [r4, #1]
 80075de:	2b2a      	cmp	r3, #42	@ 0x2a
 80075e0:	d132      	bne.n	8007648 <_vfiprintf_r+0x1ac>
 80075e2:	9b03      	ldr	r3, [sp, #12]
 80075e4:	1d1a      	adds	r2, r3, #4
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	9203      	str	r2, [sp, #12]
 80075ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075ee:	3402      	adds	r4, #2
 80075f0:	9305      	str	r3, [sp, #20]
 80075f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80076c8 <_vfiprintf_r+0x22c>
 80075f6:	7821      	ldrb	r1, [r4, #0]
 80075f8:	2203      	movs	r2, #3
 80075fa:	4650      	mov	r0, sl
 80075fc:	f7f8 fe00 	bl	8000200 <memchr>
 8007600:	b138      	cbz	r0, 8007612 <_vfiprintf_r+0x176>
 8007602:	9b04      	ldr	r3, [sp, #16]
 8007604:	eba0 000a 	sub.w	r0, r0, sl
 8007608:	2240      	movs	r2, #64	@ 0x40
 800760a:	4082      	lsls	r2, r0
 800760c:	4313      	orrs	r3, r2
 800760e:	3401      	adds	r4, #1
 8007610:	9304      	str	r3, [sp, #16]
 8007612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007616:	4829      	ldr	r0, [pc, #164]	@ (80076bc <_vfiprintf_r+0x220>)
 8007618:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800761c:	2206      	movs	r2, #6
 800761e:	f7f8 fdef 	bl	8000200 <memchr>
 8007622:	2800      	cmp	r0, #0
 8007624:	d03f      	beq.n	80076a6 <_vfiprintf_r+0x20a>
 8007626:	4b26      	ldr	r3, [pc, #152]	@ (80076c0 <_vfiprintf_r+0x224>)
 8007628:	bb1b      	cbnz	r3, 8007672 <_vfiprintf_r+0x1d6>
 800762a:	9b03      	ldr	r3, [sp, #12]
 800762c:	3307      	adds	r3, #7
 800762e:	f023 0307 	bic.w	r3, r3, #7
 8007632:	3308      	adds	r3, #8
 8007634:	9303      	str	r3, [sp, #12]
 8007636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007638:	443b      	add	r3, r7
 800763a:	9309      	str	r3, [sp, #36]	@ 0x24
 800763c:	e76a      	b.n	8007514 <_vfiprintf_r+0x78>
 800763e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007642:	460c      	mov	r4, r1
 8007644:	2001      	movs	r0, #1
 8007646:	e7a8      	b.n	800759a <_vfiprintf_r+0xfe>
 8007648:	2300      	movs	r3, #0
 800764a:	3401      	adds	r4, #1
 800764c:	9305      	str	r3, [sp, #20]
 800764e:	4619      	mov	r1, r3
 8007650:	f04f 0c0a 	mov.w	ip, #10
 8007654:	4620      	mov	r0, r4
 8007656:	f810 2b01 	ldrb.w	r2, [r0], #1
 800765a:	3a30      	subs	r2, #48	@ 0x30
 800765c:	2a09      	cmp	r2, #9
 800765e:	d903      	bls.n	8007668 <_vfiprintf_r+0x1cc>
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0c6      	beq.n	80075f2 <_vfiprintf_r+0x156>
 8007664:	9105      	str	r1, [sp, #20]
 8007666:	e7c4      	b.n	80075f2 <_vfiprintf_r+0x156>
 8007668:	fb0c 2101 	mla	r1, ip, r1, r2
 800766c:	4604      	mov	r4, r0
 800766e:	2301      	movs	r3, #1
 8007670:	e7f0      	b.n	8007654 <_vfiprintf_r+0x1b8>
 8007672:	ab03      	add	r3, sp, #12
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	462a      	mov	r2, r5
 8007678:	4b12      	ldr	r3, [pc, #72]	@ (80076c4 <_vfiprintf_r+0x228>)
 800767a:	a904      	add	r1, sp, #16
 800767c:	4630      	mov	r0, r6
 800767e:	f7fe fbc7 	bl	8005e10 <_printf_float>
 8007682:	4607      	mov	r7, r0
 8007684:	1c78      	adds	r0, r7, #1
 8007686:	d1d6      	bne.n	8007636 <_vfiprintf_r+0x19a>
 8007688:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800768a:	07d9      	lsls	r1, r3, #31
 800768c:	d405      	bmi.n	800769a <_vfiprintf_r+0x1fe>
 800768e:	89ab      	ldrh	r3, [r5, #12]
 8007690:	059a      	lsls	r2, r3, #22
 8007692:	d402      	bmi.n	800769a <_vfiprintf_r+0x1fe>
 8007694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007696:	f7ff f879 	bl	800678c <__retarget_lock_release_recursive>
 800769a:	89ab      	ldrh	r3, [r5, #12]
 800769c:	065b      	lsls	r3, r3, #25
 800769e:	f53f af1f 	bmi.w	80074e0 <_vfiprintf_r+0x44>
 80076a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076a4:	e71e      	b.n	80074e4 <_vfiprintf_r+0x48>
 80076a6:	ab03      	add	r3, sp, #12
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	462a      	mov	r2, r5
 80076ac:	4b05      	ldr	r3, [pc, #20]	@ (80076c4 <_vfiprintf_r+0x228>)
 80076ae:	a904      	add	r1, sp, #16
 80076b0:	4630      	mov	r0, r6
 80076b2:	f7fe fe45 	bl	8006340 <_printf_i>
 80076b6:	e7e4      	b.n	8007682 <_vfiprintf_r+0x1e6>
 80076b8:	08008755 	.word	0x08008755
 80076bc:	0800875f 	.word	0x0800875f
 80076c0:	08005e11 	.word	0x08005e11
 80076c4:	08007477 	.word	0x08007477
 80076c8:	0800875b 	.word	0x0800875b

080076cc <malloc>:
 80076cc:	4b02      	ldr	r3, [pc, #8]	@ (80076d8 <malloc+0xc>)
 80076ce:	4601      	mov	r1, r0
 80076d0:	6818      	ldr	r0, [r3, #0]
 80076d2:	f000 b825 	b.w	8007720 <_malloc_r>
 80076d6:	bf00      	nop
 80076d8:	20040018 	.word	0x20040018

080076dc <sbrk_aligned>:
 80076dc:	b570      	push	{r4, r5, r6, lr}
 80076de:	4e0f      	ldr	r6, [pc, #60]	@ (800771c <sbrk_aligned+0x40>)
 80076e0:	460c      	mov	r4, r1
 80076e2:	6831      	ldr	r1, [r6, #0]
 80076e4:	4605      	mov	r5, r0
 80076e6:	b911      	cbnz	r1, 80076ee <sbrk_aligned+0x12>
 80076e8:	f000 fe3a 	bl	8008360 <_sbrk_r>
 80076ec:	6030      	str	r0, [r6, #0]
 80076ee:	4621      	mov	r1, r4
 80076f0:	4628      	mov	r0, r5
 80076f2:	f000 fe35 	bl	8008360 <_sbrk_r>
 80076f6:	1c43      	adds	r3, r0, #1
 80076f8:	d103      	bne.n	8007702 <sbrk_aligned+0x26>
 80076fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80076fe:	4620      	mov	r0, r4
 8007700:	bd70      	pop	{r4, r5, r6, pc}
 8007702:	1cc4      	adds	r4, r0, #3
 8007704:	f024 0403 	bic.w	r4, r4, #3
 8007708:	42a0      	cmp	r0, r4
 800770a:	d0f8      	beq.n	80076fe <sbrk_aligned+0x22>
 800770c:	1a21      	subs	r1, r4, r0
 800770e:	4628      	mov	r0, r5
 8007710:	f000 fe26 	bl	8008360 <_sbrk_r>
 8007714:	3001      	adds	r0, #1
 8007716:	d1f2      	bne.n	80076fe <sbrk_aligned+0x22>
 8007718:	e7ef      	b.n	80076fa <sbrk_aligned+0x1e>
 800771a:	bf00      	nop
 800771c:	20040500 	.word	0x20040500

08007720 <_malloc_r>:
 8007720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007724:	1ccd      	adds	r5, r1, #3
 8007726:	f025 0503 	bic.w	r5, r5, #3
 800772a:	3508      	adds	r5, #8
 800772c:	2d0c      	cmp	r5, #12
 800772e:	bf38      	it	cc
 8007730:	250c      	movcc	r5, #12
 8007732:	2d00      	cmp	r5, #0
 8007734:	4606      	mov	r6, r0
 8007736:	db01      	blt.n	800773c <_malloc_r+0x1c>
 8007738:	42a9      	cmp	r1, r5
 800773a:	d904      	bls.n	8007746 <_malloc_r+0x26>
 800773c:	230c      	movs	r3, #12
 800773e:	6033      	str	r3, [r6, #0]
 8007740:	2000      	movs	r0, #0
 8007742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007746:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800781c <_malloc_r+0xfc>
 800774a:	f000 f915 	bl	8007978 <__malloc_lock>
 800774e:	f8d8 3000 	ldr.w	r3, [r8]
 8007752:	461c      	mov	r4, r3
 8007754:	bb44      	cbnz	r4, 80077a8 <_malloc_r+0x88>
 8007756:	4629      	mov	r1, r5
 8007758:	4630      	mov	r0, r6
 800775a:	f7ff ffbf 	bl	80076dc <sbrk_aligned>
 800775e:	1c43      	adds	r3, r0, #1
 8007760:	4604      	mov	r4, r0
 8007762:	d158      	bne.n	8007816 <_malloc_r+0xf6>
 8007764:	f8d8 4000 	ldr.w	r4, [r8]
 8007768:	4627      	mov	r7, r4
 800776a:	2f00      	cmp	r7, #0
 800776c:	d143      	bne.n	80077f6 <_malloc_r+0xd6>
 800776e:	2c00      	cmp	r4, #0
 8007770:	d04b      	beq.n	800780a <_malloc_r+0xea>
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	4639      	mov	r1, r7
 8007776:	4630      	mov	r0, r6
 8007778:	eb04 0903 	add.w	r9, r4, r3
 800777c:	f000 fdf0 	bl	8008360 <_sbrk_r>
 8007780:	4581      	cmp	r9, r0
 8007782:	d142      	bne.n	800780a <_malloc_r+0xea>
 8007784:	6821      	ldr	r1, [r4, #0]
 8007786:	1a6d      	subs	r5, r5, r1
 8007788:	4629      	mov	r1, r5
 800778a:	4630      	mov	r0, r6
 800778c:	f7ff ffa6 	bl	80076dc <sbrk_aligned>
 8007790:	3001      	adds	r0, #1
 8007792:	d03a      	beq.n	800780a <_malloc_r+0xea>
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	442b      	add	r3, r5
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	f8d8 3000 	ldr.w	r3, [r8]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	bb62      	cbnz	r2, 80077fc <_malloc_r+0xdc>
 80077a2:	f8c8 7000 	str.w	r7, [r8]
 80077a6:	e00f      	b.n	80077c8 <_malloc_r+0xa8>
 80077a8:	6822      	ldr	r2, [r4, #0]
 80077aa:	1b52      	subs	r2, r2, r5
 80077ac:	d420      	bmi.n	80077f0 <_malloc_r+0xd0>
 80077ae:	2a0b      	cmp	r2, #11
 80077b0:	d917      	bls.n	80077e2 <_malloc_r+0xc2>
 80077b2:	1961      	adds	r1, r4, r5
 80077b4:	42a3      	cmp	r3, r4
 80077b6:	6025      	str	r5, [r4, #0]
 80077b8:	bf18      	it	ne
 80077ba:	6059      	strne	r1, [r3, #4]
 80077bc:	6863      	ldr	r3, [r4, #4]
 80077be:	bf08      	it	eq
 80077c0:	f8c8 1000 	streq.w	r1, [r8]
 80077c4:	5162      	str	r2, [r4, r5]
 80077c6:	604b      	str	r3, [r1, #4]
 80077c8:	4630      	mov	r0, r6
 80077ca:	f000 f8db 	bl	8007984 <__malloc_unlock>
 80077ce:	f104 000b 	add.w	r0, r4, #11
 80077d2:	1d23      	adds	r3, r4, #4
 80077d4:	f020 0007 	bic.w	r0, r0, #7
 80077d8:	1ac2      	subs	r2, r0, r3
 80077da:	bf1c      	itt	ne
 80077dc:	1a1b      	subne	r3, r3, r0
 80077de:	50a3      	strne	r3, [r4, r2]
 80077e0:	e7af      	b.n	8007742 <_malloc_r+0x22>
 80077e2:	6862      	ldr	r2, [r4, #4]
 80077e4:	42a3      	cmp	r3, r4
 80077e6:	bf0c      	ite	eq
 80077e8:	f8c8 2000 	streq.w	r2, [r8]
 80077ec:	605a      	strne	r2, [r3, #4]
 80077ee:	e7eb      	b.n	80077c8 <_malloc_r+0xa8>
 80077f0:	4623      	mov	r3, r4
 80077f2:	6864      	ldr	r4, [r4, #4]
 80077f4:	e7ae      	b.n	8007754 <_malloc_r+0x34>
 80077f6:	463c      	mov	r4, r7
 80077f8:	687f      	ldr	r7, [r7, #4]
 80077fa:	e7b6      	b.n	800776a <_malloc_r+0x4a>
 80077fc:	461a      	mov	r2, r3
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	42a3      	cmp	r3, r4
 8007802:	d1fb      	bne.n	80077fc <_malloc_r+0xdc>
 8007804:	2300      	movs	r3, #0
 8007806:	6053      	str	r3, [r2, #4]
 8007808:	e7de      	b.n	80077c8 <_malloc_r+0xa8>
 800780a:	230c      	movs	r3, #12
 800780c:	6033      	str	r3, [r6, #0]
 800780e:	4630      	mov	r0, r6
 8007810:	f000 f8b8 	bl	8007984 <__malloc_unlock>
 8007814:	e794      	b.n	8007740 <_malloc_r+0x20>
 8007816:	6005      	str	r5, [r0, #0]
 8007818:	e7d6      	b.n	80077c8 <_malloc_r+0xa8>
 800781a:	bf00      	nop
 800781c:	20040504 	.word	0x20040504

08007820 <__sflush_r>:
 8007820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007828:	0716      	lsls	r6, r2, #28
 800782a:	4605      	mov	r5, r0
 800782c:	460c      	mov	r4, r1
 800782e:	d454      	bmi.n	80078da <__sflush_r+0xba>
 8007830:	684b      	ldr	r3, [r1, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	dc02      	bgt.n	800783c <__sflush_r+0x1c>
 8007836:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007838:	2b00      	cmp	r3, #0
 800783a:	dd48      	ble.n	80078ce <__sflush_r+0xae>
 800783c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800783e:	2e00      	cmp	r6, #0
 8007840:	d045      	beq.n	80078ce <__sflush_r+0xae>
 8007842:	2300      	movs	r3, #0
 8007844:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007848:	682f      	ldr	r7, [r5, #0]
 800784a:	6a21      	ldr	r1, [r4, #32]
 800784c:	602b      	str	r3, [r5, #0]
 800784e:	d030      	beq.n	80078b2 <__sflush_r+0x92>
 8007850:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007852:	89a3      	ldrh	r3, [r4, #12]
 8007854:	0759      	lsls	r1, r3, #29
 8007856:	d505      	bpl.n	8007864 <__sflush_r+0x44>
 8007858:	6863      	ldr	r3, [r4, #4]
 800785a:	1ad2      	subs	r2, r2, r3
 800785c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800785e:	b10b      	cbz	r3, 8007864 <__sflush_r+0x44>
 8007860:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007862:	1ad2      	subs	r2, r2, r3
 8007864:	2300      	movs	r3, #0
 8007866:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007868:	6a21      	ldr	r1, [r4, #32]
 800786a:	4628      	mov	r0, r5
 800786c:	47b0      	blx	r6
 800786e:	1c43      	adds	r3, r0, #1
 8007870:	89a3      	ldrh	r3, [r4, #12]
 8007872:	d106      	bne.n	8007882 <__sflush_r+0x62>
 8007874:	6829      	ldr	r1, [r5, #0]
 8007876:	291d      	cmp	r1, #29
 8007878:	d82b      	bhi.n	80078d2 <__sflush_r+0xb2>
 800787a:	4a2a      	ldr	r2, [pc, #168]	@ (8007924 <__sflush_r+0x104>)
 800787c:	40ca      	lsrs	r2, r1
 800787e:	07d6      	lsls	r6, r2, #31
 8007880:	d527      	bpl.n	80078d2 <__sflush_r+0xb2>
 8007882:	2200      	movs	r2, #0
 8007884:	6062      	str	r2, [r4, #4]
 8007886:	04d9      	lsls	r1, r3, #19
 8007888:	6922      	ldr	r2, [r4, #16]
 800788a:	6022      	str	r2, [r4, #0]
 800788c:	d504      	bpl.n	8007898 <__sflush_r+0x78>
 800788e:	1c42      	adds	r2, r0, #1
 8007890:	d101      	bne.n	8007896 <__sflush_r+0x76>
 8007892:	682b      	ldr	r3, [r5, #0]
 8007894:	b903      	cbnz	r3, 8007898 <__sflush_r+0x78>
 8007896:	6560      	str	r0, [r4, #84]	@ 0x54
 8007898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800789a:	602f      	str	r7, [r5, #0]
 800789c:	b1b9      	cbz	r1, 80078ce <__sflush_r+0xae>
 800789e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078a2:	4299      	cmp	r1, r3
 80078a4:	d002      	beq.n	80078ac <__sflush_r+0x8c>
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 fdde 	bl	8008468 <_free_r>
 80078ac:	2300      	movs	r3, #0
 80078ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80078b0:	e00d      	b.n	80078ce <__sflush_r+0xae>
 80078b2:	2301      	movs	r3, #1
 80078b4:	4628      	mov	r0, r5
 80078b6:	47b0      	blx	r6
 80078b8:	4602      	mov	r2, r0
 80078ba:	1c50      	adds	r0, r2, #1
 80078bc:	d1c9      	bne.n	8007852 <__sflush_r+0x32>
 80078be:	682b      	ldr	r3, [r5, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d0c6      	beq.n	8007852 <__sflush_r+0x32>
 80078c4:	2b1d      	cmp	r3, #29
 80078c6:	d001      	beq.n	80078cc <__sflush_r+0xac>
 80078c8:	2b16      	cmp	r3, #22
 80078ca:	d11e      	bne.n	800790a <__sflush_r+0xea>
 80078cc:	602f      	str	r7, [r5, #0]
 80078ce:	2000      	movs	r0, #0
 80078d0:	e022      	b.n	8007918 <__sflush_r+0xf8>
 80078d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078d6:	b21b      	sxth	r3, r3
 80078d8:	e01b      	b.n	8007912 <__sflush_r+0xf2>
 80078da:	690f      	ldr	r7, [r1, #16]
 80078dc:	2f00      	cmp	r7, #0
 80078de:	d0f6      	beq.n	80078ce <__sflush_r+0xae>
 80078e0:	0793      	lsls	r3, r2, #30
 80078e2:	680e      	ldr	r6, [r1, #0]
 80078e4:	bf08      	it	eq
 80078e6:	694b      	ldreq	r3, [r1, #20]
 80078e8:	600f      	str	r7, [r1, #0]
 80078ea:	bf18      	it	ne
 80078ec:	2300      	movne	r3, #0
 80078ee:	eba6 0807 	sub.w	r8, r6, r7
 80078f2:	608b      	str	r3, [r1, #8]
 80078f4:	f1b8 0f00 	cmp.w	r8, #0
 80078f8:	dde9      	ble.n	80078ce <__sflush_r+0xae>
 80078fa:	6a21      	ldr	r1, [r4, #32]
 80078fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80078fe:	4643      	mov	r3, r8
 8007900:	463a      	mov	r2, r7
 8007902:	4628      	mov	r0, r5
 8007904:	47b0      	blx	r6
 8007906:	2800      	cmp	r0, #0
 8007908:	dc08      	bgt.n	800791c <__sflush_r+0xfc>
 800790a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800790e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007912:	81a3      	strh	r3, [r4, #12]
 8007914:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800791c:	4407      	add	r7, r0
 800791e:	eba8 0800 	sub.w	r8, r8, r0
 8007922:	e7e7      	b.n	80078f4 <__sflush_r+0xd4>
 8007924:	20400001 	.word	0x20400001

08007928 <_fflush_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	690b      	ldr	r3, [r1, #16]
 800792c:	4605      	mov	r5, r0
 800792e:	460c      	mov	r4, r1
 8007930:	b913      	cbnz	r3, 8007938 <_fflush_r+0x10>
 8007932:	2500      	movs	r5, #0
 8007934:	4628      	mov	r0, r5
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	b118      	cbz	r0, 8007942 <_fflush_r+0x1a>
 800793a:	6a03      	ldr	r3, [r0, #32]
 800793c:	b90b      	cbnz	r3, 8007942 <_fflush_r+0x1a>
 800793e:	f7fe fea9 	bl	8006694 <__sinit>
 8007942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0f3      	beq.n	8007932 <_fflush_r+0xa>
 800794a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800794c:	07d0      	lsls	r0, r2, #31
 800794e:	d404      	bmi.n	800795a <_fflush_r+0x32>
 8007950:	0599      	lsls	r1, r3, #22
 8007952:	d402      	bmi.n	800795a <_fflush_r+0x32>
 8007954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007956:	f7fe ff18 	bl	800678a <__retarget_lock_acquire_recursive>
 800795a:	4628      	mov	r0, r5
 800795c:	4621      	mov	r1, r4
 800795e:	f7ff ff5f 	bl	8007820 <__sflush_r>
 8007962:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007964:	07da      	lsls	r2, r3, #31
 8007966:	4605      	mov	r5, r0
 8007968:	d4e4      	bmi.n	8007934 <_fflush_r+0xc>
 800796a:	89a3      	ldrh	r3, [r4, #12]
 800796c:	059b      	lsls	r3, r3, #22
 800796e:	d4e1      	bmi.n	8007934 <_fflush_r+0xc>
 8007970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007972:	f7fe ff0b 	bl	800678c <__retarget_lock_release_recursive>
 8007976:	e7dd      	b.n	8007934 <_fflush_r+0xc>

08007978 <__malloc_lock>:
 8007978:	4801      	ldr	r0, [pc, #4]	@ (8007980 <__malloc_lock+0x8>)
 800797a:	f7fe bf06 	b.w	800678a <__retarget_lock_acquire_recursive>
 800797e:	bf00      	nop
 8007980:	200404fc 	.word	0x200404fc

08007984 <__malloc_unlock>:
 8007984:	4801      	ldr	r0, [pc, #4]	@ (800798c <__malloc_unlock+0x8>)
 8007986:	f7fe bf01 	b.w	800678c <__retarget_lock_release_recursive>
 800798a:	bf00      	nop
 800798c:	200404fc 	.word	0x200404fc

08007990 <_Balloc>:
 8007990:	b570      	push	{r4, r5, r6, lr}
 8007992:	69c6      	ldr	r6, [r0, #28]
 8007994:	4604      	mov	r4, r0
 8007996:	460d      	mov	r5, r1
 8007998:	b976      	cbnz	r6, 80079b8 <_Balloc+0x28>
 800799a:	2010      	movs	r0, #16
 800799c:	f7ff fe96 	bl	80076cc <malloc>
 80079a0:	4602      	mov	r2, r0
 80079a2:	61e0      	str	r0, [r4, #28]
 80079a4:	b920      	cbnz	r0, 80079b0 <_Balloc+0x20>
 80079a6:	4b18      	ldr	r3, [pc, #96]	@ (8007a08 <_Balloc+0x78>)
 80079a8:	4818      	ldr	r0, [pc, #96]	@ (8007a0c <_Balloc+0x7c>)
 80079aa:	216b      	movs	r1, #107	@ 0x6b
 80079ac:	f000 fd2a 	bl	8008404 <__assert_func>
 80079b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079b4:	6006      	str	r6, [r0, #0]
 80079b6:	60c6      	str	r6, [r0, #12]
 80079b8:	69e6      	ldr	r6, [r4, #28]
 80079ba:	68f3      	ldr	r3, [r6, #12]
 80079bc:	b183      	cbz	r3, 80079e0 <_Balloc+0x50>
 80079be:	69e3      	ldr	r3, [r4, #28]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079c6:	b9b8      	cbnz	r0, 80079f8 <_Balloc+0x68>
 80079c8:	2101      	movs	r1, #1
 80079ca:	fa01 f605 	lsl.w	r6, r1, r5
 80079ce:	1d72      	adds	r2, r6, #5
 80079d0:	0092      	lsls	r2, r2, #2
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 fd34 	bl	8008440 <_calloc_r>
 80079d8:	b160      	cbz	r0, 80079f4 <_Balloc+0x64>
 80079da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079de:	e00e      	b.n	80079fe <_Balloc+0x6e>
 80079e0:	2221      	movs	r2, #33	@ 0x21
 80079e2:	2104      	movs	r1, #4
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 fd2b 	bl	8008440 <_calloc_r>
 80079ea:	69e3      	ldr	r3, [r4, #28]
 80079ec:	60f0      	str	r0, [r6, #12]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1e4      	bne.n	80079be <_Balloc+0x2e>
 80079f4:	2000      	movs	r0, #0
 80079f6:	bd70      	pop	{r4, r5, r6, pc}
 80079f8:	6802      	ldr	r2, [r0, #0]
 80079fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079fe:	2300      	movs	r3, #0
 8007a00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a04:	e7f7      	b.n	80079f6 <_Balloc+0x66>
 8007a06:	bf00      	nop
 8007a08:	080086d5 	.word	0x080086d5
 8007a0c:	08008766 	.word	0x08008766

08007a10 <_Bfree>:
 8007a10:	b570      	push	{r4, r5, r6, lr}
 8007a12:	69c6      	ldr	r6, [r0, #28]
 8007a14:	4605      	mov	r5, r0
 8007a16:	460c      	mov	r4, r1
 8007a18:	b976      	cbnz	r6, 8007a38 <_Bfree+0x28>
 8007a1a:	2010      	movs	r0, #16
 8007a1c:	f7ff fe56 	bl	80076cc <malloc>
 8007a20:	4602      	mov	r2, r0
 8007a22:	61e8      	str	r0, [r5, #28]
 8007a24:	b920      	cbnz	r0, 8007a30 <_Bfree+0x20>
 8007a26:	4b09      	ldr	r3, [pc, #36]	@ (8007a4c <_Bfree+0x3c>)
 8007a28:	4809      	ldr	r0, [pc, #36]	@ (8007a50 <_Bfree+0x40>)
 8007a2a:	218f      	movs	r1, #143	@ 0x8f
 8007a2c:	f000 fcea 	bl	8008404 <__assert_func>
 8007a30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a34:	6006      	str	r6, [r0, #0]
 8007a36:	60c6      	str	r6, [r0, #12]
 8007a38:	b13c      	cbz	r4, 8007a4a <_Bfree+0x3a>
 8007a3a:	69eb      	ldr	r3, [r5, #28]
 8007a3c:	6862      	ldr	r2, [r4, #4]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a44:	6021      	str	r1, [r4, #0]
 8007a46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a4a:	bd70      	pop	{r4, r5, r6, pc}
 8007a4c:	080086d5 	.word	0x080086d5
 8007a50:	08008766 	.word	0x08008766

08007a54 <__multadd>:
 8007a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a58:	690d      	ldr	r5, [r1, #16]
 8007a5a:	4607      	mov	r7, r0
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	461e      	mov	r6, r3
 8007a60:	f101 0c14 	add.w	ip, r1, #20
 8007a64:	2000      	movs	r0, #0
 8007a66:	f8dc 3000 	ldr.w	r3, [ip]
 8007a6a:	b299      	uxth	r1, r3
 8007a6c:	fb02 6101 	mla	r1, r2, r1, r6
 8007a70:	0c1e      	lsrs	r6, r3, #16
 8007a72:	0c0b      	lsrs	r3, r1, #16
 8007a74:	fb02 3306 	mla	r3, r2, r6, r3
 8007a78:	b289      	uxth	r1, r1
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a80:	4285      	cmp	r5, r0
 8007a82:	f84c 1b04 	str.w	r1, [ip], #4
 8007a86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a8a:	dcec      	bgt.n	8007a66 <__multadd+0x12>
 8007a8c:	b30e      	cbz	r6, 8007ad2 <__multadd+0x7e>
 8007a8e:	68a3      	ldr	r3, [r4, #8]
 8007a90:	42ab      	cmp	r3, r5
 8007a92:	dc19      	bgt.n	8007ac8 <__multadd+0x74>
 8007a94:	6861      	ldr	r1, [r4, #4]
 8007a96:	4638      	mov	r0, r7
 8007a98:	3101      	adds	r1, #1
 8007a9a:	f7ff ff79 	bl	8007990 <_Balloc>
 8007a9e:	4680      	mov	r8, r0
 8007aa0:	b928      	cbnz	r0, 8007aae <__multadd+0x5a>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad8 <__multadd+0x84>)
 8007aa6:	480d      	ldr	r0, [pc, #52]	@ (8007adc <__multadd+0x88>)
 8007aa8:	21ba      	movs	r1, #186	@ 0xba
 8007aaa:	f000 fcab 	bl	8008404 <__assert_func>
 8007aae:	6922      	ldr	r2, [r4, #16]
 8007ab0:	3202      	adds	r2, #2
 8007ab2:	f104 010c 	add.w	r1, r4, #12
 8007ab6:	0092      	lsls	r2, r2, #2
 8007ab8:	300c      	adds	r0, #12
 8007aba:	f000 fc95 	bl	80083e8 <memcpy>
 8007abe:	4621      	mov	r1, r4
 8007ac0:	4638      	mov	r0, r7
 8007ac2:	f7ff ffa5 	bl	8007a10 <_Bfree>
 8007ac6:	4644      	mov	r4, r8
 8007ac8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007acc:	3501      	adds	r5, #1
 8007ace:	615e      	str	r6, [r3, #20]
 8007ad0:	6125      	str	r5, [r4, #16]
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad8:	08008744 	.word	0x08008744
 8007adc:	08008766 	.word	0x08008766

08007ae0 <__hi0bits>:
 8007ae0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	bf36      	itet	cc
 8007ae8:	0403      	lslcc	r3, r0, #16
 8007aea:	2000      	movcs	r0, #0
 8007aec:	2010      	movcc	r0, #16
 8007aee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007af2:	bf3c      	itt	cc
 8007af4:	021b      	lslcc	r3, r3, #8
 8007af6:	3008      	addcc	r0, #8
 8007af8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007afc:	bf3c      	itt	cc
 8007afe:	011b      	lslcc	r3, r3, #4
 8007b00:	3004      	addcc	r0, #4
 8007b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b06:	bf3c      	itt	cc
 8007b08:	009b      	lslcc	r3, r3, #2
 8007b0a:	3002      	addcc	r0, #2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	db05      	blt.n	8007b1c <__hi0bits+0x3c>
 8007b10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b14:	f100 0001 	add.w	r0, r0, #1
 8007b18:	bf08      	it	eq
 8007b1a:	2020      	moveq	r0, #32
 8007b1c:	4770      	bx	lr

08007b1e <__lo0bits>:
 8007b1e:	6803      	ldr	r3, [r0, #0]
 8007b20:	4602      	mov	r2, r0
 8007b22:	f013 0007 	ands.w	r0, r3, #7
 8007b26:	d00b      	beq.n	8007b40 <__lo0bits+0x22>
 8007b28:	07d9      	lsls	r1, r3, #31
 8007b2a:	d421      	bmi.n	8007b70 <__lo0bits+0x52>
 8007b2c:	0798      	lsls	r0, r3, #30
 8007b2e:	bf49      	itett	mi
 8007b30:	085b      	lsrmi	r3, r3, #1
 8007b32:	089b      	lsrpl	r3, r3, #2
 8007b34:	2001      	movmi	r0, #1
 8007b36:	6013      	strmi	r3, [r2, #0]
 8007b38:	bf5c      	itt	pl
 8007b3a:	6013      	strpl	r3, [r2, #0]
 8007b3c:	2002      	movpl	r0, #2
 8007b3e:	4770      	bx	lr
 8007b40:	b299      	uxth	r1, r3
 8007b42:	b909      	cbnz	r1, 8007b48 <__lo0bits+0x2a>
 8007b44:	0c1b      	lsrs	r3, r3, #16
 8007b46:	2010      	movs	r0, #16
 8007b48:	b2d9      	uxtb	r1, r3
 8007b4a:	b909      	cbnz	r1, 8007b50 <__lo0bits+0x32>
 8007b4c:	3008      	adds	r0, #8
 8007b4e:	0a1b      	lsrs	r3, r3, #8
 8007b50:	0719      	lsls	r1, r3, #28
 8007b52:	bf04      	itt	eq
 8007b54:	091b      	lsreq	r3, r3, #4
 8007b56:	3004      	addeq	r0, #4
 8007b58:	0799      	lsls	r1, r3, #30
 8007b5a:	bf04      	itt	eq
 8007b5c:	089b      	lsreq	r3, r3, #2
 8007b5e:	3002      	addeq	r0, #2
 8007b60:	07d9      	lsls	r1, r3, #31
 8007b62:	d403      	bmi.n	8007b6c <__lo0bits+0x4e>
 8007b64:	085b      	lsrs	r3, r3, #1
 8007b66:	f100 0001 	add.w	r0, r0, #1
 8007b6a:	d003      	beq.n	8007b74 <__lo0bits+0x56>
 8007b6c:	6013      	str	r3, [r2, #0]
 8007b6e:	4770      	bx	lr
 8007b70:	2000      	movs	r0, #0
 8007b72:	4770      	bx	lr
 8007b74:	2020      	movs	r0, #32
 8007b76:	4770      	bx	lr

08007b78 <__i2b>:
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	2101      	movs	r1, #1
 8007b7e:	f7ff ff07 	bl	8007990 <_Balloc>
 8007b82:	4602      	mov	r2, r0
 8007b84:	b928      	cbnz	r0, 8007b92 <__i2b+0x1a>
 8007b86:	4b05      	ldr	r3, [pc, #20]	@ (8007b9c <__i2b+0x24>)
 8007b88:	4805      	ldr	r0, [pc, #20]	@ (8007ba0 <__i2b+0x28>)
 8007b8a:	f240 1145 	movw	r1, #325	@ 0x145
 8007b8e:	f000 fc39 	bl	8008404 <__assert_func>
 8007b92:	2301      	movs	r3, #1
 8007b94:	6144      	str	r4, [r0, #20]
 8007b96:	6103      	str	r3, [r0, #16]
 8007b98:	bd10      	pop	{r4, pc}
 8007b9a:	bf00      	nop
 8007b9c:	08008744 	.word	0x08008744
 8007ba0:	08008766 	.word	0x08008766

08007ba4 <__multiply>:
 8007ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba8:	4617      	mov	r7, r2
 8007baa:	690a      	ldr	r2, [r1, #16]
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	bfa8      	it	ge
 8007bb2:	463b      	movge	r3, r7
 8007bb4:	4689      	mov	r9, r1
 8007bb6:	bfa4      	itt	ge
 8007bb8:	460f      	movge	r7, r1
 8007bba:	4699      	movge	r9, r3
 8007bbc:	693d      	ldr	r5, [r7, #16]
 8007bbe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	6879      	ldr	r1, [r7, #4]
 8007bc6:	eb05 060a 	add.w	r6, r5, sl
 8007bca:	42b3      	cmp	r3, r6
 8007bcc:	b085      	sub	sp, #20
 8007bce:	bfb8      	it	lt
 8007bd0:	3101      	addlt	r1, #1
 8007bd2:	f7ff fedd 	bl	8007990 <_Balloc>
 8007bd6:	b930      	cbnz	r0, 8007be6 <__multiply+0x42>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	4b41      	ldr	r3, [pc, #260]	@ (8007ce0 <__multiply+0x13c>)
 8007bdc:	4841      	ldr	r0, [pc, #260]	@ (8007ce4 <__multiply+0x140>)
 8007bde:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007be2:	f000 fc0f 	bl	8008404 <__assert_func>
 8007be6:	f100 0414 	add.w	r4, r0, #20
 8007bea:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007bee:	4623      	mov	r3, r4
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4573      	cmp	r3, lr
 8007bf4:	d320      	bcc.n	8007c38 <__multiply+0x94>
 8007bf6:	f107 0814 	add.w	r8, r7, #20
 8007bfa:	f109 0114 	add.w	r1, r9, #20
 8007bfe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007c02:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007c06:	9302      	str	r3, [sp, #8]
 8007c08:	1beb      	subs	r3, r5, r7
 8007c0a:	3b15      	subs	r3, #21
 8007c0c:	f023 0303 	bic.w	r3, r3, #3
 8007c10:	3304      	adds	r3, #4
 8007c12:	3715      	adds	r7, #21
 8007c14:	42bd      	cmp	r5, r7
 8007c16:	bf38      	it	cc
 8007c18:	2304      	movcc	r3, #4
 8007c1a:	9301      	str	r3, [sp, #4]
 8007c1c:	9b02      	ldr	r3, [sp, #8]
 8007c1e:	9103      	str	r1, [sp, #12]
 8007c20:	428b      	cmp	r3, r1
 8007c22:	d80c      	bhi.n	8007c3e <__multiply+0x9a>
 8007c24:	2e00      	cmp	r6, #0
 8007c26:	dd03      	ble.n	8007c30 <__multiply+0x8c>
 8007c28:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d055      	beq.n	8007cdc <__multiply+0x138>
 8007c30:	6106      	str	r6, [r0, #16]
 8007c32:	b005      	add	sp, #20
 8007c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c38:	f843 2b04 	str.w	r2, [r3], #4
 8007c3c:	e7d9      	b.n	8007bf2 <__multiply+0x4e>
 8007c3e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007c42:	f1ba 0f00 	cmp.w	sl, #0
 8007c46:	d01f      	beq.n	8007c88 <__multiply+0xe4>
 8007c48:	46c4      	mov	ip, r8
 8007c4a:	46a1      	mov	r9, r4
 8007c4c:	2700      	movs	r7, #0
 8007c4e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007c52:	f8d9 3000 	ldr.w	r3, [r9]
 8007c56:	fa1f fb82 	uxth.w	fp, r2
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007c60:	443b      	add	r3, r7
 8007c62:	f8d9 7000 	ldr.w	r7, [r9]
 8007c66:	0c12      	lsrs	r2, r2, #16
 8007c68:	0c3f      	lsrs	r7, r7, #16
 8007c6a:	fb0a 7202 	mla	r2, sl, r2, r7
 8007c6e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c78:	4565      	cmp	r5, ip
 8007c7a:	f849 3b04 	str.w	r3, [r9], #4
 8007c7e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007c82:	d8e4      	bhi.n	8007c4e <__multiply+0xaa>
 8007c84:	9b01      	ldr	r3, [sp, #4]
 8007c86:	50e7      	str	r7, [r4, r3]
 8007c88:	9b03      	ldr	r3, [sp, #12]
 8007c8a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007c8e:	3104      	adds	r1, #4
 8007c90:	f1b9 0f00 	cmp.w	r9, #0
 8007c94:	d020      	beq.n	8007cd8 <__multiply+0x134>
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	4647      	mov	r7, r8
 8007c9a:	46a4      	mov	ip, r4
 8007c9c:	f04f 0a00 	mov.w	sl, #0
 8007ca0:	f8b7 b000 	ldrh.w	fp, [r7]
 8007ca4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007ca8:	fb09 220b 	mla	r2, r9, fp, r2
 8007cac:	4452      	add	r2, sl
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cb4:	f84c 3b04 	str.w	r3, [ip], #4
 8007cb8:	f857 3b04 	ldr.w	r3, [r7], #4
 8007cbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007cc0:	f8bc 3000 	ldrh.w	r3, [ip]
 8007cc4:	fb09 330a 	mla	r3, r9, sl, r3
 8007cc8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007ccc:	42bd      	cmp	r5, r7
 8007cce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007cd2:	d8e5      	bhi.n	8007ca0 <__multiply+0xfc>
 8007cd4:	9a01      	ldr	r2, [sp, #4]
 8007cd6:	50a3      	str	r3, [r4, r2]
 8007cd8:	3404      	adds	r4, #4
 8007cda:	e79f      	b.n	8007c1c <__multiply+0x78>
 8007cdc:	3e01      	subs	r6, #1
 8007cde:	e7a1      	b.n	8007c24 <__multiply+0x80>
 8007ce0:	08008744 	.word	0x08008744
 8007ce4:	08008766 	.word	0x08008766

08007ce8 <__pow5mult>:
 8007ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cec:	4615      	mov	r5, r2
 8007cee:	f012 0203 	ands.w	r2, r2, #3
 8007cf2:	4607      	mov	r7, r0
 8007cf4:	460e      	mov	r6, r1
 8007cf6:	d007      	beq.n	8007d08 <__pow5mult+0x20>
 8007cf8:	4c25      	ldr	r4, [pc, #148]	@ (8007d90 <__pow5mult+0xa8>)
 8007cfa:	3a01      	subs	r2, #1
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d02:	f7ff fea7 	bl	8007a54 <__multadd>
 8007d06:	4606      	mov	r6, r0
 8007d08:	10ad      	asrs	r5, r5, #2
 8007d0a:	d03d      	beq.n	8007d88 <__pow5mult+0xa0>
 8007d0c:	69fc      	ldr	r4, [r7, #28]
 8007d0e:	b97c      	cbnz	r4, 8007d30 <__pow5mult+0x48>
 8007d10:	2010      	movs	r0, #16
 8007d12:	f7ff fcdb 	bl	80076cc <malloc>
 8007d16:	4602      	mov	r2, r0
 8007d18:	61f8      	str	r0, [r7, #28]
 8007d1a:	b928      	cbnz	r0, 8007d28 <__pow5mult+0x40>
 8007d1c:	4b1d      	ldr	r3, [pc, #116]	@ (8007d94 <__pow5mult+0xac>)
 8007d1e:	481e      	ldr	r0, [pc, #120]	@ (8007d98 <__pow5mult+0xb0>)
 8007d20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007d24:	f000 fb6e 	bl	8008404 <__assert_func>
 8007d28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d2c:	6004      	str	r4, [r0, #0]
 8007d2e:	60c4      	str	r4, [r0, #12]
 8007d30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007d34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d38:	b94c      	cbnz	r4, 8007d4e <__pow5mult+0x66>
 8007d3a:	f240 2171 	movw	r1, #625	@ 0x271
 8007d3e:	4638      	mov	r0, r7
 8007d40:	f7ff ff1a 	bl	8007b78 <__i2b>
 8007d44:	2300      	movs	r3, #0
 8007d46:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	6003      	str	r3, [r0, #0]
 8007d4e:	f04f 0900 	mov.w	r9, #0
 8007d52:	07eb      	lsls	r3, r5, #31
 8007d54:	d50a      	bpl.n	8007d6c <__pow5mult+0x84>
 8007d56:	4631      	mov	r1, r6
 8007d58:	4622      	mov	r2, r4
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	f7ff ff22 	bl	8007ba4 <__multiply>
 8007d60:	4631      	mov	r1, r6
 8007d62:	4680      	mov	r8, r0
 8007d64:	4638      	mov	r0, r7
 8007d66:	f7ff fe53 	bl	8007a10 <_Bfree>
 8007d6a:	4646      	mov	r6, r8
 8007d6c:	106d      	asrs	r5, r5, #1
 8007d6e:	d00b      	beq.n	8007d88 <__pow5mult+0xa0>
 8007d70:	6820      	ldr	r0, [r4, #0]
 8007d72:	b938      	cbnz	r0, 8007d84 <__pow5mult+0x9c>
 8007d74:	4622      	mov	r2, r4
 8007d76:	4621      	mov	r1, r4
 8007d78:	4638      	mov	r0, r7
 8007d7a:	f7ff ff13 	bl	8007ba4 <__multiply>
 8007d7e:	6020      	str	r0, [r4, #0]
 8007d80:	f8c0 9000 	str.w	r9, [r0]
 8007d84:	4604      	mov	r4, r0
 8007d86:	e7e4      	b.n	8007d52 <__pow5mult+0x6a>
 8007d88:	4630      	mov	r0, r6
 8007d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d8e:	bf00      	nop
 8007d90:	08008808 	.word	0x08008808
 8007d94:	080086d5 	.word	0x080086d5
 8007d98:	08008766 	.word	0x08008766

08007d9c <__lshift>:
 8007d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007da0:	460c      	mov	r4, r1
 8007da2:	6849      	ldr	r1, [r1, #4]
 8007da4:	6923      	ldr	r3, [r4, #16]
 8007da6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007daa:	68a3      	ldr	r3, [r4, #8]
 8007dac:	4607      	mov	r7, r0
 8007dae:	4691      	mov	r9, r2
 8007db0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007db4:	f108 0601 	add.w	r6, r8, #1
 8007db8:	42b3      	cmp	r3, r6
 8007dba:	db0b      	blt.n	8007dd4 <__lshift+0x38>
 8007dbc:	4638      	mov	r0, r7
 8007dbe:	f7ff fde7 	bl	8007990 <_Balloc>
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	b948      	cbnz	r0, 8007dda <__lshift+0x3e>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	4b28      	ldr	r3, [pc, #160]	@ (8007e6c <__lshift+0xd0>)
 8007dca:	4829      	ldr	r0, [pc, #164]	@ (8007e70 <__lshift+0xd4>)
 8007dcc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007dd0:	f000 fb18 	bl	8008404 <__assert_func>
 8007dd4:	3101      	adds	r1, #1
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	e7ee      	b.n	8007db8 <__lshift+0x1c>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	f100 0114 	add.w	r1, r0, #20
 8007de0:	f100 0210 	add.w	r2, r0, #16
 8007de4:	4618      	mov	r0, r3
 8007de6:	4553      	cmp	r3, sl
 8007de8:	db33      	blt.n	8007e52 <__lshift+0xb6>
 8007dea:	6920      	ldr	r0, [r4, #16]
 8007dec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007df0:	f104 0314 	add.w	r3, r4, #20
 8007df4:	f019 091f 	ands.w	r9, r9, #31
 8007df8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007dfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e00:	d02b      	beq.n	8007e5a <__lshift+0xbe>
 8007e02:	f1c9 0e20 	rsb	lr, r9, #32
 8007e06:	468a      	mov	sl, r1
 8007e08:	2200      	movs	r2, #0
 8007e0a:	6818      	ldr	r0, [r3, #0]
 8007e0c:	fa00 f009 	lsl.w	r0, r0, r9
 8007e10:	4310      	orrs	r0, r2
 8007e12:	f84a 0b04 	str.w	r0, [sl], #4
 8007e16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e1a:	459c      	cmp	ip, r3
 8007e1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e20:	d8f3      	bhi.n	8007e0a <__lshift+0x6e>
 8007e22:	ebac 0304 	sub.w	r3, ip, r4
 8007e26:	3b15      	subs	r3, #21
 8007e28:	f023 0303 	bic.w	r3, r3, #3
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	f104 0015 	add.w	r0, r4, #21
 8007e32:	4560      	cmp	r0, ip
 8007e34:	bf88      	it	hi
 8007e36:	2304      	movhi	r3, #4
 8007e38:	50ca      	str	r2, [r1, r3]
 8007e3a:	b10a      	cbz	r2, 8007e40 <__lshift+0xa4>
 8007e3c:	f108 0602 	add.w	r6, r8, #2
 8007e40:	3e01      	subs	r6, #1
 8007e42:	4638      	mov	r0, r7
 8007e44:	612e      	str	r6, [r5, #16]
 8007e46:	4621      	mov	r1, r4
 8007e48:	f7ff fde2 	bl	8007a10 <_Bfree>
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e52:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e56:	3301      	adds	r3, #1
 8007e58:	e7c5      	b.n	8007de6 <__lshift+0x4a>
 8007e5a:	3904      	subs	r1, #4
 8007e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e60:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e64:	459c      	cmp	ip, r3
 8007e66:	d8f9      	bhi.n	8007e5c <__lshift+0xc0>
 8007e68:	e7ea      	b.n	8007e40 <__lshift+0xa4>
 8007e6a:	bf00      	nop
 8007e6c:	08008744 	.word	0x08008744
 8007e70:	08008766 	.word	0x08008766

08007e74 <__mcmp>:
 8007e74:	690a      	ldr	r2, [r1, #16]
 8007e76:	4603      	mov	r3, r0
 8007e78:	6900      	ldr	r0, [r0, #16]
 8007e7a:	1a80      	subs	r0, r0, r2
 8007e7c:	b530      	push	{r4, r5, lr}
 8007e7e:	d10e      	bne.n	8007e9e <__mcmp+0x2a>
 8007e80:	3314      	adds	r3, #20
 8007e82:	3114      	adds	r1, #20
 8007e84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e94:	4295      	cmp	r5, r2
 8007e96:	d003      	beq.n	8007ea0 <__mcmp+0x2c>
 8007e98:	d205      	bcs.n	8007ea6 <__mcmp+0x32>
 8007e9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e9e:	bd30      	pop	{r4, r5, pc}
 8007ea0:	42a3      	cmp	r3, r4
 8007ea2:	d3f3      	bcc.n	8007e8c <__mcmp+0x18>
 8007ea4:	e7fb      	b.n	8007e9e <__mcmp+0x2a>
 8007ea6:	2001      	movs	r0, #1
 8007ea8:	e7f9      	b.n	8007e9e <__mcmp+0x2a>
	...

08007eac <__mdiff>:
 8007eac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb0:	4689      	mov	r9, r1
 8007eb2:	4606      	mov	r6, r0
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	4648      	mov	r0, r9
 8007eb8:	4614      	mov	r4, r2
 8007eba:	f7ff ffdb 	bl	8007e74 <__mcmp>
 8007ebe:	1e05      	subs	r5, r0, #0
 8007ec0:	d112      	bne.n	8007ee8 <__mdiff+0x3c>
 8007ec2:	4629      	mov	r1, r5
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	f7ff fd63 	bl	8007990 <_Balloc>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	b928      	cbnz	r0, 8007eda <__mdiff+0x2e>
 8007ece:	4b3f      	ldr	r3, [pc, #252]	@ (8007fcc <__mdiff+0x120>)
 8007ed0:	f240 2137 	movw	r1, #567	@ 0x237
 8007ed4:	483e      	ldr	r0, [pc, #248]	@ (8007fd0 <__mdiff+0x124>)
 8007ed6:	f000 fa95 	bl	8008404 <__assert_func>
 8007eda:	2301      	movs	r3, #1
 8007edc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	b003      	add	sp, #12
 8007ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee8:	bfbc      	itt	lt
 8007eea:	464b      	movlt	r3, r9
 8007eec:	46a1      	movlt	r9, r4
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007ef4:	bfba      	itte	lt
 8007ef6:	461c      	movlt	r4, r3
 8007ef8:	2501      	movlt	r5, #1
 8007efa:	2500      	movge	r5, #0
 8007efc:	f7ff fd48 	bl	8007990 <_Balloc>
 8007f00:	4602      	mov	r2, r0
 8007f02:	b918      	cbnz	r0, 8007f0c <__mdiff+0x60>
 8007f04:	4b31      	ldr	r3, [pc, #196]	@ (8007fcc <__mdiff+0x120>)
 8007f06:	f240 2145 	movw	r1, #581	@ 0x245
 8007f0a:	e7e3      	b.n	8007ed4 <__mdiff+0x28>
 8007f0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007f10:	6926      	ldr	r6, [r4, #16]
 8007f12:	60c5      	str	r5, [r0, #12]
 8007f14:	f109 0310 	add.w	r3, r9, #16
 8007f18:	f109 0514 	add.w	r5, r9, #20
 8007f1c:	f104 0e14 	add.w	lr, r4, #20
 8007f20:	f100 0b14 	add.w	fp, r0, #20
 8007f24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007f28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	46d9      	mov	r9, fp
 8007f30:	f04f 0c00 	mov.w	ip, #0
 8007f34:	9b01      	ldr	r3, [sp, #4]
 8007f36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007f3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007f3e:	9301      	str	r3, [sp, #4]
 8007f40:	fa1f f38a 	uxth.w	r3, sl
 8007f44:	4619      	mov	r1, r3
 8007f46:	b283      	uxth	r3, r0
 8007f48:	1acb      	subs	r3, r1, r3
 8007f4a:	0c00      	lsrs	r0, r0, #16
 8007f4c:	4463      	add	r3, ip
 8007f4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007f52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007f5c:	4576      	cmp	r6, lr
 8007f5e:	f849 3b04 	str.w	r3, [r9], #4
 8007f62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f66:	d8e5      	bhi.n	8007f34 <__mdiff+0x88>
 8007f68:	1b33      	subs	r3, r6, r4
 8007f6a:	3b15      	subs	r3, #21
 8007f6c:	f023 0303 	bic.w	r3, r3, #3
 8007f70:	3415      	adds	r4, #21
 8007f72:	3304      	adds	r3, #4
 8007f74:	42a6      	cmp	r6, r4
 8007f76:	bf38      	it	cc
 8007f78:	2304      	movcc	r3, #4
 8007f7a:	441d      	add	r5, r3
 8007f7c:	445b      	add	r3, fp
 8007f7e:	461e      	mov	r6, r3
 8007f80:	462c      	mov	r4, r5
 8007f82:	4544      	cmp	r4, r8
 8007f84:	d30e      	bcc.n	8007fa4 <__mdiff+0xf8>
 8007f86:	f108 0103 	add.w	r1, r8, #3
 8007f8a:	1b49      	subs	r1, r1, r5
 8007f8c:	f021 0103 	bic.w	r1, r1, #3
 8007f90:	3d03      	subs	r5, #3
 8007f92:	45a8      	cmp	r8, r5
 8007f94:	bf38      	it	cc
 8007f96:	2100      	movcc	r1, #0
 8007f98:	440b      	add	r3, r1
 8007f9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f9e:	b191      	cbz	r1, 8007fc6 <__mdiff+0x11a>
 8007fa0:	6117      	str	r7, [r2, #16]
 8007fa2:	e79d      	b.n	8007ee0 <__mdiff+0x34>
 8007fa4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007fa8:	46e6      	mov	lr, ip
 8007faa:	0c08      	lsrs	r0, r1, #16
 8007fac:	fa1c fc81 	uxtah	ip, ip, r1
 8007fb0:	4471      	add	r1, lr
 8007fb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007fb6:	b289      	uxth	r1, r1
 8007fb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007fbc:	f846 1b04 	str.w	r1, [r6], #4
 8007fc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007fc4:	e7dd      	b.n	8007f82 <__mdiff+0xd6>
 8007fc6:	3f01      	subs	r7, #1
 8007fc8:	e7e7      	b.n	8007f9a <__mdiff+0xee>
 8007fca:	bf00      	nop
 8007fcc:	08008744 	.word	0x08008744
 8007fd0:	08008766 	.word	0x08008766

08007fd4 <__d2b>:
 8007fd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fd8:	460f      	mov	r7, r1
 8007fda:	2101      	movs	r1, #1
 8007fdc:	ec59 8b10 	vmov	r8, r9, d0
 8007fe0:	4616      	mov	r6, r2
 8007fe2:	f7ff fcd5 	bl	8007990 <_Balloc>
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	b930      	cbnz	r0, 8007ff8 <__d2b+0x24>
 8007fea:	4602      	mov	r2, r0
 8007fec:	4b23      	ldr	r3, [pc, #140]	@ (800807c <__d2b+0xa8>)
 8007fee:	4824      	ldr	r0, [pc, #144]	@ (8008080 <__d2b+0xac>)
 8007ff0:	f240 310f 	movw	r1, #783	@ 0x30f
 8007ff4:	f000 fa06 	bl	8008404 <__assert_func>
 8007ff8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ffc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008000:	b10d      	cbz	r5, 8008006 <__d2b+0x32>
 8008002:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008006:	9301      	str	r3, [sp, #4]
 8008008:	f1b8 0300 	subs.w	r3, r8, #0
 800800c:	d023      	beq.n	8008056 <__d2b+0x82>
 800800e:	4668      	mov	r0, sp
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	f7ff fd84 	bl	8007b1e <__lo0bits>
 8008016:	e9dd 1200 	ldrd	r1, r2, [sp]
 800801a:	b1d0      	cbz	r0, 8008052 <__d2b+0x7e>
 800801c:	f1c0 0320 	rsb	r3, r0, #32
 8008020:	fa02 f303 	lsl.w	r3, r2, r3
 8008024:	430b      	orrs	r3, r1
 8008026:	40c2      	lsrs	r2, r0
 8008028:	6163      	str	r3, [r4, #20]
 800802a:	9201      	str	r2, [sp, #4]
 800802c:	9b01      	ldr	r3, [sp, #4]
 800802e:	61a3      	str	r3, [r4, #24]
 8008030:	2b00      	cmp	r3, #0
 8008032:	bf0c      	ite	eq
 8008034:	2201      	moveq	r2, #1
 8008036:	2202      	movne	r2, #2
 8008038:	6122      	str	r2, [r4, #16]
 800803a:	b1a5      	cbz	r5, 8008066 <__d2b+0x92>
 800803c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008040:	4405      	add	r5, r0
 8008042:	603d      	str	r5, [r7, #0]
 8008044:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008048:	6030      	str	r0, [r6, #0]
 800804a:	4620      	mov	r0, r4
 800804c:	b003      	add	sp, #12
 800804e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008052:	6161      	str	r1, [r4, #20]
 8008054:	e7ea      	b.n	800802c <__d2b+0x58>
 8008056:	a801      	add	r0, sp, #4
 8008058:	f7ff fd61 	bl	8007b1e <__lo0bits>
 800805c:	9b01      	ldr	r3, [sp, #4]
 800805e:	6163      	str	r3, [r4, #20]
 8008060:	3020      	adds	r0, #32
 8008062:	2201      	movs	r2, #1
 8008064:	e7e8      	b.n	8008038 <__d2b+0x64>
 8008066:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800806a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800806e:	6038      	str	r0, [r7, #0]
 8008070:	6918      	ldr	r0, [r3, #16]
 8008072:	f7ff fd35 	bl	8007ae0 <__hi0bits>
 8008076:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800807a:	e7e5      	b.n	8008048 <__d2b+0x74>
 800807c:	08008744 	.word	0x08008744
 8008080:	08008766 	.word	0x08008766

08008084 <__sread>:
 8008084:	b510      	push	{r4, lr}
 8008086:	460c      	mov	r4, r1
 8008088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800808c:	f000 f956 	bl	800833c <_read_r>
 8008090:	2800      	cmp	r0, #0
 8008092:	bfab      	itete	ge
 8008094:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008096:	89a3      	ldrhlt	r3, [r4, #12]
 8008098:	181b      	addge	r3, r3, r0
 800809a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800809e:	bfac      	ite	ge
 80080a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80080a2:	81a3      	strhlt	r3, [r4, #12]
 80080a4:	bd10      	pop	{r4, pc}

080080a6 <__swrite>:
 80080a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080aa:	461f      	mov	r7, r3
 80080ac:	898b      	ldrh	r3, [r1, #12]
 80080ae:	05db      	lsls	r3, r3, #23
 80080b0:	4605      	mov	r5, r0
 80080b2:	460c      	mov	r4, r1
 80080b4:	4616      	mov	r6, r2
 80080b6:	d505      	bpl.n	80080c4 <__swrite+0x1e>
 80080b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080bc:	2302      	movs	r3, #2
 80080be:	2200      	movs	r2, #0
 80080c0:	f000 f92a 	bl	8008318 <_lseek_r>
 80080c4:	89a3      	ldrh	r3, [r4, #12]
 80080c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080ce:	81a3      	strh	r3, [r4, #12]
 80080d0:	4632      	mov	r2, r6
 80080d2:	463b      	mov	r3, r7
 80080d4:	4628      	mov	r0, r5
 80080d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080da:	f000 b951 	b.w	8008380 <_write_r>

080080de <__sseek>:
 80080de:	b510      	push	{r4, lr}
 80080e0:	460c      	mov	r4, r1
 80080e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e6:	f000 f917 	bl	8008318 <_lseek_r>
 80080ea:	1c43      	adds	r3, r0, #1
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	bf15      	itete	ne
 80080f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80080f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80080f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80080fa:	81a3      	strheq	r3, [r4, #12]
 80080fc:	bf18      	it	ne
 80080fe:	81a3      	strhne	r3, [r4, #12]
 8008100:	bd10      	pop	{r4, pc}

08008102 <__sclose>:
 8008102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008106:	f000 b94d 	b.w	80083a4 <_close_r>

0800810a <__swbuf_r>:
 800810a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810c:	460e      	mov	r6, r1
 800810e:	4614      	mov	r4, r2
 8008110:	4605      	mov	r5, r0
 8008112:	b118      	cbz	r0, 800811c <__swbuf_r+0x12>
 8008114:	6a03      	ldr	r3, [r0, #32]
 8008116:	b90b      	cbnz	r3, 800811c <__swbuf_r+0x12>
 8008118:	f7fe fabc 	bl	8006694 <__sinit>
 800811c:	69a3      	ldr	r3, [r4, #24]
 800811e:	60a3      	str	r3, [r4, #8]
 8008120:	89a3      	ldrh	r3, [r4, #12]
 8008122:	071a      	lsls	r2, r3, #28
 8008124:	d501      	bpl.n	800812a <__swbuf_r+0x20>
 8008126:	6923      	ldr	r3, [r4, #16]
 8008128:	b943      	cbnz	r3, 800813c <__swbuf_r+0x32>
 800812a:	4621      	mov	r1, r4
 800812c:	4628      	mov	r0, r5
 800812e:	f000 f82b 	bl	8008188 <__swsetup_r>
 8008132:	b118      	cbz	r0, 800813c <__swbuf_r+0x32>
 8008134:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008138:	4638      	mov	r0, r7
 800813a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	6922      	ldr	r2, [r4, #16]
 8008140:	1a98      	subs	r0, r3, r2
 8008142:	6963      	ldr	r3, [r4, #20]
 8008144:	b2f6      	uxtb	r6, r6
 8008146:	4283      	cmp	r3, r0
 8008148:	4637      	mov	r7, r6
 800814a:	dc05      	bgt.n	8008158 <__swbuf_r+0x4e>
 800814c:	4621      	mov	r1, r4
 800814e:	4628      	mov	r0, r5
 8008150:	f7ff fbea 	bl	8007928 <_fflush_r>
 8008154:	2800      	cmp	r0, #0
 8008156:	d1ed      	bne.n	8008134 <__swbuf_r+0x2a>
 8008158:	68a3      	ldr	r3, [r4, #8]
 800815a:	3b01      	subs	r3, #1
 800815c:	60a3      	str	r3, [r4, #8]
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	1c5a      	adds	r2, r3, #1
 8008162:	6022      	str	r2, [r4, #0]
 8008164:	701e      	strb	r6, [r3, #0]
 8008166:	6962      	ldr	r2, [r4, #20]
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	429a      	cmp	r2, r3
 800816c:	d004      	beq.n	8008178 <__swbuf_r+0x6e>
 800816e:	89a3      	ldrh	r3, [r4, #12]
 8008170:	07db      	lsls	r3, r3, #31
 8008172:	d5e1      	bpl.n	8008138 <__swbuf_r+0x2e>
 8008174:	2e0a      	cmp	r6, #10
 8008176:	d1df      	bne.n	8008138 <__swbuf_r+0x2e>
 8008178:	4621      	mov	r1, r4
 800817a:	4628      	mov	r0, r5
 800817c:	f7ff fbd4 	bl	8007928 <_fflush_r>
 8008180:	2800      	cmp	r0, #0
 8008182:	d0d9      	beq.n	8008138 <__swbuf_r+0x2e>
 8008184:	e7d6      	b.n	8008134 <__swbuf_r+0x2a>
	...

08008188 <__swsetup_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4b29      	ldr	r3, [pc, #164]	@ (8008230 <__swsetup_r+0xa8>)
 800818c:	4605      	mov	r5, r0
 800818e:	6818      	ldr	r0, [r3, #0]
 8008190:	460c      	mov	r4, r1
 8008192:	b118      	cbz	r0, 800819c <__swsetup_r+0x14>
 8008194:	6a03      	ldr	r3, [r0, #32]
 8008196:	b90b      	cbnz	r3, 800819c <__swsetup_r+0x14>
 8008198:	f7fe fa7c 	bl	8006694 <__sinit>
 800819c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081a0:	0719      	lsls	r1, r3, #28
 80081a2:	d422      	bmi.n	80081ea <__swsetup_r+0x62>
 80081a4:	06da      	lsls	r2, r3, #27
 80081a6:	d407      	bmi.n	80081b8 <__swsetup_r+0x30>
 80081a8:	2209      	movs	r2, #9
 80081aa:	602a      	str	r2, [r5, #0]
 80081ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081b0:	81a3      	strh	r3, [r4, #12]
 80081b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081b6:	e033      	b.n	8008220 <__swsetup_r+0x98>
 80081b8:	0758      	lsls	r0, r3, #29
 80081ba:	d512      	bpl.n	80081e2 <__swsetup_r+0x5a>
 80081bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081be:	b141      	cbz	r1, 80081d2 <__swsetup_r+0x4a>
 80081c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081c4:	4299      	cmp	r1, r3
 80081c6:	d002      	beq.n	80081ce <__swsetup_r+0x46>
 80081c8:	4628      	mov	r0, r5
 80081ca:	f000 f94d 	bl	8008468 <_free_r>
 80081ce:	2300      	movs	r3, #0
 80081d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80081d2:	89a3      	ldrh	r3, [r4, #12]
 80081d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081d8:	81a3      	strh	r3, [r4, #12]
 80081da:	2300      	movs	r3, #0
 80081dc:	6063      	str	r3, [r4, #4]
 80081de:	6923      	ldr	r3, [r4, #16]
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	f043 0308 	orr.w	r3, r3, #8
 80081e8:	81a3      	strh	r3, [r4, #12]
 80081ea:	6923      	ldr	r3, [r4, #16]
 80081ec:	b94b      	cbnz	r3, 8008202 <__swsetup_r+0x7a>
 80081ee:	89a3      	ldrh	r3, [r4, #12]
 80081f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081f8:	d003      	beq.n	8008202 <__swsetup_r+0x7a>
 80081fa:	4621      	mov	r1, r4
 80081fc:	4628      	mov	r0, r5
 80081fe:	f000 f83f 	bl	8008280 <__smakebuf_r>
 8008202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008206:	f013 0201 	ands.w	r2, r3, #1
 800820a:	d00a      	beq.n	8008222 <__swsetup_r+0x9a>
 800820c:	2200      	movs	r2, #0
 800820e:	60a2      	str	r2, [r4, #8]
 8008210:	6962      	ldr	r2, [r4, #20]
 8008212:	4252      	negs	r2, r2
 8008214:	61a2      	str	r2, [r4, #24]
 8008216:	6922      	ldr	r2, [r4, #16]
 8008218:	b942      	cbnz	r2, 800822c <__swsetup_r+0xa4>
 800821a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800821e:	d1c5      	bne.n	80081ac <__swsetup_r+0x24>
 8008220:	bd38      	pop	{r3, r4, r5, pc}
 8008222:	0799      	lsls	r1, r3, #30
 8008224:	bf58      	it	pl
 8008226:	6962      	ldrpl	r2, [r4, #20]
 8008228:	60a2      	str	r2, [r4, #8]
 800822a:	e7f4      	b.n	8008216 <__swsetup_r+0x8e>
 800822c:	2000      	movs	r0, #0
 800822e:	e7f7      	b.n	8008220 <__swsetup_r+0x98>
 8008230:	20040018 	.word	0x20040018

08008234 <__swhatbuf_r>:
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	460c      	mov	r4, r1
 8008238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800823c:	2900      	cmp	r1, #0
 800823e:	b096      	sub	sp, #88	@ 0x58
 8008240:	4615      	mov	r5, r2
 8008242:	461e      	mov	r6, r3
 8008244:	da0d      	bge.n	8008262 <__swhatbuf_r+0x2e>
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800824c:	f04f 0100 	mov.w	r1, #0
 8008250:	bf14      	ite	ne
 8008252:	2340      	movne	r3, #64	@ 0x40
 8008254:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008258:	2000      	movs	r0, #0
 800825a:	6031      	str	r1, [r6, #0]
 800825c:	602b      	str	r3, [r5, #0]
 800825e:	b016      	add	sp, #88	@ 0x58
 8008260:	bd70      	pop	{r4, r5, r6, pc}
 8008262:	466a      	mov	r2, sp
 8008264:	f000 f8ae 	bl	80083c4 <_fstat_r>
 8008268:	2800      	cmp	r0, #0
 800826a:	dbec      	blt.n	8008246 <__swhatbuf_r+0x12>
 800826c:	9901      	ldr	r1, [sp, #4]
 800826e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008272:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008276:	4259      	negs	r1, r3
 8008278:	4159      	adcs	r1, r3
 800827a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800827e:	e7eb      	b.n	8008258 <__swhatbuf_r+0x24>

08008280 <__smakebuf_r>:
 8008280:	898b      	ldrh	r3, [r1, #12]
 8008282:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008284:	079d      	lsls	r5, r3, #30
 8008286:	4606      	mov	r6, r0
 8008288:	460c      	mov	r4, r1
 800828a:	d507      	bpl.n	800829c <__smakebuf_r+0x1c>
 800828c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	6123      	str	r3, [r4, #16]
 8008294:	2301      	movs	r3, #1
 8008296:	6163      	str	r3, [r4, #20]
 8008298:	b003      	add	sp, #12
 800829a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800829c:	ab01      	add	r3, sp, #4
 800829e:	466a      	mov	r2, sp
 80082a0:	f7ff ffc8 	bl	8008234 <__swhatbuf_r>
 80082a4:	9f00      	ldr	r7, [sp, #0]
 80082a6:	4605      	mov	r5, r0
 80082a8:	4639      	mov	r1, r7
 80082aa:	4630      	mov	r0, r6
 80082ac:	f7ff fa38 	bl	8007720 <_malloc_r>
 80082b0:	b948      	cbnz	r0, 80082c6 <__smakebuf_r+0x46>
 80082b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082b6:	059a      	lsls	r2, r3, #22
 80082b8:	d4ee      	bmi.n	8008298 <__smakebuf_r+0x18>
 80082ba:	f023 0303 	bic.w	r3, r3, #3
 80082be:	f043 0302 	orr.w	r3, r3, #2
 80082c2:	81a3      	strh	r3, [r4, #12]
 80082c4:	e7e2      	b.n	800828c <__smakebuf_r+0xc>
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	6020      	str	r0, [r4, #0]
 80082ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ce:	81a3      	strh	r3, [r4, #12]
 80082d0:	9b01      	ldr	r3, [sp, #4]
 80082d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80082d6:	b15b      	cbz	r3, 80082f0 <__smakebuf_r+0x70>
 80082d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082dc:	4630      	mov	r0, r6
 80082de:	f000 f80b 	bl	80082f8 <_isatty_r>
 80082e2:	b128      	cbz	r0, 80082f0 <__smakebuf_r+0x70>
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	f023 0303 	bic.w	r3, r3, #3
 80082ea:	f043 0301 	orr.w	r3, r3, #1
 80082ee:	81a3      	strh	r3, [r4, #12]
 80082f0:	89a3      	ldrh	r3, [r4, #12]
 80082f2:	431d      	orrs	r5, r3
 80082f4:	81a5      	strh	r5, [r4, #12]
 80082f6:	e7cf      	b.n	8008298 <__smakebuf_r+0x18>

080082f8 <_isatty_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	4d06      	ldr	r5, [pc, #24]	@ (8008314 <_isatty_r+0x1c>)
 80082fc:	2300      	movs	r3, #0
 80082fe:	4604      	mov	r4, r0
 8008300:	4608      	mov	r0, r1
 8008302:	602b      	str	r3, [r5, #0]
 8008304:	f7fa f89a 	bl	800243c <_isatty>
 8008308:	1c43      	adds	r3, r0, #1
 800830a:	d102      	bne.n	8008312 <_isatty_r+0x1a>
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	b103      	cbz	r3, 8008312 <_isatty_r+0x1a>
 8008310:	6023      	str	r3, [r4, #0]
 8008312:	bd38      	pop	{r3, r4, r5, pc}
 8008314:	20040508 	.word	0x20040508

08008318 <_lseek_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	4d07      	ldr	r5, [pc, #28]	@ (8008338 <_lseek_r+0x20>)
 800831c:	4604      	mov	r4, r0
 800831e:	4608      	mov	r0, r1
 8008320:	4611      	mov	r1, r2
 8008322:	2200      	movs	r2, #0
 8008324:	602a      	str	r2, [r5, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	f7fa f893 	bl	8002452 <_lseek>
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	d102      	bne.n	8008336 <_lseek_r+0x1e>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	b103      	cbz	r3, 8008336 <_lseek_r+0x1e>
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	bd38      	pop	{r3, r4, r5, pc}
 8008338:	20040508 	.word	0x20040508

0800833c <_read_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	4d07      	ldr	r5, [pc, #28]	@ (800835c <_read_r+0x20>)
 8008340:	4604      	mov	r4, r0
 8008342:	4608      	mov	r0, r1
 8008344:	4611      	mov	r1, r2
 8008346:	2200      	movs	r2, #0
 8008348:	602a      	str	r2, [r5, #0]
 800834a:	461a      	mov	r2, r3
 800834c:	f7fa f821 	bl	8002392 <_read>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_read_r+0x1e>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b103      	cbz	r3, 800835a <_read_r+0x1e>
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	20040508 	.word	0x20040508

08008360 <_sbrk_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4d06      	ldr	r5, [pc, #24]	@ (800837c <_sbrk_r+0x1c>)
 8008364:	2300      	movs	r3, #0
 8008366:	4604      	mov	r4, r0
 8008368:	4608      	mov	r0, r1
 800836a:	602b      	str	r3, [r5, #0]
 800836c:	f7fa f87e 	bl	800246c <_sbrk>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d102      	bne.n	800837a <_sbrk_r+0x1a>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	b103      	cbz	r3, 800837a <_sbrk_r+0x1a>
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	20040508 	.word	0x20040508

08008380 <_write_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4d07      	ldr	r5, [pc, #28]	@ (80083a0 <_write_r+0x20>)
 8008384:	4604      	mov	r4, r0
 8008386:	4608      	mov	r0, r1
 8008388:	4611      	mov	r1, r2
 800838a:	2200      	movs	r2, #0
 800838c:	602a      	str	r2, [r5, #0]
 800838e:	461a      	mov	r2, r3
 8008390:	f7fa f81c 	bl	80023cc <_write>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	d102      	bne.n	800839e <_write_r+0x1e>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	b103      	cbz	r3, 800839e <_write_r+0x1e>
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	bd38      	pop	{r3, r4, r5, pc}
 80083a0:	20040508 	.word	0x20040508

080083a4 <_close_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4d06      	ldr	r5, [pc, #24]	@ (80083c0 <_close_r+0x1c>)
 80083a8:	2300      	movs	r3, #0
 80083aa:	4604      	mov	r4, r0
 80083ac:	4608      	mov	r0, r1
 80083ae:	602b      	str	r3, [r5, #0]
 80083b0:	f7fa f828 	bl	8002404 <_close>
 80083b4:	1c43      	adds	r3, r0, #1
 80083b6:	d102      	bne.n	80083be <_close_r+0x1a>
 80083b8:	682b      	ldr	r3, [r5, #0]
 80083ba:	b103      	cbz	r3, 80083be <_close_r+0x1a>
 80083bc:	6023      	str	r3, [r4, #0]
 80083be:	bd38      	pop	{r3, r4, r5, pc}
 80083c0:	20040508 	.word	0x20040508

080083c4 <_fstat_r>:
 80083c4:	b538      	push	{r3, r4, r5, lr}
 80083c6:	4d07      	ldr	r5, [pc, #28]	@ (80083e4 <_fstat_r+0x20>)
 80083c8:	2300      	movs	r3, #0
 80083ca:	4604      	mov	r4, r0
 80083cc:	4608      	mov	r0, r1
 80083ce:	4611      	mov	r1, r2
 80083d0:	602b      	str	r3, [r5, #0]
 80083d2:	f7fa f823 	bl	800241c <_fstat>
 80083d6:	1c43      	adds	r3, r0, #1
 80083d8:	d102      	bne.n	80083e0 <_fstat_r+0x1c>
 80083da:	682b      	ldr	r3, [r5, #0]
 80083dc:	b103      	cbz	r3, 80083e0 <_fstat_r+0x1c>
 80083de:	6023      	str	r3, [r4, #0]
 80083e0:	bd38      	pop	{r3, r4, r5, pc}
 80083e2:	bf00      	nop
 80083e4:	20040508 	.word	0x20040508

080083e8 <memcpy>:
 80083e8:	440a      	add	r2, r1
 80083ea:	4291      	cmp	r1, r2
 80083ec:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80083f0:	d100      	bne.n	80083f4 <memcpy+0xc>
 80083f2:	4770      	bx	lr
 80083f4:	b510      	push	{r4, lr}
 80083f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083fe:	4291      	cmp	r1, r2
 8008400:	d1f9      	bne.n	80083f6 <memcpy+0xe>
 8008402:	bd10      	pop	{r4, pc}

08008404 <__assert_func>:
 8008404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008406:	4614      	mov	r4, r2
 8008408:	461a      	mov	r2, r3
 800840a:	4b09      	ldr	r3, [pc, #36]	@ (8008430 <__assert_func+0x2c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4605      	mov	r5, r0
 8008410:	68d8      	ldr	r0, [r3, #12]
 8008412:	b14c      	cbz	r4, 8008428 <__assert_func+0x24>
 8008414:	4b07      	ldr	r3, [pc, #28]	@ (8008434 <__assert_func+0x30>)
 8008416:	9100      	str	r1, [sp, #0]
 8008418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800841c:	4906      	ldr	r1, [pc, #24]	@ (8008438 <__assert_func+0x34>)
 800841e:	462b      	mov	r3, r5
 8008420:	f000 f87e 	bl	8008520 <fiprintf>
 8008424:	f000 f89b 	bl	800855e <abort>
 8008428:	4b04      	ldr	r3, [pc, #16]	@ (800843c <__assert_func+0x38>)
 800842a:	461c      	mov	r4, r3
 800842c:	e7f3      	b.n	8008416 <__assert_func+0x12>
 800842e:	bf00      	nop
 8008430:	20040018 	.word	0x20040018
 8008434:	080087c9 	.word	0x080087c9
 8008438:	080087d6 	.word	0x080087d6
 800843c:	08008804 	.word	0x08008804

08008440 <_calloc_r>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	fba1 5402 	umull	r5, r4, r1, r2
 8008446:	b934      	cbnz	r4, 8008456 <_calloc_r+0x16>
 8008448:	4629      	mov	r1, r5
 800844a:	f7ff f969 	bl	8007720 <_malloc_r>
 800844e:	4606      	mov	r6, r0
 8008450:	b928      	cbnz	r0, 800845e <_calloc_r+0x1e>
 8008452:	4630      	mov	r0, r6
 8008454:	bd70      	pop	{r4, r5, r6, pc}
 8008456:	220c      	movs	r2, #12
 8008458:	6002      	str	r2, [r0, #0]
 800845a:	2600      	movs	r6, #0
 800845c:	e7f9      	b.n	8008452 <_calloc_r+0x12>
 800845e:	462a      	mov	r2, r5
 8008460:	4621      	mov	r1, r4
 8008462:	f7fe f95f 	bl	8006724 <memset>
 8008466:	e7f4      	b.n	8008452 <_calloc_r+0x12>

08008468 <_free_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	4605      	mov	r5, r0
 800846c:	2900      	cmp	r1, #0
 800846e:	d041      	beq.n	80084f4 <_free_r+0x8c>
 8008470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008474:	1f0c      	subs	r4, r1, #4
 8008476:	2b00      	cmp	r3, #0
 8008478:	bfb8      	it	lt
 800847a:	18e4      	addlt	r4, r4, r3
 800847c:	f7ff fa7c 	bl	8007978 <__malloc_lock>
 8008480:	4a1d      	ldr	r2, [pc, #116]	@ (80084f8 <_free_r+0x90>)
 8008482:	6813      	ldr	r3, [r2, #0]
 8008484:	b933      	cbnz	r3, 8008494 <_free_r+0x2c>
 8008486:	6063      	str	r3, [r4, #4]
 8008488:	6014      	str	r4, [r2, #0]
 800848a:	4628      	mov	r0, r5
 800848c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008490:	f7ff ba78 	b.w	8007984 <__malloc_unlock>
 8008494:	42a3      	cmp	r3, r4
 8008496:	d908      	bls.n	80084aa <_free_r+0x42>
 8008498:	6820      	ldr	r0, [r4, #0]
 800849a:	1821      	adds	r1, r4, r0
 800849c:	428b      	cmp	r3, r1
 800849e:	bf01      	itttt	eq
 80084a0:	6819      	ldreq	r1, [r3, #0]
 80084a2:	685b      	ldreq	r3, [r3, #4]
 80084a4:	1809      	addeq	r1, r1, r0
 80084a6:	6021      	streq	r1, [r4, #0]
 80084a8:	e7ed      	b.n	8008486 <_free_r+0x1e>
 80084aa:	461a      	mov	r2, r3
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	b10b      	cbz	r3, 80084b4 <_free_r+0x4c>
 80084b0:	42a3      	cmp	r3, r4
 80084b2:	d9fa      	bls.n	80084aa <_free_r+0x42>
 80084b4:	6811      	ldr	r1, [r2, #0]
 80084b6:	1850      	adds	r0, r2, r1
 80084b8:	42a0      	cmp	r0, r4
 80084ba:	d10b      	bne.n	80084d4 <_free_r+0x6c>
 80084bc:	6820      	ldr	r0, [r4, #0]
 80084be:	4401      	add	r1, r0
 80084c0:	1850      	adds	r0, r2, r1
 80084c2:	4283      	cmp	r3, r0
 80084c4:	6011      	str	r1, [r2, #0]
 80084c6:	d1e0      	bne.n	800848a <_free_r+0x22>
 80084c8:	6818      	ldr	r0, [r3, #0]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	6053      	str	r3, [r2, #4]
 80084ce:	4408      	add	r0, r1
 80084d0:	6010      	str	r0, [r2, #0]
 80084d2:	e7da      	b.n	800848a <_free_r+0x22>
 80084d4:	d902      	bls.n	80084dc <_free_r+0x74>
 80084d6:	230c      	movs	r3, #12
 80084d8:	602b      	str	r3, [r5, #0]
 80084da:	e7d6      	b.n	800848a <_free_r+0x22>
 80084dc:	6820      	ldr	r0, [r4, #0]
 80084de:	1821      	adds	r1, r4, r0
 80084e0:	428b      	cmp	r3, r1
 80084e2:	bf04      	itt	eq
 80084e4:	6819      	ldreq	r1, [r3, #0]
 80084e6:	685b      	ldreq	r3, [r3, #4]
 80084e8:	6063      	str	r3, [r4, #4]
 80084ea:	bf04      	itt	eq
 80084ec:	1809      	addeq	r1, r1, r0
 80084ee:	6021      	streq	r1, [r4, #0]
 80084f0:	6054      	str	r4, [r2, #4]
 80084f2:	e7ca      	b.n	800848a <_free_r+0x22>
 80084f4:	bd38      	pop	{r3, r4, r5, pc}
 80084f6:	bf00      	nop
 80084f8:	20040504 	.word	0x20040504

080084fc <__ascii_mbtowc>:
 80084fc:	b082      	sub	sp, #8
 80084fe:	b901      	cbnz	r1, 8008502 <__ascii_mbtowc+0x6>
 8008500:	a901      	add	r1, sp, #4
 8008502:	b142      	cbz	r2, 8008516 <__ascii_mbtowc+0x1a>
 8008504:	b14b      	cbz	r3, 800851a <__ascii_mbtowc+0x1e>
 8008506:	7813      	ldrb	r3, [r2, #0]
 8008508:	600b      	str	r3, [r1, #0]
 800850a:	7812      	ldrb	r2, [r2, #0]
 800850c:	1e10      	subs	r0, r2, #0
 800850e:	bf18      	it	ne
 8008510:	2001      	movne	r0, #1
 8008512:	b002      	add	sp, #8
 8008514:	4770      	bx	lr
 8008516:	4610      	mov	r0, r2
 8008518:	e7fb      	b.n	8008512 <__ascii_mbtowc+0x16>
 800851a:	f06f 0001 	mvn.w	r0, #1
 800851e:	e7f8      	b.n	8008512 <__ascii_mbtowc+0x16>

08008520 <fiprintf>:
 8008520:	b40e      	push	{r1, r2, r3}
 8008522:	b503      	push	{r0, r1, lr}
 8008524:	4601      	mov	r1, r0
 8008526:	ab03      	add	r3, sp, #12
 8008528:	4805      	ldr	r0, [pc, #20]	@ (8008540 <fiprintf+0x20>)
 800852a:	f853 2b04 	ldr.w	r2, [r3], #4
 800852e:	6800      	ldr	r0, [r0, #0]
 8008530:	9301      	str	r3, [sp, #4]
 8008532:	f7fe ffb3 	bl	800749c <_vfiprintf_r>
 8008536:	b002      	add	sp, #8
 8008538:	f85d eb04 	ldr.w	lr, [sp], #4
 800853c:	b003      	add	sp, #12
 800853e:	4770      	bx	lr
 8008540:	20040018 	.word	0x20040018

08008544 <__ascii_wctomb>:
 8008544:	4603      	mov	r3, r0
 8008546:	4608      	mov	r0, r1
 8008548:	b141      	cbz	r1, 800855c <__ascii_wctomb+0x18>
 800854a:	2aff      	cmp	r2, #255	@ 0xff
 800854c:	d904      	bls.n	8008558 <__ascii_wctomb+0x14>
 800854e:	228a      	movs	r2, #138	@ 0x8a
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008556:	4770      	bx	lr
 8008558:	700a      	strb	r2, [r1, #0]
 800855a:	2001      	movs	r0, #1
 800855c:	4770      	bx	lr

0800855e <abort>:
 800855e:	b508      	push	{r3, lr}
 8008560:	2006      	movs	r0, #6
 8008562:	f000 f82b 	bl	80085bc <raise>
 8008566:	2001      	movs	r0, #1
 8008568:	f7f9 ff08 	bl	800237c <_exit>

0800856c <_raise_r>:
 800856c:	291f      	cmp	r1, #31
 800856e:	b538      	push	{r3, r4, r5, lr}
 8008570:	4605      	mov	r5, r0
 8008572:	460c      	mov	r4, r1
 8008574:	d904      	bls.n	8008580 <_raise_r+0x14>
 8008576:	2316      	movs	r3, #22
 8008578:	6003      	str	r3, [r0, #0]
 800857a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008582:	b112      	cbz	r2, 800858a <_raise_r+0x1e>
 8008584:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008588:	b94b      	cbnz	r3, 800859e <_raise_r+0x32>
 800858a:	4628      	mov	r0, r5
 800858c:	f000 f830 	bl	80085f0 <_getpid_r>
 8008590:	4622      	mov	r2, r4
 8008592:	4601      	mov	r1, r0
 8008594:	4628      	mov	r0, r5
 8008596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800859a:	f000 b817 	b.w	80085cc <_kill_r>
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d00a      	beq.n	80085b8 <_raise_r+0x4c>
 80085a2:	1c59      	adds	r1, r3, #1
 80085a4:	d103      	bne.n	80085ae <_raise_r+0x42>
 80085a6:	2316      	movs	r3, #22
 80085a8:	6003      	str	r3, [r0, #0]
 80085aa:	2001      	movs	r0, #1
 80085ac:	e7e7      	b.n	800857e <_raise_r+0x12>
 80085ae:	2100      	movs	r1, #0
 80085b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80085b4:	4620      	mov	r0, r4
 80085b6:	4798      	blx	r3
 80085b8:	2000      	movs	r0, #0
 80085ba:	e7e0      	b.n	800857e <_raise_r+0x12>

080085bc <raise>:
 80085bc:	4b02      	ldr	r3, [pc, #8]	@ (80085c8 <raise+0xc>)
 80085be:	4601      	mov	r1, r0
 80085c0:	6818      	ldr	r0, [r3, #0]
 80085c2:	f7ff bfd3 	b.w	800856c <_raise_r>
 80085c6:	bf00      	nop
 80085c8:	20040018 	.word	0x20040018

080085cc <_kill_r>:
 80085cc:	b538      	push	{r3, r4, r5, lr}
 80085ce:	4d07      	ldr	r5, [pc, #28]	@ (80085ec <_kill_r+0x20>)
 80085d0:	2300      	movs	r3, #0
 80085d2:	4604      	mov	r4, r0
 80085d4:	4608      	mov	r0, r1
 80085d6:	4611      	mov	r1, r2
 80085d8:	602b      	str	r3, [r5, #0]
 80085da:	f7f9 febf 	bl	800235c <_kill>
 80085de:	1c43      	adds	r3, r0, #1
 80085e0:	d102      	bne.n	80085e8 <_kill_r+0x1c>
 80085e2:	682b      	ldr	r3, [r5, #0]
 80085e4:	b103      	cbz	r3, 80085e8 <_kill_r+0x1c>
 80085e6:	6023      	str	r3, [r4, #0]
 80085e8:	bd38      	pop	{r3, r4, r5, pc}
 80085ea:	bf00      	nop
 80085ec:	20040508 	.word	0x20040508

080085f0 <_getpid_r>:
 80085f0:	f7f9 beac 	b.w	800234c <_getpid>

080085f4 <_init>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr

08008600 <_fini>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	bf00      	nop
 8008604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008606:	bc08      	pop	{r3}
 8008608:	469e      	mov	lr, r3
 800860a:	4770      	bx	lr
